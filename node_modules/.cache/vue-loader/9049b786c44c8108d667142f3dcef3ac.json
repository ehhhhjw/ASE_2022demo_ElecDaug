{"remainingRequest":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\Dashboard.vue?vue&type=style&index=0&id=4055c304&scoped=true&lang=css&","dependencies":[{"path":"E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\Dashboard.vue","mtime":1636383956011},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.el-card {\n    border-radius: 3%;\n}\n.el-row {\n    margin-bottom: 20px;\n}\n.grid-content {\n    display: flex;\n    align-items: center;\n    height: 70px;\n}\n.grid-cont-right {\n    flex: 1;\n    text-align: center;\n    font-size: 14px;\n    color: #999;\n}\n.grid-num {\n    font-size: 30px;\n    font-weight: bold;\n}\n.grid-con-icon {\n    font-size: 50px;\n    width: 70px;\n    height: 100px;\n    text-align: center;\n    line-height: 100px;\n    color: #fff;\n}\n.grid-con-1 .grid-con-icon {\n    background: rgb(45, 140, 240);\n}\n.grid-con-1 .grid-num {\n    color: rgb(45, 140, 240);\n}\n.grid-con-2 .grid-con-icon {\n    background: rgb(100, 213, 114);\n}\n.grid-con-2 .grid-num {\n    color: rgb(100, 213, 114);\n}\n.grid-con-3 .grid-con-icon {\n    background: #e6a23c;\n}\n.grid-con-3 .grid-num {\n    color: #e6a23c;\n}\n.grid-con-4 .grid-con-icon {\n    background: #f56c6c;\n}\n.grid-con-4 .grid-num {\n    color: #f56c6c;\n}\n.user-info {\n    display: flex;\n    align-items: center;\n    padding-bottom: 10px;\n    border-bottom: 2px solid #ccc;\n    margin-bottom: 10px;\n}\n.user-avator {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n}\n.user-info-cont {\n    padding-left: 50px;\n    flex: 1;\n    font-size: 14px;\n    color: #999;\n}\n.user-info-cont div:first-child {\n    font-size: 30px;\n    color: #222;\n}\n.user-info-list {\n    font-size: 14px;\n    color: #999;\n    line-height: 25px;\n}\n.user-info-list span {\n    margin-left: 25px;\n}\n.mgb20 {\n    margin-bottom: 20px;\n}\n.todo-item {\n    font-size: 14px;\n}\n.todo-item-del {\n    text-decoration: line-through;\n    color: #999;\n}\n.schart {\n    width: 100%;\n    height: 300px;\n}\n.el-card__header1 {\n    padding: 0px 10px 10px 10px !important;\n    border-bottom: 1px solid #ebeef5;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n.el-card__body1 {\n    padding: 10px !important;\n}\n.el-card__body2 {\n    padding-top: 10px;\n}\n.body3 {\n    padding-top: 0 !important;\n}\n.el-button--info.is-plain {\n    border-color: #f4f4f5 !important;\n}\n.el-button [class*='el-icon-'] + span {\n    margin-left: 0 !important;\n}\n.el-carousel__item h3 {\n    color: #475669;\n    font-size: 14px;\n    opacity: 0.75;\n    line-height: 150px;\n    margin: 0;\n}\n/* .el-carousel__item:nth-child(2n) {\n    background-color: #99a9bf;\n}\n.el-carousel__item:nth-child(2n + 1) {\n    background-color: #d3dce6;\n} */\n.lidarPic {\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    margin-left: 8px;\n}\n.table-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: 35px;\n    background: #f4f4f5;\n    width: 100%;\n    height: 100px;\n    border-radius: 4px;\n}\n.table-icon:hover {\n    background: lightgrey;\n}\na {\n    color: rgb(83, 83, 83);\n    text-decoration: none;\n}\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappingswpfile":"Dashboard.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <el-row :gutter=\"20\" style=\"margin-bottom: 0px\">\n            <el-col :span=\"18\">\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"16\">\n                        <!-- 快捷方式 -->\n                        <!-- <cardShortcut></cardShortcut> -->\n                        <cardSystemReport></cardSystemReport>\n                    </el-col>\n                    <el-col :span=\"8\">\n                        <cardMethods></cardMethods>\n                    </el-col>\n                </el-row>\n            </el-col>\n            <el-col :span=\"6\">\n                <!-- 平台信息 -->\n                <cardPlatInfo></cardPlatInfo>\n                <!-- 系统报告 -->\n            </el-col>\n        </el-row>\n        <el-row>\n            <el-col :span=\"24\">\n                <el-card shadow=\"hover\">\n                    <div class=\"block\">\n                        <el-carousel trigger=\"click\" height=\"400px\">\n                            <el-carousel-item v-for=\"item in 3\" :key=\"item\">\n                                <div v-if=\"item == 1\" id=\"main1\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                                <div v-if=\"item == 2\" id=\"main2\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                                <div v-if=\"item == 3\" id=\"main3\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                            </el-carousel-item>\n                        </el-carousel>\n                    </div>\n                </el-card>\n                <!-- <el-card shadow=\"hover\">\n                    <div class=\"block\">\n                        <echart-carousel></echart-carousel>\n                    </div>\n                </el-card> -->\n            </el-col>\n        </el-row>\n    </div>\n</template>\n<script>\nimport Schart from 'vue-schart';\nimport bus from '../common/bus';\nimport * as echarts from 'echarts';\nimport echartCarousel from './echarts_carousel.vue';\nimport cardShortcut from './card_shortcut.vue';\nimport cardMethods from './card_methods.vue';\nimport cardPlatInfo from './card_plat_info.vue';\nimport cardSystemReport from './card_system_report.vue';\nexport default {\n    name: 'dashboard',\n\n    data() {\n        return {\n            activeName: 'first',\n            selfstyle: {\n                'margin-left': '0px !important',\n                fontSize: '35px',\n                width: '100%',\n                height: '100px'\n            },\n            tableButtonData: [\n                {\n                    action: '获取设置'\n                }\n            ],\n            tableData: [],\n            name: sessionStorage.getItem('ms_username'),\n            data: [],\n            systemStatusData: {\n                CPUStatus: -1,\n                GPUStatus: -1,\n                memoryStatus: -1\n            },\n            StructuredDataNum: 1,\n            TextDataNum: 36,\n            EmergencyDataNum: 0,\n            OnlineUsersNum: 0,\n            ConversionRate: 0,\n            PassRate: 0,\n            RunningTask: {},\n            RunningTask_name: [],\n            RunningTask_num: [],\n            RunningTask_final: [],\n            i: 0,\n            logShow_new_two: [],\n            dates: [],\n            methods: [],\n            datas_ran: [],\n            datas_finish: [],\n            datas_generate: [],\n            temp_series_ran: [],\n            temp_series_finish: [],\n            temp_series_generate: [],\n            myChart: null,\n            myChart2: null,\n            myChart3: null\n        };\n    },\n    components: {\n        Schart,\n        echartCarousel,\n        cardShortcut,\n        cardMethods,\n        cardPlatInfo,\n        cardSystemReport\n    },\n    computed: {\n        role() {\n            return this.name === 'admin' ? '超级管理员' : '普通用户';\n        }\n    },\n    destroyed() {\n        clearInterval(this.timer);\n    },\n    async created() {\n        const { data: data } = await this.$http.get('/user/');\n    },\n    mounted() {\n        let week = ['日', '一', '二', '三', '四', '五', '六'];\n        setInterval(() => {\n            var date_time = (this.tableData = [\n                {\n                    key: '平台名',\n                    value: '智能系统软件测试数据生成平台'\n                },\n                {\n                    key: '版本号',\n                    value: 'Ver 1.0'\n                },\n                {\n                    key: '时间',\n                    value:\n                        new Date().toLocaleDateString() +\n                        '  ' +\n                        new Date().toLocaleTimeString('it-IT') +\n                        '  星期' +\n                        week[new Date().getDay()]\n                }\n            ]);\n        }, 1000);\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n\n        this.getPerformance();\n        // this.getOnlineUser();\n        this.getRunningTask();\n        this.getECharts();\n        this.timer = setInterval(() => {\n            this.getPerformance();\n            // this.getOnlineUser();\n            this.getRunningTask();\n            this.getECharts();\n        }, 1000 * 60);\n    },\n    methods: {\n        handleClick() {\n            this.getTwo();\n        },\n        changeDate() {\n            const now = new Date().getTime();\n            this.data.forEach((item, index) => {\n                const date = new Date(now - (6 - index) * 86400000);\n                item.name = `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n            });\n        },\n        async getPerformance() {\n            const { data: data } = await this.$http.get('/system_status/performance/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取当前系统性能失败！' + '错误原因：' + data.msg);\n            }\n            this.systemStatusData.CPUStatus = parseInt(data.data.cpu);\n            this.systemStatusData.memoryStatus = parseInt(data.data.memory);\n        },\n        async getOnlineUser() {\n            const { data: data } = await this.$http.get('/system_status/online_user/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取在线人数失败！');\n            }\n            this.OnlineUsersNum = data.data.online_user;\n        },\n        async getRunningTask() {\n            const { data: data } = await this.$http.get('/system_status/running_task/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取正在运行各生成任务失败！' + '错误原因：' + data.msg);\n            }\n            this.RunningTask = data.data;\n            this.RunningTask_name = Object.keys(this.RunningTask);\n            this.RunningTask_num = Object.values(this.RunningTask);\n            let rf = [];\n            for (var i = 0; i < this.RunningTask_name.length; i++) {\n                var x = {};\n                x.name = this.RunningTask_name[i];\n                x.num = this.RunningTask_num[i];\n                rf.push(x);\n            }\n            this.RunningTask_final = rf;\n        },\n        getECharts() {\n            this.getTwo();\n        },\n        async getTwo() {\n            const { data: data } = await this.$http.get('log/recent_fifteen_days/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg);\n            }\n            this.logData = data.data;\n\n            this.showData();\n        },\n        showData() {\n            console.log('showData1');\n            this.dates = [];\n            this.methods = [];\n            this.datas_ran = [];\n            this.datas_finish = [];\n            this.datas_generate = [];\n            this.temp_series_ran = [];\n            this.temp_series_finish = [];\n            this.temp_series_generate = [];\n            var flag = true;\n            for (var date in this.logData) {\n                this.dates.push(date);\n                for (var method in this.logData[date]) {\n                    if (flag) {\n                        this.methods.push(method);\n                    }\n                }\n                flag = false;\n            }\n            console.log('showData2');\n            for (var method in this.methods) {\n                var temp_ran = [];\n                var temp_finish = [];\n                var temp_generate = [];\n                for (var date in this.dates) {\n                    temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n                    temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n                    temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n                }\n                this.datas_ran.push(temp_ran);\n                this.datas_finish.push(temp_finish);\n                this.datas_generate.push(temp_generate);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_ran[i].reverse();\n                this.temp_series_ran.push(getone);\n            }\n            // console.log('this.temp_series_ran:', this.temp_series_ran);\n            // this.temp_series_ran.reverse();\n            // console.log('this.temp_series_ran:', this.temp_series_ran);\n            console.log('showData3');\n            if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n                this.myChart.dispose();\n            }\n            var temp_data_ran = [];\n            temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n            console.log('temp_data_ran:', temp_data_ran);\n            this.myChart = echarts.init(document.getElementById('main1'));\n            console.log('showData4');\n            var option = {\n                title: {\n                    text: 'Running Tasks',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates.reverse()\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_ran\n            };\n            console.log('showData5');\n            console.log('option:', option);\n            console.log('typeof option:', typeof option);\n            if (option && typeof option === 'object') {\n                console.log('update main1');\n                this.myChart.setOption(option, true);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_finish[i].reverse();\n                this.temp_series_finish.push(getone);\n            }\n            var temp_data_finish = [];\n            temp_data_finish.push(this.temp_series_finish[0], this.temp_series_finish[1], this.temp_series_finish[2]);\n            if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n                this.myChart2.dispose();\n            }\n            this.myChart2 = echarts.init(document.getElementById('main2'));\n            var option2 = {\n                title: {\n                    text: 'Completed Tasks',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_finish\n            };\n            console.log('option2:', option2);\n            console.log('typeof option2:', typeof option2);\n            if (option2 && typeof option2 === 'object') {\n                console.log('update main2');\n                this.myChart2.setOption(option2, true);\n            }\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_generate[i].reverse();\n                this.temp_series_generate.push(getone);\n            }\n            var temp_data_generate = [];\n            temp_data_generate.push(this.temp_series_generate[0], this.temp_series_generate[1], this.temp_series_generate[2]);\n\n            if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n                this.myChart3.dispose();\n            }\n            this.myChart3 = echarts.init(document.getElementById('main3'));\n            var option3 = {\n                title: {\n                    text: 'Generated Data',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_generate\n            };\n            console.log('option3:', option3);\n            console.log('typeof option3:', typeof option3);\n            if (option3 && typeof option3 === 'object') {\n                console.log('update main3');\n                this.myChart3.setOption(option3, true);\n            }\n        }\n        // showData() {\n        //     this.dates = [];\n        //     this.methods = [];\n        //     this.datas_ran = [];\n        //     this.datas_finish = [];\n        //     this.datas_generate = [];\n        //     this.temp_series_ran = [];\n        //     this.temp_series_finish = [];\n        //     this.temp_series_generate = [];\n        //     var flag = true;\n        //     for (var date in this.logData) {\n        //         this.dates.push(date);\n        //         for (var method in this.logData[date]) {\n        //             if (flag) {\n        //                 this.methods.push(method);\n        //             }\n        //         }\n        //         flag = false;\n        //     }\n\n        //     for (var method in this.methods) {\n        //         var temp_ran = [];\n        //         var temp_finish = [];\n        //         var temp_generate = [];\n        //         for (var date in this.dates) {\n        //             temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n        //             temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n        //             temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n        //         }\n        //         this.datas_ran.push(temp_ran);\n        //         this.datas_finish.push(temp_finish);\n        //         this.datas_generate.push(temp_generate);\n        //     }\n\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_ran[i].reverse();\n        //         this.temp_series_ran.push(getone);\n        //     }\n        //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n        //     // this.temp_series_ran.reverse();\n        //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n\n        //     if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n        //         this.myChart.dispose();\n        //     }\n        //     this.myChart = echarts.init(document.getElementById('main1'));\n        //     var option = {\n        //         title: {\n        //             text: '运行任务数监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '10%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates.reverse()\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_ran\n        //     };\n        //     if (option && typeof option === 'object') {\n        //         this.myChart.setOption(option, true);\n        //     }\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_finish[i].reverse();\n        //         this.temp_series_finish.push(getone);\n        //     }\n        //     if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n        //         this.myChart2.dispose();\n        //     }\n        //     this.myChart2 = echarts.init(document.getElementById('main2'));\n        //     var option2 = {\n        //         title: {\n        //             text: '完成任务数监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '8%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_finish\n        //     };\n        //     if (option2 && typeof option2 === 'object') {\n        //         this.myChart2.setOption(option2, true);\n        //     }\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_generate[i].reverse();\n        //         this.temp_series_generate.push(getone);\n        //     }\n        //     if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n        //         this.myChart3.dispose();\n        //     }\n        //     this.myChart3 = echarts.init(document.getElementById('main3'));\n        //     var option3 = {\n        //         title: {\n        //             text: '生成数据量监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '8%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_generate\n        //     };\n        //     if (option3 && typeof option3 === 'object') {\n        //         this.myChart3.setOption(option3, true);\n        //     }\n        // }\n    }\n};\n</script>\n\n<style scoped>\n.el-card {\n    border-radius: 3%;\n}\n.el-row {\n    margin-bottom: 20px;\n}\n.grid-content {\n    display: flex;\n    align-items: center;\n    height: 70px;\n}\n.grid-cont-right {\n    flex: 1;\n    text-align: center;\n    font-size: 14px;\n    color: #999;\n}\n.grid-num {\n    font-size: 30px;\n    font-weight: bold;\n}\n.grid-con-icon {\n    font-size: 50px;\n    width: 70px;\n    height: 100px;\n    text-align: center;\n    line-height: 100px;\n    color: #fff;\n}\n.grid-con-1 .grid-con-icon {\n    background: rgb(45, 140, 240);\n}\n.grid-con-1 .grid-num {\n    color: rgb(45, 140, 240);\n}\n.grid-con-2 .grid-con-icon {\n    background: rgb(100, 213, 114);\n}\n.grid-con-2 .grid-num {\n    color: rgb(100, 213, 114);\n}\n.grid-con-3 .grid-con-icon {\n    background: #e6a23c;\n}\n.grid-con-3 .grid-num {\n    color: #e6a23c;\n}\n.grid-con-4 .grid-con-icon {\n    background: #f56c6c;\n}\n.grid-con-4 .grid-num {\n    color: #f56c6c;\n}\n.user-info {\n    display: flex;\n    align-items: center;\n    padding-bottom: 10px;\n    border-bottom: 2px solid #ccc;\n    margin-bottom: 10px;\n}\n.user-avator {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n}\n.user-info-cont {\n    padding-left: 50px;\n    flex: 1;\n    font-size: 14px;\n    color: #999;\n}\n.user-info-cont div:first-child {\n    font-size: 30px;\n    color: #222;\n}\n.user-info-list {\n    font-size: 14px;\n    color: #999;\n    line-height: 25px;\n}\n.user-info-list span {\n    margin-left: 25px;\n}\n.mgb20 {\n    margin-bottom: 20px;\n}\n.todo-item {\n    font-size: 14px;\n}\n.todo-item-del {\n    text-decoration: line-through;\n    color: #999;\n}\n.schart {\n    width: 100%;\n    height: 300px;\n}\n.el-card__header1 {\n    padding: 0px 10px 10px 10px !important;\n    border-bottom: 1px solid #ebeef5;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n.el-card__body1 {\n    padding: 10px !important;\n}\n.el-card__body2 {\n    padding-top: 10px;\n}\n.body3 {\n    padding-top: 0 !important;\n}\n.el-button--info.is-plain {\n    border-color: #f4f4f5 !important;\n}\n.el-button [class*='el-icon-'] + span {\n    margin-left: 0 !important;\n}\n.el-carousel__item h3 {\n    color: #475669;\n    font-size: 14px;\n    opacity: 0.75;\n    line-height: 150px;\n    margin: 0;\n}\n/* .el-carousel__item:nth-child(2n) {\n    background-color: #99a9bf;\n}\n.el-carousel__item:nth-child(2n + 1) {\n    background-color: #d3dce6;\n} */\n.lidarPic {\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    margin-left: 8px;\n}\n.table-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: 35px;\n    background: #f4f4f5;\n    width: 100%;\n    height: 100px;\n    border-radius: 4px;\n}\n.table-icon:hover {\n    background: lightgrey;\n}\na {\n    color: rgb(83, 83, 83);\n    text-decoration: none;\n}\n</style>\n"]}]}