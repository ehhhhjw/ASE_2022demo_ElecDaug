{"remainingRequest":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\echarts_carousel.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\echarts_carousel.vue","mtime":1636382470019},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Schart from 'vue-schart';\nimport bus from '../common/bus';\nimport * as echarts from 'echarts';\nexport default {\n    name: 'dashboard',\n    data() {\n        return {\n            activeName: 'first',\n            selfstyle: {\n                'margin-left': '0px !important',\n                fontSize: '35px',\n                width: '100%',\n                height: '100px'\n            },\n            tableButtonData: [\n                {\n                    action: '获取设置'\n                }\n            ],\n            tableData: [],\n            name: sessionStorage.getItem('ms_username'),\n            data: [],\n            systemStatusData: {\n                CPUStatus: -1,\n                GPUStatus: -1,\n                memoryStatus: -1\n            },\n            StructuredDataNum: 1,\n            TextDataNum: 36,\n            EmergencyDataNum: 0,\n            OnlineUsersNum: 0,\n            ConversionRate: 0,\n            PassRate: 0,\n            RunningTask: {},\n            RunningTask_name: [],\n            RunningTask_num: [],\n            RunningTask_final: [],\n            i: 0,\n            logShow_new_two: [],\n            dates: [],\n            methods: [],\n            datas_ran: [],\n            datas_finish: [],\n            datas_generate: [],\n            tmep_series_ran: [],\n            tmep_series_finish: [],\n            tmep_series_generate: [],\n            myChart: null,\n            myChart2: null,\n            myChart3: null\n        };\n    },\n    destroyed() {\n        clearInterval(this.timer);\n    },\n    created() {\n        this.getECharts();\n    },\n    mounted() {\n        this.getECharts();\n        this.timer = setInterval(() => {\n            this.getECharts();\n        }, 1000 * 60);\n    },\n    methods: {\n        handleClick() {\n            this.getTwo();\n        },\n        getECharts() {\n            console.log('getECharts');\n            this.getTwo();\n        },\n        async getTwo() {\n            console.log('getTwo');\n            const { data: data } = await this.$http.get('log/recent_fifteen_days/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg);\n            }\n            this.logData = data.data;\n\n            this.showData();\n        },\n        showData() {\n            console.log('showData');\n            this.dates = [];\n            this.methods = [];\n            this.datas_ran = [];\n            this.datas_finish = [];\n            this.datas_generate = [];\n            this.tmep_series_ran = [];\n            this.tmep_series_finish = [];\n            this.tmep_series_generate = [];\n            var flag = true;\n            for (var date in this.logData) {\n                this.dates.push(date);\n                for (var method in this.logData[date]) {\n                    if (flag) {\n                        this.methods.push(method);\n                    }\n                }\n                flag = false;\n            }\n\n            for (var method in this.methods) {\n                var temp_ran = [];\n                var temp_finish = [];\n                var temp_generate = [];\n                for (var date in this.dates) {\n                    temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n                    temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n                    temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n                }\n                this.datas_ran.push(temp_ran);\n                this.datas_finish.push(temp_finish);\n                this.datas_generate.push(temp_generate);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_ran[i].reverse();\n                this.tmep_series_ran.push(getone);\n            }\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n            // this.tmep_series_ran.reverse();\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n\n            if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n                this.myChart.dispose();\n            }\n            var temp_data_ran = [];\n            temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n            console.log('temp_data_ran:', temp_data_ran);\n            this.myChart = echarts.init(document.getElementById('main1'));\n            var option = {\n                title: {\n                    text: '运行任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates.reverse()\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_ran\n            };\n            console.log('option:', option);\n            console.log('typeof option:', typeof option);\n            if (option && typeof option === 'object') {\n                console.log('update main1');\n                this.myChart.setOption(option, true);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_finish[i].reverse();\n                this.tmep_series_finish.push(getone);\n            }\n            if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n                this.myChart2.dispose();\n            }\n            this.myChart2 = echarts.init(document.getElementById('main2'));\n            var option2 = {\n                title: {\n                    text: '完成任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_finish\n            };\n            console.log('option2:', option2);\n            console.log('typeof option2:', typeof option2);\n            if (option2 && typeof option2 === 'object') {\n                console.log('update main2');\n                this.myChart2.setOption(option2, true);\n            }\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_generate[i].reverse();\n                this.tmep_series_generate.push(getone);\n            }\n            if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n                this.myChart3.dispose();\n            }\n            this.myChart3 = echarts.init(document.getElementById('main3'));\n            var option3 = {\n                title: {\n                    text: '生成数据量监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_generate\n            };\n            console.log('option3:', option3);\n            console.log('typeof option3:', typeof option3);\n            if (option3 && typeof option3 === 'object') {\n                console.log('update main3');\n                this.myChart3.setOption(option3, true);\n            }\n        }\n    }\n};\n",{"version":3,"sources":["echarts_carousel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"echarts_carousel.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div class=\"block\">\n        <!-- <span class=\"demonstration\">Click 指示器触发</span> -->\n        <el-carousel trigger=\"click\" height=\"400px\">\n            <el-carousel-item v-for=\"item in 3\" :key=\"item\">\n                <div v-if=\"item == 1\" id=\"main1\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                <div v-if=\"item == 2\" id=\"main2\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                <div v-if=\"item == 3\" id=\"main3\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n            </el-carousel-item>\n        </el-carousel>\n    </div>\n</template>\n\n<script>\nimport Schart from 'vue-schart';\nimport bus from '../common/bus';\nimport * as echarts from 'echarts';\nexport default {\n    name: 'dashboard',\n    data() {\n        return {\n            activeName: 'first',\n            selfstyle: {\n                'margin-left': '0px !important',\n                fontSize: '35px',\n                width: '100%',\n                height: '100px'\n            },\n            tableButtonData: [\n                {\n                    action: '获取设置'\n                }\n            ],\n            tableData: [],\n            name: sessionStorage.getItem('ms_username'),\n            data: [],\n            systemStatusData: {\n                CPUStatus: -1,\n                GPUStatus: -1,\n                memoryStatus: -1\n            },\n            StructuredDataNum: 1,\n            TextDataNum: 36,\n            EmergencyDataNum: 0,\n            OnlineUsersNum: 0,\n            ConversionRate: 0,\n            PassRate: 0,\n            RunningTask: {},\n            RunningTask_name: [],\n            RunningTask_num: [],\n            RunningTask_final: [],\n            i: 0,\n            logShow_new_two: [],\n            dates: [],\n            methods: [],\n            datas_ran: [],\n            datas_finish: [],\n            datas_generate: [],\n            tmep_series_ran: [],\n            tmep_series_finish: [],\n            tmep_series_generate: [],\n            myChart: null,\n            myChart2: null,\n            myChart3: null\n        };\n    },\n    destroyed() {\n        clearInterval(this.timer);\n    },\n    created() {\n        this.getECharts();\n    },\n    mounted() {\n        this.getECharts();\n        this.timer = setInterval(() => {\n            this.getECharts();\n        }, 1000 * 60);\n    },\n    methods: {\n        handleClick() {\n            this.getTwo();\n        },\n        getECharts() {\n            console.log('getECharts');\n            this.getTwo();\n        },\n        async getTwo() {\n            console.log('getTwo');\n            const { data: data } = await this.$http.get('log/recent_fifteen_days/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg);\n            }\n            this.logData = data.data;\n\n            this.showData();\n        },\n        showData() {\n            console.log('showData');\n            this.dates = [];\n            this.methods = [];\n            this.datas_ran = [];\n            this.datas_finish = [];\n            this.datas_generate = [];\n            this.tmep_series_ran = [];\n            this.tmep_series_finish = [];\n            this.tmep_series_generate = [];\n            var flag = true;\n            for (var date in this.logData) {\n                this.dates.push(date);\n                for (var method in this.logData[date]) {\n                    if (flag) {\n                        this.methods.push(method);\n                    }\n                }\n                flag = false;\n            }\n\n            for (var method in this.methods) {\n                var temp_ran = [];\n                var temp_finish = [];\n                var temp_generate = [];\n                for (var date in this.dates) {\n                    temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n                    temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n                    temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n                }\n                this.datas_ran.push(temp_ran);\n                this.datas_finish.push(temp_finish);\n                this.datas_generate.push(temp_generate);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_ran[i].reverse();\n                this.tmep_series_ran.push(getone);\n            }\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n            // this.tmep_series_ran.reverse();\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n\n            if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n                this.myChart.dispose();\n            }\n            var temp_data_ran = [];\n            temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n            console.log('temp_data_ran:', temp_data_ran);\n            this.myChart = echarts.init(document.getElementById('main1'));\n            var option = {\n                title: {\n                    text: '运行任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates.reverse()\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_ran\n            };\n            console.log('option:', option);\n            console.log('typeof option:', typeof option);\n            if (option && typeof option === 'object') {\n                console.log('update main1');\n                this.myChart.setOption(option, true);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_finish[i].reverse();\n                this.tmep_series_finish.push(getone);\n            }\n            if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n                this.myChart2.dispose();\n            }\n            this.myChart2 = echarts.init(document.getElementById('main2'));\n            var option2 = {\n                title: {\n                    text: '完成任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_finish\n            };\n            console.log('option2:', option2);\n            console.log('typeof option2:', typeof option2);\n            if (option2 && typeof option2 === 'object') {\n                console.log('update main2');\n                this.myChart2.setOption(option2, true);\n            }\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_generate[i].reverse();\n                this.tmep_series_generate.push(getone);\n            }\n            if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n                this.myChart3.dispose();\n            }\n            this.myChart3 = echarts.init(document.getElementById('main3'));\n            var option3 = {\n                title: {\n                    text: '生成数据量监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_generate\n            };\n            console.log('option3:', option3);\n            console.log('typeof option3:', typeof option3);\n            if (option3 && typeof option3 === 'object') {\n                console.log('update main3');\n                this.myChart3.setOption(option3, true);\n            }\n        }\n    }\n};\n</script>\n\n<style></style>\n"]}]}