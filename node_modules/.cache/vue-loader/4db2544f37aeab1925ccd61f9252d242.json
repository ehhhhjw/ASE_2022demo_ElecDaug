{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskList.vue","mtime":1636388062000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nimport qs from 'qs';\nimport fileDownload from 'js-file-download';\nimport JSZip from 'jszip';\nimport vTable from './Table.vue';\nexport default {\n    data() {\n        const isNotNag_int = (rule, value, callback) => {\n            const boolean = new RegExp('^[1-9][0-9]*$').test(value);\n\n            if (value !== '0' && !boolean) {\n                callback(new Error('请输入非负整数'));\n            } else {\n                callback();\n            }\n        };\n        const generate_per_file_and_paramsRule = (rule, value, callback) => {\n            if (value < 1) {\n                callback(new Error('只能为大于等于1整数'));\n            } else {\n                callback();\n            }\n        };\n        const isNum = (rule, value, callback) => {\n            const age = /^[0-9]*$/;\n            if (!age.test(value)) {\n                callback(new Error('只能为非负数字'));\n            } else {\n                callback();\n            }\n        };\n        const isNotNag = (rule, value, callback) => {\n            if (value < 0) {\n                callback(new Error('只能为非负数'));\n            } else {\n                callback();\n            }\n        };\n        const epsilonRule = (rule, value, callback) => {\n            value = value.replace('[', '');\n            value = value.replace(']', '');\n            value = value.replace('，', ',');\n\n            var list = value.split(',');\n            for (var i in list) {\n                if (!typeof parseFloat(list[i]) === 'number' && !isNaN(parseFloat(list[i])) && parseFloat(list[i]) < 0) {\n                    callback(new Error('请填写合理的非负数字列表'));\n                } else {\n                    callback();\n                }\n            }\n        };\n        return {\n            mark_group: {\n                marks1_2: {\n                    1: '1',\n                    2: {\n                        style: {\n                            width: '10px'\n                        },\n                        label: '2'\n                    }\n                },\n                marks0001_2: {\n                    0.001: '0.001',\n                    2: {\n                        style: {\n                            width: '10px'\n                        },\n                        label: '2'\n                    }\n                },\n                marks0001_1: {\n                    0.001: '0.001',\n                    1: {\n                        style: {\n                            width: '10px'\n                        },\n                        label: '1'\n                    }\n                },\n                marks1_100: {\n                    1: '1',\n                    100: {\n                        style: {\n                            width: '30px'\n                        },\n                        label: '100'\n                    }\n                },\n                marks1_1000: {\n                    1: '1',\n                    1000: {\n                        style: {\n                            width: '40px'\n                        },\n                        label: '1000'\n                    }\n                },\n                marks1_15000: {\n                    1: '1',\n                    15000: {\n                        style: {\n                            width: '50px'\n                        },\n                        label: '15000'\n                    }\n                },\n                marks0_5: {\n                    0: '0',\n                    5: {\n                        style: {\n                            width: '10px'\n                        },\n                        label: '5'\n                    }\n                },\n                marks1_5: {\n                    1: '1',\n                    5: {\n                        style: {\n                            width: '10px'\n                        },\n                        label: '5'\n                    }\n                }\n            },\n            full_loading_flag: false,\n            generate_func_self: '',\n            generate_func_all: '',\n            generate_func_list: [],\n            queryInfo_Self: {\n                page: 1\n            },\n            taskList_Self: [],\n            total_Self: 0,\n            formInline_Self: {\n                searchType: '',\n                searchTaskInfo: ''\n            },\n            editDialogSelfVisible: false,\n            editForm_Self: {\n                task_id: 0,\n                master: this.$store.getters.userId,\n                name: '',\n                params: '',\n                file: {},\n                augmentation_method_name: ''\n            },\n            editFormSelfRules: {\n                name: [{ required: true, message: '请输入任务名', trigger: 'blur' }]\n            },\n            queryInfo_All: {\n                page: 1\n            },\n            taskList_All: [],\n            total_All: 0,\n            formInline_All: {\n                searchType: '',\n                searchTaskInfo: ''\n            },\n            editDialogAllVisible: false,\n            editForm_All: {},\n            editFormAllRules: {\n                name: [{ required: true, message: '请输入任务名', trigger: 'blur' }]\n            },\n            FuzzySearch: 1,\n            activeName: 'self',\n            taskList_All: [],\n            userRight: '',\n            methodDialogSelfVisible: false,\n            methodDetail: [],\n            mohu: true,\n            fileName: '',\n            preview_value: [],\n            preview_options: [],\n            previewDialogVisible: false,\n            loading: true,\n            original_files_zip: null,\n            generate_files_zip: null,\n            originalPointCloudData: [],\n            generatePointCloudData: [],\n            maxAxisValue: -10000,\n            minAxisValue: 10000,\n            original_is_Zip: false,\n            generate_is_Zip: false,\n            original_fileContent: '',\n            generate_fileContent: '',\n            original_blob: null,\n            generate_blob: null,\n            test_text: 'djshdkjdhkadh',\n            change_axios_buttom: false,\n            editForm: {},\n            rules1: {\n                augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n                epsilon: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: epsilonRule, trigger: 'blur' }\n                ],\n                generate_per_file_and_params: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n                    { validator: isNum, trigger: 'blur' }\n                ],\n                urgency_level: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag_int, trigger: 'blur' }\n                ]\n            },\n            rules2: {\n                augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n                ite_epsilon: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag, trigger: 'blur' }\n                ],\n                ite_limit: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNum, trigger: 'blur' }\n                ],\n                generate_per_file: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n                    { validator: isNum, trigger: 'blur' }\n                ],\n                urgency_level: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag_int, trigger: 'blur' }\n                ]\n            },\n            rules3: {\n                augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n                ite_epsilon: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag, trigger: 'blur' }\n                ],\n                ite_limit: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNum, trigger: 'blur' }\n                ],\n                generate_per_file: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n                    { validator: isNum, trigger: 'blur' }\n                ],\n                boundary_constraint: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag, trigger: 'blur' }\n                ],\n                urgency_level: [\n                    { required: true, message: '不能为空', trigger: 'blur' },\n                    { validator: isNotNag_int, trigger: 'blur' }\n                ]\n            },\n            picture: 'https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg'\n        };\n    },\n    components: {\n        vTable\n    },\n    computed: {\n        rulesList: function() {\n            if (this.editForm_Self.augmentation_method_name === 'FGSM') {\n                return this.rules1;\n            } else if (this.editForm_Self.augmentation_method_name === 'JSMA') {\n                return this.rules3;\n            } else {\n                return this.rules2;\n            }\n        }\n    },\n    created() {\n        this.userRight = window.sessionStorage.getItem('user_group_name');\n\n        this.getTaskList_Self();\n    },\n    async mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n        let data = await this.$http.get('/augmentation_method/?augmentation_type=1');\n        // ?id=1\n        console.log('data:', data);\n        this.generate_func_list = data.data.data;\n        console.log('this.generate_func_list:', this.generate_func_list);\n    },\n    methods: {\n        // >>>>>>>>>el-tab部分>>>>>>>>>>>>>>>.\n        handleClick(tab, event) {\n            if (tab.index === '1') {\n                this.getTaskList_All();\n            }\n        },\n        // >>>>>>>>>>>>>获取任务列表以及查询部分>>>>>>>>>>>>>>>\n        // 获取子组件getList指令\n        handleSelectClear() {\n            this.getTaskList_Self();\n            this.generate_func_self = '';\n        },\n        handleGetList(data) {\n            if (!data) {\n                this.getTaskList_Self();\n            } else {\n                this.getTaskList_All();\n            }\n        },\n        async getTaskList_Self() {\n            // const { data: data } = await this.$http.get('/task/self/search/' + '?page=' + this.queryInfo_Self.page);\n            const { data: data } = await this.$http.get(\n                '/task/augmentation_type/search/?augmentation_type=1&page=' + this.queryInfo_Self.page\n            );\n\n            if (data.code !== 20000) {\n                if (data.code === 40400) {\n                    console.log('data:', data);\n                    this.taskList_Self = [];\n                    this.totalPageNum = 0;\n                    this.total_Self = 0;\n                    return this.$message.error('本用户未添加任务！');\n                }\n\n                return this.$message.error('获取本用户任务列表失败！');\n            }\n\n            this.taskList_Self = data.data.details;\n\n            this.totalPageNum = data.data.pages;\n            // if (this.queryInfo_Self.page > this.totalPageNum) {\n            //     this.queryInfo_Self.page = this.totalPageNum;\n            // }\n            console.log('this.taskList_Self:', this.taskList_Self);\n\n            this.total_Self = this.totalPageNum * 10;\n        },\n        async SearchTask_Self() {\n            if (this.formInline_Self.searchType === '') {\n                return this.$message.error('请输入查询方式！');\n            }\n            var flag = 0;\n            var search_params = '';\n            if (this.formInline_Self.searchType === '生成方法') {\n                // search_params = '/task/augmentation_method/search/?augmentation_method=' + this.formInline_Self.searchTaskInfo;\n                search_params =\n                    '/task/augmentation_method/search/?augmentation_method=' +\n                    this.generate_func_self +\n                    '&page=' +\n                    this.queryInfo_Self.page;\n                console.log('this.generate_func_self:', this.generate_func_self);\n                console.log('this.queryInfo_Self.page:', this.queryInfo_Self.page);\n            } else {\n                if (this.formInline_Self.searchTaskInfo === '') {\n                    return this.$message.error('请输入搜索内容！');\n                }\n\n                if (this.formInline_Self.searchType === '任务名称') {\n                    console.log('this.queryInfo_Self.page:', this.queryInfo_Self.page);\n                    search_params =\n                        '/task/name/search/?augmentation_type=1&task_name=' +\n                        this.formInline_Self.searchTaskInfo +\n                        '&search_type=' +\n                        this.FuzzySearch +\n                        '&page=' +\n                        this.queryInfo_Self.page;\n                } else {\n                    search_params =\n                        '/task/id/search/?augmentation_type=1&task_id=' +\n                        this.formInline_Self.searchTaskInfo +\n                        '&page=' +\n                        this.queryInfo_Self.page;\n                    //  +\n                    // '&search_type=' +\n                    // this.FuzzySearch;\n                }\n            }\n            const { data: data } = await this.$http.get(search_params);\n            console.log('data:', data);\n            if (data.code !== 20000) {\n                this.taskList_Self = [];\n                this.total_Self = 0;\n                return this.$message.error('未搜索到该任务！');\n            }\n            if (this.formInline_Self.searchType === '任务id') {\n                flag = 1;\n                this.taskList_Self = [];\n                this.taskList_Self.push(data.data);\n            } else {\n                this.taskList_Self = data.data.details;\n            }\n            console.log('data:', data);\n            // this.total_Self = this.taskList_Self ? this.taskList_Self.length : 0;\n            this.totalPageNum = data.data.pages;\n            // if (this.queryInfo_Self.page > this.totalPageNum) {\n            //     this.queryInfo_Self.page = this.totalPageNum;\n            // }\n            this.total_Self = this.totalPageNum * 10;\n            this.total_Self = this.total_Self === 10 ? this.taskList_Self.length : this.total_Self;\n            if (flag) {\n                this.total_Self = this.taskList_Self.length;\n            }\n        },\n        // 获取所有用户任务列表\n        async getTaskList_All() {\n            console.log('this.generate_func_all:', this.generate_func_all);\n            console.log('this.formInline_All.searchType:', this.formInline_All.searchType);\n            if (\n                this.formInline_All.searchType !== '生成方法' &&\n                (this.formInline_All.searchType === '' || this.formInline_All.searchTaskInfo === '')\n            ) {\n                // const { data: data } = await this.$http.get('task/all/admin/search/' + '?page=' + this.queryInfo_All.page);\n                const { data: data } = await this.$http.get(\n                    '/task/augmentation_type/admin/search/?augmentation_type=1&page=' + this.queryInfo_All.page\n                );\n                if (data.code == 40400) {\n                    console.log('data:', data);\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('所有用户都未添加任务！');\n                }\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取任务列表失败[所有用户]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n            } else if (this.formInline_All.searchType === '用户id') {\n                console.log('this.formInline_All.searchTaskInfo:', this.formInline_All.searchTaskInfo);\n                const { data: data } = await this.$http.get(\n                    '/task/augmentation_type/admin/search/' +\n                        '?augmentation_type=1&page=' +\n                        this.queryInfo_All.page +\n                        '&user_id=' +\n                        this.formInline_All.searchTaskInfo\n                );\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取任务列表失败[用户id]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n            } else if (this.formInline_All.searchType === '任务名称') {\n                const { data: data } = await this.$http.get(\n                    '/task/name/admin/search/' +\n                        '?augmentation_type=1&page=' +\n                        this.queryInfo_All.page +\n                        '&task_name=' +\n                        this.formInline_All.searchTaskInfo +\n                        '&search_type=' +\n                        this.FuzzySearch\n                );\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取查询列表失败[任务名称]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n            } else if (this.formInline_All.searchType === '任务id') {\n                const { data: data } = await this.$http.get(\n                    '/task/id/admin/search/' +\n                        '?augmentation_type=1&page=' +\n                        this.queryInfo_All.page +\n                        '&task_id=' +\n                        this.formInline_All.searchTaskInfo\n                );\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取查询列表失败[任务id]！' + '错误原因：' + data.msg);\n                }\n                console.log('data:', data);\n                console.log('this.taskList_All:', this.taskList_All);\n                this.taskList_Self = [];\n                this.taskList_Self.push(data.data.details);\n                this.totalPageNum = data.data.pages;\n                // this.total_All = this.taskList_All;\n                this.total_All = this.taskList_All.length;\n            } else if (this.formInline_All.searchType === '生成类型id') {\n                const { data: data } = await this.$http.get(\n                    '/task/augmentation_type/admin/search/' +\n                        '?page=' +\n                        this.queryInfo_All.page +\n                        '&augmentation_type=' +\n                        this.formInline_All.searchTaskInfo\n                );\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取查询列表失败[生成类型]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n            } else if (this.formInline_All.searchType == '生成方法') {\n                console.log('here,this.generate_func_all22222:', this.generate_func_all);\n                const { data: data } = await this.$http.get(\n                    '/task/augmentation_method/admin/search/' +\n                        '?page=' +\n                        this.queryInfo_All.page +\n                        '&augmentation_method=' +\n                        this.generate_func_all\n                );\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    console.log('data:', data);\n                    this.taskList_All = [];\n                    this.totalPageNum = 0;\n                    this.total_All = 0;\n                    return this.$message.error('获取查询列表失败[生成方法]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n            } else if (this.formInline_All.searchType === '用户名') {\n                console.log('username:', this.formInline_All.searchTaskInfo);\n                const { data: data } = await this.$http.get(\n                    '/task/master/admin/search/' +\n                        '?augmentation_type=1&page=' +\n                        this.queryInfo_All.page +\n                        '&username=' +\n                        this.formInline_All.searchTaskInfo +\n                        '&search_type=' +\n                        this.FuzzySearch\n                );\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    return this.$message.error('获取任务列表失败[用户名]！' + '错误原因：' + data.msg);\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                console.log('this.taskList_All:', this.taskList_All);\n                this.total_All = this.totalPageNum * 10;\n            }\n            // console.log('data:', data);\n        },\n        async generate_change(type) {\n            if (type == '本用户') {\n                let search_params = '/task/augmentation_method/search/?augmentation_method=' + this.generate_func_self;\n                console.log('this.generate_func_self:', this.generate_func_self);\n                const { data: data } = await this.$http.get(search_params);\n                if (data.code !== 20000) {\n                    this.taskList_Self = [];\n                    this.total_Self = 0;\n                    return this.$message.error('未搜索到该任务！');\n                }\n                console.log('data:', data);\n                this.taskList_Self = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_Self = this.totalPageNum * 10;\n                this.total_Self = this.total_Self === 10 ? this.taskList_Self.length : this.total_Self;\n                console.log('this.total_Self:', this.total_Self);\n                console.log('this.totalPageNum:', this.totalPageNum);\n            } else {\n                let search_params = '/task/augmentation_method/admin/search/?augmentation_method=' + this.generate_func_all;\n                const { data: data } = await this.$http.get(search_params);\n                if (data.code !== 20000) {\n                    this.taskList_All = [];\n                    this.total_All = 0;\n                    return this.$message.error('未搜索到该任务！');\n                }\n                this.taskList_All = data.data.details;\n                this.totalPageNum = data.data.pages;\n                this.total_All = this.totalPageNum * 10;\n                this.total_All = this.total_All ? this.taskList_All.length : 0;\n            }\n        },\n        // 是否启用模糊搜索\n        isFuzzySearch(flag) {\n            this.FuzzySearch = flag;\n            console.log('this.FuzzySearch:', this.FuzzySearch);\n        },\n        // 清空二级搜索框\n        clearSecondSelect_All() {\n            this.generate_func_all = '';\n            this.formInline_All.searchTaskInfo = '';\n        },\n        clearSecondSelect_Self() {\n            this.generate_func_self = '';\n            this.formInline_Self.searchTaskInfo = '';\n        },\n        // >>>>>>>>>>分页部分>>>>>>>>>>>>>>>>>>>\n        handleSizeChange_Self(newSize) {\n            this.queryInfo_Self.pagesize = newSize;\n            console.log('newSize-this.formInline_Self.searchType:', this.formInline_Self.searchType);\n            console.log('newSize-this.queryInfo_Self.page:', this.queryInfo_Self.page);\n            this.getTaskList_Self();\n        },\n        handleCurrentChange_Self(newPage) {\n            this.queryInfo_Self.page = newPage;\n            console.log('newPage-this.formInline_Self.searchType:', this.formInline_Self.searchType);\n            console.log('newPage-this.queryInfo_Self.page:', this.queryInfo_Self.page);\n\n            if (this.formInline_Self.searchTaskInfo === '' && this.generate_func_self === '') {\n                this.getTaskList_Self();\n            } else {\n                this.SearchTask_Self();\n            }\n        },\n        handleSizeChange_All(newSize) {\n            this.queryInfo_All.pagesize = newSize;\n            console.log('newSize-this.formInline_All.searchType:', this.formInline_All.searchType);\n            console.log('newSize-this.queryInfo_All.page:', this.queryInfo_All.page);\n            this.getTaskList_All();\n        },\n        handleCurrentChange_All(newPage) {\n            this.queryInfo_All.page = newPage;\n            console.log('newPage-this.formInline_All.searchType:', this.formInline_All.searchType);\n            console.log('newPage-this.queryInfo_All.page:', this.queryInfo_All.page);\n            this.getTaskList_All();\n            // if (this.formInline_All.searchTaskInfo === '' && this.generate_func_all === '') {\n            //     this.getTaskList_All();\n            // } else {\n            //     this.SearchTask_All();\n            // }\n            // this.queryInfo_All.page = newPage;\n            // this.getTaskList_All();\n        },\n        pageReflash_All() {\n            this.queryInfo_All.page = 1;\n        },\n        pageReflash_Self() {\n            this.queryInfo_Self.page = 1;\n        },\n        // >>>>>>>>>>>>>下载文件部分>>>>>>>>>>>>>>\n        originalfileDownloadTemp(data) {\n            var task_id = data['task_id'];\n            var flag = data['flag'];\n            this.originalfileDownload(task_id, flag);\n        },\n        async originalfileDownload(task_id, flag) {\n            const loading = this.full_loading_flag\n                ? ''\n                : this.$loading({\n                      lock: true,\n                      text: 'Loading',\n                      spinner: 'el-icon-loading',\n                      background: 'rgba(0, 0, 0, 0.7)'\n                  });\n            this.original_fileContent = '';\n            const data = await this.$http.get('/task/file/?task_id=' + task_id + '&file_type=0&format=json', {\n                responseType: 'blob',\n                headers: { 'Content-Type': 'application/json; application/octet-stream' }\n            });\n\n            console.log('data:', data);\n\n            var file_name1 = data.headers['content-disposition'].replaceAll('/', '\\\\').split('\\\\');\n            this.fileName = file_name1[file_name1.length - 1];\n            this.fileName = this.fileName.slice(0, this.fileName.length - 1);\n            var dot = this.fileName.lastIndexOf('.');\n            this.original_is_Zip = false;\n            if (dot !== -1 && this.fileName.substr(dot) === '.zip') {\n                this.original_is_Zip = true;\n            } else {\n                this.original_blob = data.data;\n            }\n            if (!this.full_loading_flag) {\n                loading.close();\n            }\n            if (!flag) {\n                fileDownload(data.data, this.fileName);\n            }\n            return data;\n        },\n        generatefileDownloadTemp(data) {\n            var task_id = data['task_id'];\n            var flag = data['flag'];\n            this.generatefileDownload(task_id, flag);\n        },\n        async generatefileDownload(task_id, flag) {\n            const loading = this.full_loading_flag\n                ? ''\n                : this.$loading({\n                      lock: true,\n                      text: 'Loading',\n                      spinner: 'el-icon-loading',\n                      background: 'rgba(0, 0, 0, 0.7)'\n                  });\n            const data = await this.$http.get('/task/file/?task_id=' + task_id + '&file_type=1&format=json', {\n                responseType: 'blob',\n                headers: { 'Content-Type': 'application/json; application/octet-stream' }\n            });\n            var file_name1 = data.headers['content-disposition'].replaceAll('/', '\\\\').split('\\\\');\n            this.fileName = file_name1[file_name1.length - 1];\n            this.fileName = this.fileName.slice(0, this.fileName.length - 1);\n\n            var dot = this.fileName.lastIndexOf('.');\n            this.generate_is_Zip = false;\n            if (dot !== -1 && this.fileName.substr(dot) === '.zip') {\n                this.generate_is_Zip = true;\n            } else {\n                this.generate_blob = data.data;\n            }\n            if (!this.full_loading_flag) {\n                loading.close();\n            }\n            if (!flag) {\n                fileDownload(data.data, this.fileName);\n            }\n            return data;\n        },\n        // >>>>>>>>>>>>操作按钮部分>>>>>>>>>>>>>\n        async removeTaskById(task_id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该任务, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            const { data: data } = await this.$http.delete('/task/?task_id=' + task_id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除任务失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除任务成功！');\n            if (this.activeName === 'self') {\n                this.queryInfo_Self.page = 1;\n                if (this.formInline_Self.searchTaskInfo === '' && this.generate_func_self === '') {\n                    this.getTaskList_Self();\n                } else {\n                    this.SearchTask_Self();\n                }\n            } else {\n                this.queryInfo_All.page = 1;\n                if (this.formInline_All.searchTaskInfo === '' && this.generate_func_all === '') {\n                    this.getTaskList_All();\n                } else {\n                    this.SearchTask_All();\n                }\n            }\n        },\n        resetForm(formName) {\n            console.log('formName:', formName);\n            this.editForm_Self.epsilon = [\n                {\n                    value: 0\n                }\n            ];\n        },\n        removeDomain(item) {\n            if (this.editForm_Self.epsilon.length == 1) {\n                this.$message.error('扰动幅度不可为空!');\n            } else {\n                var item_index = this.editForm_Self.epsilon.indexOf(item);\n                if (item_index !== -1) {\n                    this.editForm_Self.epsilon.splice(item_index, 1);\n                }\n            }\n        },\n        addDomain() {\n            this.editForm_Self.epsilon.push({\n                value: 0,\n                key: Date.now()\n            });\n        },\n        async showEditDialog(row) {\n            this.editForm_Self = JSON.parse(JSON.stringify(row));\n            console.log('this.editForm_Self:', this.editForm_Self);\n            this.editForm_Self.params = JSON.parse(row.params);\n            for (var i in this.editForm_Self.params) {\n                this.$set(this.editForm_Self, i, this.editForm_Self.params[i]);\n            }\n            this.editForm_Self.urgency_level = this.editForm_Self.urgency_level;\n            if (this.editForm_Self.augmentation_method_name === 'FGSM-激光雷达') {\n                this.editForm_Self.generate_per_file_and_params = parseInt(this.editForm_Self.generate_per_file_and_params);\n            } else if (\n                this.editForm_Self.augmentation_method_name === 'I-FGSM(BIM)-激光雷达' ||\n                this.editForm_Self.augmentation_method_name === 'JSMA-激光雷达'\n            ) {\n                this.editForm_Self.generate_per_file = parseInt(this.editForm_Self.generate_per_file);\n                this.editForm_Self.ite_epsilon = parseFloat(this.editForm_Self.ite_epsilon);\n                this.editForm_Self.boundary_constraint = parseFloat(this.editForm_Self.boundary_constraint);\n                this.editForm_Self.ite_limit = parseInt(this.editForm_Self.ite_limit);\n            }\n\n            this.editForm_Self.whether_to_rotate = this.editForm_Self.whether_to_rotate === '1' ? true : false;\n            this.editForm_Self.strict_mode = this.editForm_Self.strict_mode === '1' ? true : false;\n\n            if (this.editForm_Self.augmentation_method_name === 'FGSM-激光雷达') {\n                console.log('this.editForm_Self.epsilon:', this.editForm_Self.epsilon);\n                var temp_array = this.editForm_Self.epsilon\n                    .replace('[', '')\n                    .replace(']', '')\n                    .split(',');\n                console.log('temp_array:', temp_array);\n                var temp = [];\n                for (var i in temp_array) {\n                    var temp_item = {};\n                    temp_item.value = parseFloat(temp_array[i]);\n                    temp.push(temp_item);\n                }\n                console.log('temp:', temp);\n                this.editForm_Self.epsilon = temp;\n                // this.editForm_Self.epsilon = this.editForm_Self.epsilon;\n            }\n\n            this.editDialogSelfVisible = true;\n        },\n        editDialogClosed() {\n            this.editForm_Self = {\n                task_id: 0,\n                master: this.$store.getters.userId,\n                name: '',\n                params: '',\n                file: {},\n                augmentation_method_name: ''\n            };\n        },\n        async editTaskInfo() {\n            this.editForm_Self.master = this.$store.state.userId;\n            // if (this.editForm_Self.epsilon) {\n            //     this.editForm_Self.epsilon = this.editForm_Self.epsilon.replace('，', ',');\n            // }\n\n            var adddata = new FormData();\n            adddata.append('task_id', this.editForm_Self.id);\n            adddata.append('name', this.editForm_Self.name);\n            adddata.append('master', this.editForm_Self.master);\n\n            adddata.append('urgency_level', this.editForm_Self.urgency_level + '');\n            var temp_params = {};\n\n            if (this.editForm_Self.augmentation_method_name === 'FGSM-激光雷达') {\n                console.log('here');\n                var temp = [];\n                for (var x in this.editForm_Self.epsilon) {\n                    console.log('this.editForm_Self.epsilon[x][\"value\"]:', this.editForm_Self.epsilon[x]['value']);\n                    temp.push(this.editForm_Self.epsilon[x]['value']);\n                }\n                temp_params.epsilon = '[' + temp.toString() + ']';\n                console.log('temp_params.epsilon:', temp_params.epsilon);\n                temp_params = {\n                    epsilon: temp_params.epsilon,\n                    whether_to_rotate: this.editForm_Self.whether_to_rotate,\n                    generate_per_file_and_params: this.editForm_Self.generate_per_file_and_params + '',\n                    strict_mode: this.editForm_Selfstrict_mode\n                };\n            } else if (this.editForm_Self.augmentation_method_name === 'I-FGSM(BIM)-激光雷达') {\n                temp_params = {\n                    ite_epsilon: this.editForm_Self.ite_epsilon + '',\n                    ite_limit: this.editForm_Self.ite_limit + '',\n                    whether_to_rotate: this.editForm_Self.whether_to_rotate,\n                    generate_per_file: this.editForm_Self.generate_per_file + '',\n                    strict_mode: this.editForm_Self.strict_mode\n                };\n            } else if (this.editForm_Self.augmentation_method_name === 'JSMA-激光雷达') {\n                temp_params = {\n                    ite_epsilon: this.editForm_Self.ite_epsilon + '',\n                    ite_limit: this.editForm_Self.ite_limit + '',\n                    whether_to_rotate: this.editForm_Self.whether_to_rotate,\n                    generate_per_file: this.editForm_Self.generate_per_file + '',\n                    boundary_constraint: this.editForm_Self.boundary_constraint + '',\n                    strict_mode: this.editForm_Self.strict_mode\n                };\n            }\n            temp_params.whether_to_rotate = this.editForm_Self.whether_to_rotate ? '1' : '0';\n            temp_params.strict_mode = this.editForm_Self.strict_mode ? '1' : '0';\n\n            temp_params = JSON.stringify(temp_params);\n\n            adddata.append('params', temp_params);\n            this.editForm_Self.file = document.getElementById('filetemp').files[0];\n            if (this.editForm_Self.file) {\n                adddata.append('file', this.editForm_Self.file);\n            }\n            for (var [a, b] of adddata.entries()) {\n                console.log(a, b);\n            }\n            const { data: data } = await this.$http({\n                url: '/task/',\n                data: adddata,\n                method: 'put'\n            });\n            if (data.code !== 20000) {\n                return this.$message.error('修改任务失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('修改任务成功！');\n            this.editDialogSelfVisible = false;\n            this.$refs.editFormRef.resetFields();\n            this.editForm_Self.augmentation_type = '';\n            this.editForm_Self.augmentation_method = '';\n            this.editForm_Self.file = {};\n            this.getTaskList_Self();\n            this.getTaskList_All();\n        },\n        async getdata(reader, self) {\n            return (reader.onload = await function() {\n                self.fileContent = this.result;\n            });\n        },\n        // 标记任务异常\n        taskException() {\n            this.$confirm('是否确定将该任务标记成异常状态？')\n                .then(async _ => {\n                    var adddata = new FormData();\n                    adddata.append('task_id', this.methodDetail.id);\n                    const { data: data } = await this.$http({\n                        url: '/task/exception/',\n                        data: adddata,\n                        method: 'post'\n                    });\n                    if (data.code !== 20000) {\n                        return this.$message.error('添加生成任务失败！' + '错误原因：' + data.msg);\n                    }\n                    this.$message.success('标记成异常成功！');\n                    if (this.activeName === 'self') {\n                        if (this.formInline_Self.searchTaskInfo === '' && this.generate_func_self === '') {\n                            this.getTaskList_Self();\n                        } else {\n                            this.SearchTask_Self();\n                        }\n                    } else {\n                        if (this.formInline_All.searchTaskInfo === '' && this.generate_func_all === '') {\n                            this.getTaskList_All();\n                        } else {\n                            this.SearchTask_All();\n                        }\n                    }\n                })\n                .catch(_ => {});\n        },\n        //任务详情对话框\n        async MethodDetail(id) {\n            // id = data\n            console.log('this.methodDetail:', this.methodDetail);\n            this.methodDialogSelfVisible = true;\n            const { data: data } = await this.$http.get('/task/' + '?task_id=' + id);\n            console.log('data:', data);\n            if (data.code !== 20000) {\n                return this.$message.error('获取本用户任务详情失败！' + '错误原因：' + data.msg);\n            }\n\n            this.methodDetail = data.data;\n        },\n        methodDialogClose() {\n            console.log('this.methodDetail:', this.methodDetail);\n            this.methodDetail = [];\n        },\n        // >>>>>>>>>>点云预览部分>>>>>>>>>>>>>>>\n        // point_cloud_preview-previewHandleChange-make_format_data-get_preview\n        async point_cloud_preview(task_id) {\n            this.full_loading_flag = true;\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            console.log('loading:', loading);\n            console.log('this.$loading.lock:', this.$loading.lock);\n            // this.previewDialogVisible = true;\n            var preview_options = [];\n            var original_res = await this.originalfileDownload(task_id, 1);\n\n            if (this.original_is_Zip) {\n                let original_files_zip = new window.File([original_res.data], this.fileName, { type: 'zip' });\n\n                let original_files = new JSZip();\n                var orignal_names = [];\n                this.original_files_zip = original_files_zip;\n                let me = this;\n                await original_files.loadAsync(this.original_files_zip).then(function(zip) {\n                    for (var i in original_files.files) {\n                        var temp_object = {};\n                        orignal_names.push(i);\n                        temp_object['value'] = i;\n                        temp_object['label'] = i;\n                        temp_object['children'] = [];\n                        preview_options.push(temp_object);\n                    }\n\n                    me.original_files_zip = original_files_zip;\n                });\n            } else {\n                var temp_object = {};\n                temp_object['value'] = this.fileName;\n                temp_object['label'] = this.fileName;\n                temp_object['children'] = [];\n                preview_options.push(temp_object);\n            }\n            var generate_res = await this.generatefileDownload(task_id, 1);\n            if (this.generate_is_Zip) {\n                let generate_files_zip = new window.File([generate_res.data], this.fileName, { type: 'zip' });\n                var generate_files = new JSZip();\n                var generate_names = [];\n                var original_is_Zip = this.original_is_Zip;\n                await generate_files.loadAsync(generate_files_zip).then(function(generate_files_zip) {\n                    for (var i in generate_files.files) {\n                        generate_names.push(i);\n                    }\n\n                    if (original_is_Zip) {\n                        for (var i in orignal_names) {\n                            for (var j in generate_names) {\n                                if (generate_names[j].search(orignal_names[i]) != -1) {\n                                    var temp_object = {};\n                                    temp_object['value'] = generate_names[j];\n                                    temp_object['label'] = generate_names[j];\n\n                                    preview_options[i].children.push(temp_object);\n                                }\n                            }\n                        }\n                    } else {\n                        for (var j in generate_names) {\n                            var temp_object = {};\n                            temp_object['value'] = generate_names[j];\n                            temp_object['label'] = generate_names[j];\n                            preview_options[0].children.push(temp_object);\n                        }\n                    }\n                });\n                this.generate_files_zip = generate_files_zip;\n            } else {\n                var temp_object = {};\n                temp_object['value'] = this.fileName;\n                temp_object['label'] = this.fileName;\n                preview_options[0].children.push(temp_object);\n            }\n            loading.close();\n            this.full_loading_flag = false;\n            this.previewDialogVisible = true;\n            this.$message.success('已获取文件列表，请选择需预览的文件！');\n            this.preview_options = preview_options;\n\n            this.loading = false;\n        },\n        make_format_data(points_name, pointscloud, flag) {\n            var format_data = null;\n            var dot = points_name.lastIndexOf('.');\n            if (dot === -1) {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                // format_data = pointscloud.split('\\r\\n');\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        if (arr.length === 3) {\n                            arr.push('50');\n                        } else if (arr[3] === '') {\n                            arr[3] = '50';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                });\n\n                return;\n            }\n            var data_type = points_name.substr(dot);\n            if (data_type === '.ply') {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                // format_data = pointscloud.split('\\r\\n');\n                var end_header_index = -1;\n                for (var i in format_data) {\n                    if (format_data[i] === 'end_header') {\n                        end_header_index = i;\n                    }\n                }\n\n                format_data = format_data.splice(parseInt(end_header_index) + 1, format_data.length - parseInt(end_header_index) - 1);\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        if (arr.length === 3) {\n                            arr.push('50');\n                        } else if (arr[3] === '') {\n                            arr[3] = '50';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                });\n            } else if (data_type === '.txt') {\n            } else if (data_type === '.bin') {\n            }\n        },\n        get_preview() {\n            var myChart = echarts.init(document.getElementById('preview'));\n            this.option = {\n                title: {\n                    text: '点云生成预览'\n                },\n                tooltip: {\n                    show: false,\n                    showCcontant: true,\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                legend: {\n                    type: 'plain',\n                    data: ['original_data', 'generate_data'],\n                    top: '10%'\n                },\n                grid3D: {\n                    containLabel: true,\n                    viewControl: {\n                        projection: 'orthographic'\n                    }\n                },\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: 50,\n                    min: -0,\n                    range: [-200, 200],\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        name: 'original_data',\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData,\n                        encode: {\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    },\n                    {\n                        name: 'generate_data',\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData,\n                        encode: {\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    }\n                ]\n            };\n            myChart.setOption(this.option);\n            var myChart_original = echarts.init(document.getElementById('preview_original'));\n            this.option_original = {\n                title: {\n                    text: '原始图'\n                },\n                tooltip: {\n                    show: false,\n                    showCcontant: true,\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid3D: {\n                    containLabel: true,\n                    viewControl: {\n                        projection: 'orthographic'\n                    }\n                },\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: 50,\n                    min: -0,\n                    range: [-200, 200],\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        name: 'original_data',\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData,\n                        encode: {\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    }\n                ]\n            };\n            myChart_original.setOption(this.option_original);\n            var myChart_generate = echarts.init(document.getElementById('preview_generate'));\n            this.option_generate = {\n                title: {\n                    text: '生成图'\n                },\n                tooltip: {\n                    show: true,\n                    showCcontant: true,\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid3D: {\n                    containLabel: true,\n                    viewControl: {\n                        projection: 'orthographic'\n                    }\n                },\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: 50,\n                    min: -0,\n                    range: [-200, 200],\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        name: 'generate_data',\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData,\n                        encode: {\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    }\n                ]\n            };\n            myChart_generate.setOption(this.option_generate);\n        },\n        async previewHandleChange() {\n            this.originalPointCloudData = [];\n            this.generatePointCloudData = [];\n            var original_points_name = this.preview_value[0];\n            var generate_points_name = this.preview_value[1];\n            var original_pointscloud = null;\n            var generate_pointscloud = null;\n            if (this.original_is_Zip) {\n                var original_files = new JSZip();\n                await original_files.loadAsync(this.original_files_zip).then(async function(file) {\n                    await original_files\n                        .file(original_points_name)\n                        .async('string')\n                        .then(function(content) {\n                            original_pointscloud = content;\n                        });\n                });\n                this.make_format_data(original_points_name, original_pointscloud, 0);\n                var generate_files = new JSZip();\n                await generate_files.loadAsync(this.generate_files_zip).then(async function(generate_files_zip) {\n                    await generate_files\n                        .file(generate_points_name)\n                        .async('string')\n                        .then(function(content) {\n                            generate_pointscloud = content;\n                        });\n                });\n                this.make_format_data(generate_points_name, generate_pointscloud, 1);\n            } else {\n                var reader = new FileReader();\n                reader.readAsText(this.original_blob);\n                let me = this;\n\n                reader.onload = async function() {\n                    var original_content = this.result;\n\n                    me.make_format_data(me.preview_options[0].value, original_content, 0);\n\n                    if (me.generate_is_Zip) {\n                        var generate_files = new JSZip();\n                        await generate_files.loadAsync(me.generate_files_zip).then(async function(generate_files_zip) {\n                            await generate_files\n                                .file(generate_points_name)\n                                .async('string')\n                                .then(function(content) {\n                                    generate_pointscloud = content;\n                                });\n                        });\n                        me.make_format_data(generate_points_name, generate_pointscloud, 1);\n\n                        me.get_preview();\n                    } else {\n                        var reader2 = new FileReader();\n                        reader2.readAsText(this.generate_blob);\n\n                        reader2.onload = async function() {\n                            var generate_content = this.result;\n                            me.make_format_data(me.preview_options[0].children.value, generate_content, 1);\n                        };\n                    }\n                };\n            }\n            console.log('this.originalPointCloudData:', this.originalPointCloudData);\n            console.log('this.generatePointCloudData:', this.generatePointCloudData);\n            // this.generatePointCloudData = [];\n            this.get_preview();\n        },\n        handleClose(done) {\n            this.$confirm('确认关闭？')\n                .then(_ => {\n                    this.previewDialogVisible = false;\n                    this.fileName = '';\n                    this.preview_value = [];\n                    this.preview_options = [];\n                    this.previewDialogVisible = false;\n                    this.loading = true;\n                    this.original_files_zip = null;\n                    this.generate_files_zip = null;\n                    this.originalPointCloudData = [];\n                    this.generatePointCloudData = [];\n                    this.maxAxisValue = -10000;\n                    this.minAxisValue = 10000;\n                })\n                .catch(_ => {});\n        },\n        changeAxios_xz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            this.get_preview();\n        },\n        changeAxios_yz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][1], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][1]\n                ];\n            }\n\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][1], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][1]\n                ];\n            }\n            this.get_preview();\n        },\n        changeAxios_xy() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][1]] = [\n                    this.originalPointCloudData[i][1],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][1]] = [\n                    this.generatePointCloudData[i][1],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            this.get_preview();\n        },\n        // >>>>>>>>>>表格空白部分填充>>>>>>>>>>>>>>>>\n        isBlank_num(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = '-- --';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            return value;\n        },\n        isBlank_start(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = '未开始';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n            return value;\n        },\n        isBlank_end(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = '未结束';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n            return value;\n        }\n    }\n};\n",null]}