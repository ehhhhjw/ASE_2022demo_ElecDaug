{"remainingRequest":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/common/Header.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/common/Header.vue","mtime":1651459626242},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 引入EventBus机制（总线），功能类似于Vuex\nimport bus from '../common/bus';\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n    data() {\n        return {\n            // 折叠导航栏\n            collapse: false,\n            // 是否全屏\n            fullscreen: false,\n            // 默认用户名\n            // nickname: '',\n            // 未读消息数量\n            message: 2\n        };\n    },\n    // 计算属性\n    computed: {\n        ...mapState(['nickname'])\n    },\n    methods: {\n        // 用户名下拉菜单选择事件[含登出]\n        async handleCommand(command) {\n            // 如果是登出命令则跳转至登录页\n            if (command == 'logout') {\n                console.log('this.$store.state.username' + this.$store.state.username);\n                // console.log('this.$store.state.nickname:', this.$store.state.nickname);\n                console.log('this.$store.state.token登出:', this.$store.state.token);\n                const { data: data } = await this.$http.delete('/user/logout/?username=' + this.$store.state.username);\n                if (data.code !== 20000) {\n                    console.log(data.code);\n                    console.log(data.msg);\n                    return this.$message.error('用户登出失败！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('用户登出成功！');\n\n                // 在本地数据仓库中删除当前用户\n                // sessionStorage.clear();\n                console.log('sessionStorage已清除');\n                // sessionStorage.removeItem('token');\n                sessionStorage.clear();\n                console.log(sessionStorage.getItem('token'));\n                // this.isRouterAlive = false;\n                // this.$nextTick(function() {\n                //     this.isRouterAlive = true;\n                // });\n                this.$store.commit('setToken', null);\n                this.$store.commit('setNickName', null);\n                this.$store.commit('setUserId', null);\n                console.log('$store.token已清除');\n                // 确认清除\n                console.log(this.$store.state.token);\n                console.log(this.$store.state.nickname);\n                console.log(this.$store.state.username);\n                console.log(this.$store.state.userId);\n                // 路由跳转\n                this.$router.push('/login');\n            }\n        },\n        // 侧边栏折叠\n        collapseChage() {\n            // 侧边栏状态取反即可\n            this.collapse = !this.collapse;\n            // 向组件传值，更新侧边栏状态\n            bus.$emit('collapse', this.collapse);\n        },\n        // 全屏事件\n        handleFullScreen() {\n            let element = document.documentElement;\n            if (this.fullscreen) {\n                if (document.exitFullscreen) {\n                    // exitFullscreen() 退出全屏模式。\n                    document.exitFullscreen();\n                } else if (document.webkitCancelFullScreen) {\n                    document.webkitCancelFullScreen();\n                } else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                } else if (document.msExitFullscreen) {\n                    document.msExitFullscreen();\n                }\n            } else {\n                if (element.requestFullscreen) {\n                    // requestFullscreen() 请求进入全屏模式\n                    element.requestFullscreen();\n                } else if (element.webkitRequestFullScreen) {\n                    element.webkitRequestFullScreen();\n                } else if (element.mozRequestFullScreen) {\n                    element.mozRequestFullScreen();\n                } else if (element.msRequestFullscreen) {\n                    // IE11\n                    element.msRequestFullscreen();\n                }\n            }\n            // 全屏状态取反\n            this.fullscreen = !this.fullscreen;\n        }\n    },\n    mounted() {\n        // document.body.clientWidth表示HTML文档所在窗口的当前宽度。\n        if (document.body.clientWidth < 1500) {\n            this.collapseChage();\n        }\n    },\n    created() {\n        // this.nickname = this.$store.state.nickname;\n        // this.nickname = sessionStorage.getItem('nickname');\n        // console.log('this.nickname:');\n        // console.log(this.nickname);\n    }\n};\n",null]}