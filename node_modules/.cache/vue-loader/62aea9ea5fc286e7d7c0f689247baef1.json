{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_Input_Data.vue?vue&type=style&index=0&id=3dbab9a4&scoped=true&lang=css&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_Input_Data.vue","mtime":1636388054000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n",{"version":3,"sources":["Lidar_A_Input_Data.vue"],"names":[],"mappingsovBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Lidar_A_Input_Data.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <hr />\n        <el-card>\n            <div class=\"view\">\n                <el-row>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport\" v-on:click=\"clickLoad\" style=\"float:left\">\n                                Select original data\n                            </el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_xz\">Exchange XZ </el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_xy\">Exchange XY </el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_yz\">Exchange XY </el-button>\n                            <input type=\"file\" id=\"files\" ref=\"refFile\" style=\"display:none\" v-on:change=\"fileLoad\" />\n                        </div>\n                        <div id=\"main_o\" class=\"view1\"></div>\n                    </el-col>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport_new\" v-on:click=\"clickLoad_new\" style=\"float:left\">\n                                Select augmented data\n                            </el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_xz_new\">Exchange XZ </el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_xy_new\">Exchange XY </el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_yz_new\">Exchange YZ </el-button>\n                            <input type=\"file\" id=\"files_new\" ref=\"refFile_new\" style=\"display:none\" v-on:change=\"fileLoad_new\" />\n                        </div>\n                        <div v-loading=\"original_loading\" id=\"main_g\" class=\"view1\"></div>\n                    </el-col>\n                </el-row>\n            </div>\n        </el-card>\n    </div>\n</template>\n<script>\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n    data() {\n        return {\n            fileList: [],\n            pointCloudData: [],\n            pointCloudData_new: [],\n            option: [],\n            option1: [],\n            originalPointCloudData: [],\n            generatePointCloudData: [],\n            maxAxisValue: -10000,\n            minAxisValue: 10000,\n            maxLightValue: -10000,\n            minLightValue: 10000,\n            original_buttom: false,\n            generate_buttom: false,\n            original_loading: false,\n            generate_loading: false\n        };\n    },\n    methods: {\n        make_format_data(points_name, pointscloud, flag) {\n            var is_3d_data = 0;\n            var format_data = null;\n            var dot = points_name.lastIndexOf('.');\n            if (dot === -1) {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '100';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n\n                return is_3d_data;\n            }\n            var data_type = points_name.substr(dot);\n            if (data_type === '.ply') {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                var end_header_index = -1;\n                for (var i in format_data) {\n                    if (format_data[i] === 'end_header') {\n                        end_header_index = i;\n                    }\n                }\n\n                format_data = format_data.splice(parseInt(end_header_index) + 1, format_data.length - parseInt(end_header_index) - 1);\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '100';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n            } else if (data_type === '.txt') {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '10';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n            } else if (data_type === '.bin') {\n            }\n\n            return is_3d_data;\n        },\n        changeAxios_yz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][1], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][1]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: 'Lidar 3D point cloud (original data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_xz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: 'Lidar 3D point cloud (original data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_xy() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][1]] = [\n                    this.originalPointCloudData[i][1],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: 'Lidar 3D point cloud (original data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_yz_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][1], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][1]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: 'Lidar 3D point cloud (augmented data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        changeAxios_xy_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][1]] = [\n                    this.generatePointCloudData[i][1],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: 'Lidar 3D point cloud (augmented data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        changeAxios_xz_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: 'Lidar 3D point cloud (augmented data)'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        fileLoad() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.originalPointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            const selectedFile = this.$refs.refFile.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            reader.onload = e => {\n                var is_3d_data = this.make_format_data(name, e.target.result, 0);\n\n                if (is_3d_data) {\n                    this.maxLightValue = 100;\n                }\n\n                console.log('this.originalPointCloudData.length:', this.originalPointCloudData.length);\n                if (this.originalPointCloudData.length !== 0) {\n                    this.original_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: 'Lidar 3D point cloud (original data)'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    visualMap: {\n                        show: false,\n                        calculable: true,\n                        max: this.maxLightValue,\n                        min: this.minLightValue,\n                        inRange: {\n                            symbolSize: 2,\n                            color: [\n                                '#313695',\n                                '#4575b4',\n                                '#74add1',\n                                '#abd9e9',\n                                '#e0f3f8',\n                                '#ffffbf',\n                                '#fee090',\n                                '#fdae61',\n                                '#f46d43',\n                                '#d73027',\n                                '#a50026'\n                            ]\n                        }\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: this.originalPointCloudData\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        fileLoad_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.generatePointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData_new.length) {\n                this.pointCloudData_new = [];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            const selectedFile = this.$refs.refFile_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            reader.onload = e => {\n                this.make_format_data(name, e.target.result, 1);\n                var is_3d_data = this.make_format_data(name, e.target.result, 0);\n\n                if (this.maxLightValue === 0 && this.minLightValue === 0) {\n                    this.maxLightValue = 100;\n                }\n\n                if (this.generatePointCloudData.length !== 0) {\n                    this.generate_buttom = true;\n                }\n                this.option1 = {\n                    title: {\n                        text: 'Lidar 3D point cloud (augmented data)'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    visualMap: {\n                        show: false,\n                        calculable: true,\n                        max: this.maxLightValue,\n                        min: this.minLightValue,\n                        inRange: {\n                            symbolSize: 2,\n                            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#fdae61', '#f46d43', '#d73027', '#a50026']\n                        }\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: this.generatePointCloudData\n                        }\n                    ]\n                };\n                myChart1.setOption(this.option1);\n            };\n            loading.close();\n        },\n        clickLoad() {\n            this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_new() {\n            this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n</script>\n<style scoped>\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n</style>\n"]}]}