{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue?vue&type=style&index=0&id=08e39d9e&scoped=true&lang=css&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue","mtime":1628741922000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n",{"version":3,"sources":["Lidar_T_Input_Data.vue"],"names":[],"mappingsolBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Lidar_T_Input_Data.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <div class=\"crumbs\">\n            <el-breadcrumb separator=\"/\">\n                <el-breadcrumb-item> <i class=\"el-icon-s-help\"></i> 激光雷达蜕变 </el-breadcrumb-item>\n                <el-breadcrumb-item>数据可视化</el-breadcrumb-item>\n            </el-breadcrumb>\n        </div>\n        <hr />\n        <el-card>\n            <div class=\"view\">\n                <el-row>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport\" v-on:click=\"clickLoad\" style=\"float:left\">\n                                导入原雷达数据\n                            </el-button>\n                            <input type=\"file\" id=\"files\" ref=\"refFile\" style=\"display:none\" v-on:change=\"fileLoad\" />\n                        </div>\n                        <div>\n                            <el-button\n                                v-if=\"this.originalPointCloudData.length != 0\"\n                                type=\"warning\"\n                                id=\"fileImport\"\n                                v-on:click=\"clickLoad_label\"\n                                style=\"float:left\"\n                            >\n                                导入原雷达标签\n                            </el-button>\n                            <input type=\"file\" id=\"files_label\" ref=\"refFile_label\" style=\"display:none\" v-on:change=\"fileLoad_label\" />\n                        </div>\n                        <div id=\"main_o\" class=\"view1\"></div>\n                    </el-col>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport_new\" v-on:click=\"clickLoad_new\" style=\"float:left\">\n                                导入生成雷达数据\n                            </el-button>\n                            <input type=\"file\" id=\"files_new\" ref=\"refFile_new\" style=\"display:none\" v-on:change=\"fileLoad_new\" />\n                        </div>\n                        <div>\n                            <el-button\n                                v-if=\"this.generatePointCloudData.length != 0\"\n                                type=\"warning\"\n                                id=\"fileImport\"\n                                v-on:click=\"clickLoad_label_new\"\n                                style=\"float:left\"\n                            >\n                                导入生成雷达标签\n                            </el-button>\n                            <input\n                                type=\"file\"\n                                id=\"files_label_new\"\n                                ref=\"refFile_label_new\"\n                                style=\"display:none\"\n                                v-on:change=\"fileLoad_label_new\"\n                            />\n                        </div>\n                        <div v-loading=\"original_loading\" id=\"main_g\" class=\"view1\"></div>\n                    </el-col>\n                </el-row>\n            </div>\n        </el-card>\n    </div>\n</template>\n<script>\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n    data() {\n        return {\n            fileList: [],\n            pointCloudData: [],\n            pointCloudData_new: [],\n            option: [],\n            option1: [],\n            originalPointCloudData: [],\n            generatePointCloudData: [],\n            originalLabelData: [],\n            generateLabelData: [],\n            maxAxisValue: -10000,\n            minAxisValue: 10000,\n            maxLightValue: -10000,\n            minLightValue: 10000,\n            original_buttom: false,\n            generate_buttom: false,\n            original_loading: false,\n            generate_loading: false\n        };\n    },\n    methods: {\n        make_format_data(points_name, pointscloud, flag) {\n            var is_3d_data = 0;\n            var format_data = null;\n            var PointCloudData = [];\n\n            format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n            format_data.forEach(item => {\n                let arr = item.split(' ');\n                for (var k in arr) {\n                    if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                        this.maxAxisValue = parseFloat(arr[k]);\n                    }\n                    if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                        this.minAxisValue = parseFloat(arr[k]);\n                    }\n                }\n                if ((arr.length === 3 || arr[3] === '') && !flag) {\n                    is_3d_data = 1;\n                    if (arr.length === 3) {\n                        arr.push('0');\n                    } else if (arr[3] === '') {\n                        arr[3] = '0';\n                    }\n                } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                    is_3d_data = 1;\n                    if (arr.length === 3) {\n                        arr.push('100');\n                    } else if (arr[3] === '') {\n                        arr[3] = '10';\n                    }\n                }\n                PointCloudData.push(arr);\n            });\n            return [PointCloudData, this.maxAxisValue, this.minAxisValue];\n        },\n        make_format_data_label(points_name, labels, flag) {\n            // var is_3d_data = 0;\n            console.log('labels:', labels);\n            var format_data = null;\n            var originalPointCloudData = [];\n            var generatePointCloudData = [];\n            var label_temp = [];\n\n            format_data = labels.replaceAll('\\r\\n', '\\n').split('\\n');\n            format_data.forEach(item => {\n                let arr = item.split(' ');\n\n                var label_temp_item = [];\n                if (arr[0] != 'DontCare' && arr[0] != '') {\n                    label_temp_item.push(parseFloat(arr[13]));\n                    label_temp_item.push(-1 * parseFloat(arr[11]));\n                    label_temp_item.push(-1 * parseFloat(arr[12]));\n                    label_temp.push(label_temp_item);\n                }\n\n                // console.log('label_temp:', label_temp);\n\n                if (!flag) {\n                    originalPointCloudData.push(arr);\n                } else {\n                    generatePointCloudData.push(arr);\n                }\n            });\n            return label_temp;\n        },\n        get_preview() {\n            var myChart_original = echarts.init(document.getElementById('preview_original'));\n            this.option_original = {\n                title: {\n                    text: '原始图'\n                },\n                tooltip: {\n                    show: false,\n                    showCcontant: true,\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    // 就是显示哪些东西\n                    type: 'plain',\n                    data: ['original_data', 'original_label'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid3D: {\n                    containLabel: true,\n                    viewControl: {\n                        projection: 'orthographic'\n                    }\n                },\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                series: [\n                    {\n                        name: 'original_data',\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData,\n                        symbolSize: 2,\n                        encode: {\n                            // 维度的名字默认就是表头的属性名\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    },\n                    {\n                        name: 'original_label',\n                        type: 'scatter3D',\n                        data: this.originalLabelData,\n                        symbolSize: 10,\n                        encode: {\n                            // 维度的名字默认就是表头的属性名\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    }\n                ]\n            };\n            myChart_original.setOption(this.option_original);\n        },\n        fileLoad() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.originalPointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            const selectedFile = this.$refs.refFile.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            if (size == 0 || size == '0') {\n                loading.close();\n                return;\n            }\n            var originalPointCloudData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.originalPointCloudData:', me.originalPointCloudData);\n                var res = this.make_format_data(name, e.target.result, 0);\n                originalPointCloudData_temp = res[0];\n                me.maxAxisValue = res[1];\n                me.minAxisValue = res[2];\n                console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n                me.originalPointCloudData = originalPointCloudData_temp;\n                console.log('me.originalPointCloudData:', me.originalPointCloudData);\n                if (this.originalPointCloudData.length !== 0) {\n                    this.original_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: originalPointCloudData_temp,\n                            symbolSize: 2\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            // while (originalPointCloudData_temp.length == 0) {\n            //     setTimeout(function() {\n            //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n            //     }, 100);\n            // }\n            console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n\n            loading.close();\n        },\n        fileLoad_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.generatePointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_g'));\n            const selectedFile = this.$refs.refFile_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            if (size == 0 || size == '0') {\n                loading.close();\n                return;\n            }\n            var generatePointCloudData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.generatePointCloudData:', me.generatePointCloudData);\n                var res = this.make_format_data(name, e.target.result, 0);\n                generatePointCloudData_temp = res[0];\n                me.maxAxisValue = res[1];\n                me.minAxisValue = res[2];\n                console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n                me.generatePointCloudData = generatePointCloudData_temp;\n                console.log('me.generatePointCloudData:', me.generatePointCloudData);\n                if (this.generatePointCloudData.length !== 0) {\n                    this.generate_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（生成图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: generatePointCloudData_temp,\n                            symbolSize: 2\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            // while (originalPointCloudData_temp.length == 0) {\n            //     setTimeout(function() {\n            //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n            //     }, 100);\n            // }\n\n            loading.close();\n        },\n        fileLoad_label() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            if (this.originalLabelData.length) {\n                this.originalLabelData = [];\n            }\n\n            var myChart = echarts.init(document.getElementById('main_o'));\n            console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label.files);\n            const selectedFile = this.$refs.refFile_label.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            var originalLabelData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.originalLabelData:', me.originalLabelData);\n                console.log('e.target.result:', e.target.result);\n                originalLabelData_temp = this.make_format_data_label(name, e.target.result, 0);\n                me.originalLabelData = originalLabelData_temp;\n                console.log('me.originalLabelData:', me.originalLabelData);\n\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        // 就是显示哪些东西\n                        type: 'plain',\n                        data: ['original_data', 'original_label'],\n                        top: '10%'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            name: 'original_data',\n                            type: 'scatter3D',\n                            data: me.originalPointCloudData,\n                            symbolSize: 2,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        },\n                        {\n                            name: 'original_label',\n                            type: 'scatter3D',\n                            data: me.originalLabelData,\n                            symbolSize: 10,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        fileLoad_label_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            if (this.generateLabelData.length) {\n                this.generateLabelData = [];\n            }\n\n            var myChart = echarts.init(document.getElementById('main_g'));\n            console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label_new.files);\n            const selectedFile = this.$refs.refFile_label_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            var generateLabelData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.generateLabelData:', me.generateLabelData);\n                console.log('e.target.result:', e.target.result);\n                generateLabelData_temp = this.make_format_data_label(name, e.target.result, 0);\n                me.generateLabelData = generateLabelData_temp;\n                console.log('me.generateLabelData:', me.generateLabelData);\n\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        // 就是显示哪些东西\n                        type: 'plain',\n                        data: ['generate_data', 'generate_label'],\n                        top: '10%'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            name: 'generate_data',\n                            type: 'scatter3D',\n                            data: me.generatePointCloudData,\n                            symbolSize: 2,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        },\n                        {\n                            name: 'generate_label',\n                            type: 'scatter3D',\n                            data: me.generateLabelData,\n                            symbolSize: 10,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        clickLoad() {\n            this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_new() {\n            this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_label() {\n            this.$refs.refFile_label.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_label_new() {\n            this.$refs.refFile_label_new.dispatchEvent(new MouseEvent('click'));\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n</script>\n<style scoped>\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n</style>\n"]}]}