{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/AugmentationManage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/AugmentationManage.vue","mtime":1636377758000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport qs from 'qs';\nexport default {\n    data() {\n        return {\n            id: '',\n            name: '',\n            augTypeList: [],\n            addDialogVisible: false,\n            addForm: {\n                name: '',\n                details: ''\n            },\n            addFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            editDialogVisible: false,\n            editForm: {\n                id: '',\n                name: '',\n                details: ''\n            },\n            editFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            searchAugName: '',\n            searchAugId: '',\n            augMethodList: [],\n            methodDialogVisible: false,\n            addMethodDialogVisible: false,\n            addMethodForm: {\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            addMethodFormRules: {\n                name: [{ required: true, message: '请输入生成方法名', trigger: 'blur' }]\n            },\n            editMethodDialogVisible: false,\n            editMethodForm: {\n                id: '',\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            editMethodFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            userRight: '',\n            fullscreenLoading: false\n        };\n    },\n    created() {\n        this.userRight = this.$store.state.user_group_name;\n\n        this.getAugList();\n    },\n    methods: {\n        async getAugList() {\n            var param = '';\n            if (this.name !== '') {\n                param = '?name=' + this.name;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + param);\n            console.log('data:', data);\n            if (data.code !== 20000) {\n                return this.$message.error('获取生成类型失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augTypeList = data.data;\n        },\n        async PreciseSearchAug() {\n            if (this.searchAugName === '' && this.searchAugId === '') {\n                return this.$message.error('请输入搜索内容！');\n            }\n            var params = '';\n            if (this.searchAugName && this.searchAugId) {\n                params = params + '?name=' + this.searchAugName + '&id=' + this.searchAugId;\n            } else if (this.searchAugName) {\n                params = params + '?name=' + this.searchAugName;\n            } else if (this.searchAugId) {\n                params = params + '?id=' + this.searchAugId;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + params);\n            if (data.code !== 20000) {\n                return this.$message.error('未精确搜索到该生成类型！');\n            }\n\n            this.augTypeList = [];\n            this.augTypeList.push(data.data);\n        },\n        addAugType() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                if (this.addForm.details === '') {\n                    this.addForm.details = '暂无';\n                }\n                const { data: data } = await this.$http.post('/augmentation_type/', qs.stringify(this.addForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成类型失败！请检查生成类型名是否重复');\n                }\n                this.$message.success('添加生成类型成功！');\n                this.addDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        addDialogClosed() {\n            this.$refs.addFormRef.resetFields();\n        },\n        async removeAugById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成类型, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augTypeList.length == 1) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：系统至少需有一种生成类型');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_type/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成类型成功！');\n            this.getAugList();\n        },\n        async showEditDialog(id, name, details) {\n            this.editForm.id = id;\n            this.editForm.name = name;\n            this.editForm.details = details;\n            this.editDialogVisible = true;\n        },\n        editDialogClosed() {\n            this.$refs.editFormRef.resetFields();\n        },\n        // 修改扩增类型\n        editAugTypeInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            // this.fullscreenLoading = true;\n            this.$refs.editFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editForm.id;\n                if (this.editForm.name) {\n                    temp_form['name'] = this.editForm.name;\n                }\n                if (this.editForm.details) {\n                    temp_form['details'] = this.editForm.details;\n                }\n                console.log('temp_form:', temp_form);\n                console.log('this.editForm:', this.editForm);\n                const { data: data } = await this.$http.put('/augmentation_type/', qs.stringify(this.temp_form));\n                loading.close();\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成类型失败！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成类型成功！');\n                this.editDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        async augMethodsById(id) {\n            this.methodDialogVisible = true;\n            const { data: data } = await this.$http.get('/augmentation_method/?augmentation_type=' + id);\n            if (data.code === 45000) {\n                return this.$message.error('该生成类型暂无方法！');\n            }\n            if (data.code !== 20000) {\n                return this.$message.error('查询生成方法失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augMethodList = data.data;\n            var str = JSON.stringify(this.augMethodList);\n        },\n        addMethodDialogClosed() {\n            this.$refs.addMethodFormRef.resetFields();\n        },\n        async addAugMethod() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n\n                if (this.addMethodForm.details === '') {\n                    this.addMethodForm.details = '暂无';\n                }\n                this.addMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n\n                const { data: data } = await this.$http.post('/augmentation_method/', qs.stringify(this.addMethodForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成方法失败！请检查生成方法名是否重复');\n                }\n                this.$message.success('添加生成方法成功！');\n                this.addMethodDialogVisible = false;\n                this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n            });\n        },\n        showMethodEditDialog(id, name, details) {\n            this.editMethodForm.id = id;\n            this.editMethodForm.name = name;\n            this.editMethodForm.details = details ? details : '暂无';\n            this.editMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n            this.editMethodDialogVisible = true;\n        },\n        editAugMethodInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.editMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editMethodForm.id;\n                if (this.editMethodForm.name) {\n                    temp_form['name'] = this.editMethodForm.name;\n                }\n                if (this.editMethodForm.details) {\n                    temp_form['details'] = this.editMethodForm.details;\n                }\n                // console.log('temp_form:', temp_form);\n                // console.log('this.editMethodForm:', this.editMethodForm);\n                const { data: data } = await this.$http.put('/augmentation_method/', qs.stringify(temp_form));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成方法失败，请添加修改！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成方法成功！');\n                this.editMethodDialogVisible = false;\n                this.augMethodsById(this.editMethodForm.augmentation_type);\n            });\n        },\n        editMethodDialogClosed() {\n            this.$refs.editMethodFormRef.resetFields();\n        },\n        async removeAugMethodById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成方法, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augMethodList.length == 1) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：生成类型至少需有一种生成方法');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_method/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成方法成功！');\n            this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n        },\n        MethodsDialogClosed() {\n            this.augMethodList = [];\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n",null]}