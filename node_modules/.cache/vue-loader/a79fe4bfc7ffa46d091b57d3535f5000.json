{"remainingRequest":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/User_Manage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/User_Manage.vue","mtime":1636388172000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport qs from 'qs';\nexport default {\n    data() {\n        return {\n            queryInfo: {\n                page: 1\n            },\n            userList: [],\n            total: 0,\n            totalPageNum: 0,\n            addDialogVisible: false,\n            addForm: {\n                username: '',\n                password: '',\n                nickname: '',\n                user_group: ''\n            },\n            addFormRules: {\n                username: [\n                    { required: true, message: 'Please enter the user name', trigger: 'blur' },\n                    {\n                        min: 3,\n                        max: 10,\n                        message: 'The length of the user name is between 3 and 10 characters',\n                        trigger: 'blur'\n                    }\n                ],\n                password: [\n                    { required: true, message: 'Please input the password', trigger: 'blur' },\n                    {\n                        min: 6,\n                        max: 15,\n                        message: 'The length of the password is between 6 and 15 characters',\n                        trigger: 'blur'\n                    }\n                ]\n            },\n            editDialogVisible: false,\n            editForm: {\n                username: '',\n                new_password: '',\n                new_nickname: '',\n                new_user_group: ''\n            },\n            editFormRules: {\n                username: [\n                    { required: true, message: 'Please enter the username', trigger: 'blur' },\n                    {\n                        min: 3,\n                        max: 10,\n                        message: 'The length of the user name is between 3 and 10 characters',\n                        trigger: 'blur'\n                    }\n                ]\n            },\n            searchUserName: '',\n            visibleSubmit: '',\n            userRight: '',\n            colomnHiden: true,\n            value: '100',\n            formInline_Self: {\n                searchType: '',\n                searchTaskInfo: ''\n            }\n        };\n    },\n    created() {\n        this.getUserList();\n        this.userRight = this.$store.state.user_group_name;\n        this.colomnHiden = this.userRight === '超级管理员' ? false : true;\n    },\n    methods: {\n        pageReflash() {\n            this.queryInfo.page = 1;\n        },\n        async SearchUser() {\n            if (this.formInline_Self.searchType === '') {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Please select query mode',\n                    offset: 70\n                });\n            }\n            if (this.formInline_Self.searchTaskInfo === '') {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Please enter the query content',\n                    offset: 70\n                });\n            }\n            var search_params = '';\n            if (this.formInline_Self.searchType === '用户id') {\n                search_params = '/user/id/admin/search/?user_id=' + this.formInline_Self.searchTaskInfo;\n            } else if (this.formInline_Self.searchType === '用户名') {\n                search_params = '/user/username/admin/search/?username=' + this.formInline_Self.searchTaskInfo + '&search_type=1';\n            } else if (this.formInline_Self.searchType === '用户昵称') {\n                search_params = '/user/nickname/admin/search/?nickname=' + this.formInline_Self.searchTaskInfo + '&search_type=1';\n            }\n\n            const { data: data } = await this.$http.get(search_params);\n            if (data.code !== 20000) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'The user was not searched!',\n                    offset: 70\n                });\n            }\n\n            if (this.formInline_Self.searchType === '用户id') {\n                this.userList = [];\n                this.userList.push(data.data);\n            } else {\n                this.userList = data.data.details;\n            }\n            this.total_Self = this.userList ? this.userList.length : 0;\n            this.totalPageNum = data.data.pages;\n        },\n        temp() {},\n        async getUserList() {\n            const { data: data } = await this.$http.get('/user/all/admin/search/' + '?page=' + this.queryInfo.page);\n            if (data.code !== 20000) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Failed to get user list!: ' + data.msg,\n                    offset: 70\n                });\n            }\n            this.userList = data.data.details;\n            console.log('this.userList:', this.userList);\n            this.total = data.data.pages * 10;\n        },\n        async FuzzySearvhchUser() {\n            if (this.searchUserName === '') {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Please enter the query content',\n                    offset: 70\n                });\n            }\n            const { data: data } = await this.$http.get(\n                '/user/username/admin/search/' + '?username=' + this.searchUserName + '&search_type=1'\n            );\n            if (data.code !== 20000) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'The user was not searched!',\n                    offset: 70\n                });\n            }\n\n            this.userList = data.data.details;\n            this.total = this.userList.length;\n            this.totalPageNum = data.data.pages;\n        },\n        async PreciseSearchUser() {\n            if (this.searchUserName === '') {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Please enter the query content',\n                    offset: 70\n                });\n            }\n            const { data: data } = await this.$http.get(\n                '/user/username/admin/search/' + '?username=' + this.searchUserName + '&search_type=0'\n            );\n            if (data.code !== 20000) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'The user was not searched!',\n                    offset: 70\n                });\n            }\n\n            this.userList = [];\n            this.userList.push(data.data);\n            this.total = this.userList ? this.userList.length : 0;\n            this.totalPageNum = data.data.pages;\n        },\n        handleSizeChange(newSize) {\n            this.queryInfo.pagesize = newSize;\n            this.getUserList();\n        },\n        handleCurrentChange(newPage) {\n            this.queryInfo.page = newPage;\n            this.getUserList();\n        },\n        async removeUserById(username) {\n            const confirmResult = await this.$confirm('This operation will permanently delete the user. Do you want to continue?', 'Tip', {\n                confirmButtonText: 'OK',\n                cancelButtonText: 'cancel',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info({\n                    showClose: true,\n                    message: 'Deletion cancelled',\n                    offset: 70\n                });\n            }\n            if (this.userList.length == 1) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Failed to delete user!: The system must have at least one user!',\n                    offset: 70\n                });\n            }\n            const { data: data } = await this.$http.delete('/user/delete/' + '?username=' + username);\n            if (data.code !== 20000) {\n                return this.$message.error({\n                    showClose: true,\n                    message: 'Failed to delete user!: ' + data.msg,\n                    offset: 70\n                });\n            }\n            this.$message.success({\n                showClose: true,\n                message: 'User deleted successfully!',\n                offset: 70\n            });\n            this.getUserList();\n        },\n        addUser() {\n            this.$refs.addFormRef.validate(async valid => {\n                if (!valid) return;\n                const { data: data } = await this.$http.post('/user/register/', qs.stringify(this.addForm));\n                if (data.code !== 20000) {\n                    return this.$message.error({\n                        showClose: true,\n                        message: 'Failed to add user!: ' + data.msg,\n                        offset: 70\n                    });\n                }\n                this.$message.success({\n                    showClose: true,\n                    message: 'User added successfully!',\n                    offset: 70\n                });\n                this.addDialogVisible = false;\n                this.getUserList();\n            });\n        },\n        addDialogClosed() {\n            this.$refs.addFormRef.resetFields();\n        },\n        async showEditDialog(username) {\n            this.editForm.username = username;\n            this.editDialogVisible = true;\n        },\n        editDialogClosed() {\n            this.$refs.editFormRef.resetFields();\n        },\n        editUserInfo() {\n            this.$refs.editFormRef.validate(async valid => {\n                if (!valid) return;\n\n                var adddata = new FormData();\n                adddata.append('username', this.editForm.username);\n                if (this.editForm.new_password) {\n                    adddata.append('new_password', this.editForm.new_password);\n                }\n                if (this.editForm.new_nickname) {\n                    adddata.append('new_nickname', this.editForm.new_nickname);\n                }\n                if (this.editForm.new_user_group) {\n                    var num = this.editForm.new_user_group === '超级管理员' ? 1 : 0;\n                    adddata.append('new_user_group', num);\n                }\n                const { data: data } = await this.$http({\n                    url: '/user/',\n                    data: adddata,\n                    method: 'put'\n                });\n                if (data.code !== 20000) {\n                    return this.$message.error({\n                        showClose: true,\n                        message: 'Failed to edit user!: ' + data.msg,\n                        offset: 70\n                    });\n                }\n                this.$message.success({\n                    showClose: true,\n                    message: 'Edit user succeeded!',\n                    offset: 70\n                });\n                this.editDialogVisible = false;\n                this.getUserList();\n            });\n        },\n        isBlank_login(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = 'Never logged in';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            return value;\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n",null]}