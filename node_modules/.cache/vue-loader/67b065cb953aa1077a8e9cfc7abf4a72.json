{"remainingRequest":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/AugmentationManage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/AugmentationManage.vue","mtime":1636377758000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport qs from 'qs';\nexport default {\n    data() {\n        return {\n            id: '',\n            name: '',\n            augTypeList: [],\n            addDialogVisible: false,\n            addForm: {\n                name: '',\n                details: ''\n            },\n            addFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            editDialogVisible: false,\n            editForm: {\n                id: '',\n                name: '',\n                details: ''\n            },\n            editFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            searchAugName: '',\n            searchAugId: '',\n            augMethodList: [],\n            methodDialogVisible: false,\n            addMethodDialogVisible: false,\n            addMethodForm: {\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            addMethodFormRules: {\n                name: [{ required: true, message: '请输入生成方法名', trigger: 'blur' }]\n            },\n            editMethodDialogVisible: false,\n            editMethodForm: {\n                id: '',\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            editMethodFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            userRight: '',\n            fullscreenLoading: false\n        };\n    },\n    created() {\n        this.userRight = this.$store.state.user_group_name;\n\n        this.getAugList();\n    },\n    methods: {\n        async getAugList() {\n            var param = '';\n            if (this.name !== '') {\n                param = '?name=' + this.name;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + param);\n            console.log('data:', data);\n            if (data.code !== 20000) {\n                return this.$message.error('获取生成类型失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augTypeList = data.data;\n        },\n        async PreciseSearchAug() {\n            if (this.searchAugName === '' && this.searchAugId === '') {\n                return this.$message.error('请输入搜索内容！');\n            }\n            var params = '';\n            if (this.searchAugName && this.searchAugId) {\n                params = params + '?name=' + this.searchAugName + '&id=' + this.searchAugId;\n            } else if (this.searchAugName) {\n                params = params + '?name=' + this.searchAugName;\n            } else if (this.searchAugId) {\n                params = params + '?id=' + this.searchAugId;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + params);\n            if (data.code !== 20000) {\n                return this.$message.error('未精确搜索到该生成类型！');\n            }\n\n            this.augTypeList = [];\n            this.augTypeList.push(data.data);\n        },\n        addAugType() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                if (this.addForm.details === '') {\n                    this.addForm.details = '暂无';\n                }\n                const { data: data } = await this.$http.post('/augmentation_type/', qs.stringify(this.addForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成类型失败！请检查生成类型名是否重复');\n                }\n                this.$message.success('添加生成类型成功！');\n                this.addDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        addDialogClosed() {\n            this.$refs.addFormRef.resetFields();\n        },\n        async removeAugById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成类型, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augTypeList.length == 1) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：系统至少需有一种生成类型');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_type/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成类型成功！');\n            this.getAugList();\n        },\n        async showEditDialog(id, name, details) {\n            this.editForm.id = id;\n            this.editForm.name = name;\n            this.editForm.details = details;\n            this.editDialogVisible = true;\n        },\n        editDialogClosed() {\n            this.$refs.editFormRef.resetFields();\n        },\n        // 修改扩增类型\n        editAugTypeInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            // this.fullscreenLoading = true;\n            this.$refs.editFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editForm.id;\n                if (this.editForm.name) {\n                    temp_form['name'] = this.editForm.name;\n                }\n                if (this.editForm.details) {\n                    temp_form['details'] = this.editForm.details;\n                }\n                console.log('temp_form:', temp_form);\n                console.log('this.editForm:', this.editForm);\n                const { data: data } = await this.$http.put('/augmentation_type/', qs.stringify(this.temp_form));\n                loading.close();\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成类型失败！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成类型成功！');\n                this.editDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        async augMethodsById(id) {\n            this.methodDialogVisible = true;\n            const { data: data } = await this.$http.get('/augmentation_method/?augmentation_type=' + id);\n            if (data.code === 45000) {\n                return this.$message.error('该生成类型暂无方法！');\n            }\n            if (data.code !== 20000) {\n                return this.$message.error('查询生成方法失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augMethodList = data.data;\n            var str = JSON.stringify(this.augMethodList);\n        },\n        addMethodDialogClosed() {\n            this.$refs.addMethodFormRef.resetFields();\n        },\n        async addAugMethod() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n\n                if (this.addMethodForm.details === '') {\n                    this.addMethodForm.details = '暂无';\n                }\n                this.addMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n\n                const { data: data } = await this.$http.post('/augmentation_method/', qs.stringify(this.addMethodForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成方法失败！请检查生成方法名是否重复');\n                }\n                this.$message.success('添加生成方法成功！');\n                this.addMethodDialogVisible = false;\n                this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n            });\n        },\n        showMethodEditDialog(id, name, details) {\n            this.editMethodForm.id = id;\n            this.editMethodForm.name = name;\n            this.editMethodForm.details = details ? details : '暂无';\n            this.editMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n            this.editMethodDialogVisible = true;\n        },\n        editAugMethodInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.editMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editMethodForm.id;\n                if (this.editMethodForm.name) {\n                    temp_form['name'] = this.editMethodForm.name;\n                }\n                if (this.editMethodForm.details) {\n                    temp_form['details'] = this.editMethodForm.details;\n                }\n                // console.log('temp_form:', temp_form);\n                // console.log('this.editMethodForm:', this.editMethodForm);\n                const { data: data } = await this.$http.put('/augmentation_method/', qs.stringify(temp_form));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成方法失败，请添加修改！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成方法成功！');\n                this.editMethodDialogVisible = false;\n                this.augMethodsById(this.editMethodForm.augmentation_type);\n            });\n        },\n        editMethodDialogClosed() {\n            this.$refs.editMethodFormRef.resetFields();\n        },\n        async removeAugMethodById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成方法, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augMethodList.length == 1) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：生成类型至少需有一种生成方法');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_method/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成方法成功！');\n            this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n        },\n        MethodsDialogClosed() {\n            this.augMethodList = [];\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n",{"version":3,"sources":["AugmentationManage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AugmentationManage.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\n    <div>\n        <el-card>\n            <el-row :gutter=\"20\" class=\"search\">\n                <el-col :span=\"4\">\n                    <el-input placeholder=\"请输入扩增类型id\" v-model=\"searchAugId\" @clear=\"getAugList\" clearable> </el-input>\n                </el-col>\n                <el-col :span=\"6\">\n                    <el-input placeholder=\"请输入扩增类型名称\" v-model=\"searchAugName\" @clear=\"getAugList\" clearable>\n                        <el-button slot=\"append\" size=\"mini\" @click=\"PreciseSearchAug\"\n                            >精确<i class=\"el-icon-search el-icon--right\"></i\n                        ></el-button>\n                    </el-input>\n                </el-col>\n                <el-col :span=\"4\"> </el-col>\n                <el-col :span=\"4\">\n                    <el-button type=\"primary\" @click=\"addDialogVisible = true\" v-if=\"this.userRight === '超级管理员'\"\n                        >添加生成类型</el-button\n                    >\n                </el-col>\n            </el-row>\n            <el-table :data=\"augTypeList\" border stripe>\n                <el-table-column label=\"id\" prop=\"id\" width=\"50px\"></el-table-column>\n                <el-table-column label=\"生成类型名称\" prop=\"name\"></el-table-column>\n                <el-table-column label=\"生成类型描述\" prop=\"details\"></el-table-column>\n                <el-table-column label=\"数据更新时间\" prop=\"update_datetime\">\n                    <template slot-scope=\"scope\">\n                        {{ scope.row.update_datetime | dateFormat }}\n                    </template>\n                </el-table-column>\n                <el-table-column label=\"操作\" width=\"150px\" v-if=\"this.userRight === '超级管理员'\">\n                    <template slot-scope=\"scope\">\n                        <el-tooltip effect=\"dark\" content=\"编辑\" placement=\"top\" :enterable=\"false\">\n                            <el-button\n                                type=\"primary\"\n                                icon=\"el-icon-edit\"\n                                size=\"mini\"\n                                @click=\"showEditDialog(scope.row.id, scope.row.name, scope.row.details)\"\n                            ></el-button>\n                        </el-tooltip>\n                        <!-- <el-tooltip effect=\"dark\" content=\"删除\" placement=\"top\" :enterable=\"false\">\n                            <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeAugById(scope.row.id)\"></el-button>\n                        </el-tooltip> -->\n                    </template>\n                </el-table-column>\n                <el-table-column label=\"详情\" width=\"100px\">\n                    <template slot-scope=\"scope\">\n                        <el-tooltip effect=\"dark\" content=\"查看方法\" placement=\"top\" :enterable=\"false\">\n                            <el-button\n                                type=\"info\"\n                                icon=\"el-icon-more-outline\"\n                                size=\"mini\"\n                                @click=\"augMethodsById(scope.row.id)\"\n                            ></el-button>\n                        </el-tooltip>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </el-card>\n        <el-dialog title=\"添加生成类型\" :visible.sync=\"addDialogVisible\" width=\"30%\" @closed=\"addDialogClosed\">\n            <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"70px\">\n                <el-form-item label=\"生成类型名称\" prop=\"name\">\n                    <el-input v-model=\"addForm.name\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成类型描述\" prop=\"details\">\n                    <el-input v-model=\"addForm.details\"></el-input>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"addAugType\" v-loading.fullscreen.lock=\"fullscreenLoading\">确 定</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog\n            title=\"编辑生成类型信息\"\n            :visible.sync=\"editDialogVisible\"\n            width=\"50%\"\n            @closed=\"editDialogClosed\"\n            v-loading=\"fullscreenLoading\"\n        >\n            <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"110px\">\n                <el-form-item label=\"生成类型id\">\n                    <el-input v-model=\"editForm.id\" disabled></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成类型名称\" prop=\"new_password\">\n                    <el-input v-model=\"editForm.name\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成类型描述\" prop=\"new_nickname\">\n                    <el-input v-model=\"editForm.details\"></el-input>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"editAugTypeInfo\" v-loading.fullscreen.lock=\"fullscreenLoading\">确 定</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog :title=\"'生成方法详情'\" :visible.sync=\"methodDialogVisible\" width=\"90%\" @closed=\"MethodsDialogClosed\">\n            <el-row :gutter=\"20\" class=\"search\">\n                <el-col :span=\"4\">\n                    <el-button type=\"primary\" @click=\"addMethodDialogVisible = true\" v-if=\"this.userRight === '超级管理员'\"\n                        >添加生成方法</el-button\n                    >\n                </el-col>\n            </el-row>\n            <el-table :data=\"augMethodList\" border stripe>\n                <el-table-column label=\"id\" prop=\"id\" width=\"50px\"></el-table-column>\n                <el-table-column label=\"生成方法名称\" prop=\"name\"></el-table-column>\n                <el-table-column label=\"生成方法描述\" prop=\"details\"></el-table-column>\n                <el-table-column label=\"数据更新时间\" prop=\"update_datetime\">\n                    <template slot-scope=\"scope\">\n                        {{ scope.row.update_datetime | dateFormat }}\n                    </template>\n                </el-table-column>\n                <el-table-column label=\"操作\" width=\"120px\" v-if=\"this.userRight === '超级管理员'\">\n                    <template slot-scope=\"scope\">\n                        <el-tooltip effect=\"dark\" content=\"编辑\" placement=\"top\" :enterable=\"false\">\n                            <el-button\n                                type=\"primary\"\n                                icon=\"el-icon-edit\"\n                                size=\"mini\"\n                                @click=\"showMethodEditDialog(scope.row.id, scope.row.name, scope.row.details)\"\n                            ></el-button>\n                        </el-tooltip>\n                        <!-- <el-tooltip effect=\"dark\" content=\"删除\" placement=\"top\" :enterable=\"false\">\n                            <el-button\n                                type=\"danger\"\n                                icon=\"el-icon-delete\"\n                                size=\"mini\"\n                                @click=\"removeAugMethodById(scope.row.id)\"\n                            ></el-button>\n                        </el-tooltip> -->\n                    </template>\n                </el-table-column>\n            </el-table>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"methodDialogVisible = false\">关 闭</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog title=\"添加生成方法\" :visible.sync=\"addMethodDialogVisible\" width=\"30%\" @closed=\"addMethodDialogClosed\">\n            <el-form :model=\"addMethodForm\" :rules=\"addMethodFormRules\" ref=\"addMethodFormRef\" label-width=\"70px\">\n                <el-form-item label=\"生成方法名称\" prop=\"name\">\n                    <el-input v-model=\"addMethodForm.name\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成方法描述\" prop=\"details\">\n                    <el-input v-model=\"addMethodForm.details\"></el-input>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"addMethodDialogVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"addAugMethod\" v-loading.fullscreen.lock=\"fullscreenLoading\">确 定</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog title=\"编辑生成方法信息\" :visible.sync=\"editMethodDialogVisible\" width=\"50%\" @closed=\"editMethodDialogClosed\">\n            <el-form :model=\"editMethodForm\" :rules=\"editMethodFormRules\" ref=\"editMethodFormRef\" label-width=\"110px\">\n                <el-form-item label=\"生成方法id\">\n                    <el-input v-model=\"editMethodForm.id\" disabled></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成方法名称\" prop=\"new_password\">\n                    <el-input v-model=\"editMethodForm.name\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"生成方法描述\" prop=\"new_nickname\">\n                    <el-input v-model=\"editMethodForm.details\"></el-input>\n                </el-form-item>\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"editMethodDialogVisible = false\">取 消</el-button>\n                <el-button type=\"primary\" @click=\"editAugMethodInfo\" v-loading.fullscreen.lock=\"fullscreenLoading\">确 定</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n<script>\nimport qs from 'qs';\nexport default {\n    data() {\n        return {\n            id: '',\n            name: '',\n            augTypeList: [],\n            addDialogVisible: false,\n            addForm: {\n                name: '',\n                details: ''\n            },\n            addFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            editDialogVisible: false,\n            editForm: {\n                id: '',\n                name: '',\n                details: ''\n            },\n            editFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            searchAugName: '',\n            searchAugId: '',\n            augMethodList: [],\n            methodDialogVisible: false,\n            addMethodDialogVisible: false,\n            addMethodForm: {\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            addMethodFormRules: {\n                name: [{ required: true, message: '请输入生成方法名', trigger: 'blur' }]\n            },\n            editMethodDialogVisible: false,\n            editMethodForm: {\n                id: '',\n                name: '',\n                details: '',\n                augmentation_type: 0\n            },\n            editMethodFormRules: {\n                name: [{ required: true, message: '请输入生成类型名', trigger: 'blur' }]\n            },\n            userRight: '',\n            fullscreenLoading: false\n        };\n    },\n    created() {\n        this.userRight = this.$store.state.user_group_name;\n\n        this.getAugList();\n    },\n    methods: {\n        async getAugList() {\n            var param = '';\n            if (this.name !== '') {\n                param = '?name=' + this.name;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + param);\n            console.log('data:', data);\n            if (data.code !== 20000) {\n                return this.$message.error('获取生成类型失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augTypeList = data.data;\n        },\n        async PreciseSearchAug() {\n            if (this.searchAugName === '' && this.searchAugId === '') {\n                return this.$message.error('请输入搜索内容！');\n            }\n            var params = '';\n            if (this.searchAugName && this.searchAugId) {\n                params = params + '?name=' + this.searchAugName + '&id=' + this.searchAugId;\n            } else if (this.searchAugName) {\n                params = params + '?name=' + this.searchAugName;\n            } else if (this.searchAugId) {\n                params = params + '?id=' + this.searchAugId;\n            }\n            const { data: data } = await this.$http.get('/augmentation_type/' + params);\n            if (data.code !== 20000) {\n                return this.$message.error('未精确搜索到该生成类型！');\n            }\n\n            this.augTypeList = [];\n            this.augTypeList.push(data.data);\n        },\n        addAugType() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                if (this.addForm.details === '') {\n                    this.addForm.details = '暂无';\n                }\n                const { data: data } = await this.$http.post('/augmentation_type/', qs.stringify(this.addForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成类型失败！请检查生成类型名是否重复');\n                }\n                this.$message.success('添加生成类型成功！');\n                this.addDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        addDialogClosed() {\n            this.$refs.addFormRef.resetFields();\n        },\n        async removeAugById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成类型, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augTypeList.length == 1) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：系统至少需有一种生成类型');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_type/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成类型失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成类型成功！');\n            this.getAugList();\n        },\n        async showEditDialog(id, name, details) {\n            this.editForm.id = id;\n            this.editForm.name = name;\n            this.editForm.details = details;\n            this.editDialogVisible = true;\n        },\n        editDialogClosed() {\n            this.$refs.editFormRef.resetFields();\n        },\n        // 修改扩增类型\n        editAugTypeInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            // this.fullscreenLoading = true;\n            this.$refs.editFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editForm.id;\n                if (this.editForm.name) {\n                    temp_form['name'] = this.editForm.name;\n                }\n                if (this.editForm.details) {\n                    temp_form['details'] = this.editForm.details;\n                }\n                console.log('temp_form:', temp_form);\n                console.log('this.editForm:', this.editForm);\n                const { data: data } = await this.$http.put('/augmentation_type/', qs.stringify(this.temp_form));\n                loading.close();\n                console.log('data:', data);\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成类型失败！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成类型成功！');\n                this.editDialogVisible = false;\n                this.getAugList();\n            });\n        },\n        async augMethodsById(id) {\n            this.methodDialogVisible = true;\n            const { data: data } = await this.$http.get('/augmentation_method/?augmentation_type=' + id);\n            if (data.code === 45000) {\n                return this.$message.error('该生成类型暂无方法！');\n            }\n            if (data.code !== 20000) {\n                return this.$message.error('查询生成方法失败！' + '错误原因：' + data.msg);\n            }\n\n            this.augMethodList = data.data;\n            var str = JSON.stringify(this.augMethodList);\n        },\n        addMethodDialogClosed() {\n            this.$refs.addMethodFormRef.resetFields();\n        },\n        async addAugMethod() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.addMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n\n                if (this.addMethodForm.details === '') {\n                    this.addMethodForm.details = '暂无';\n                }\n                this.addMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n\n                const { data: data } = await this.$http.post('/augmentation_method/', qs.stringify(this.addMethodForm));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('添加生成方法失败！请检查生成方法名是否重复');\n                }\n                this.$message.success('添加生成方法成功！');\n                this.addMethodDialogVisible = false;\n                this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n            });\n        },\n        showMethodEditDialog(id, name, details) {\n            this.editMethodForm.id = id;\n            this.editMethodForm.name = name;\n            this.editMethodForm.details = details ? details : '暂无';\n            this.editMethodForm.augmentation_type = this.augMethodList[0].augmentation_type_id;\n            this.editMethodDialogVisible = true;\n        },\n        editAugMethodInfo() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.$refs.editMethodFormRef.validate(async valid => {\n                if (!valid) {\n                    loading.close();\n                    return;\n                }\n                var temp_form = {};\n                temp_form['id'] = this.editMethodForm.id;\n                if (this.editMethodForm.name) {\n                    temp_form['name'] = this.editMethodForm.name;\n                }\n                if (this.editMethodForm.details) {\n                    temp_form['details'] = this.editMethodForm.details;\n                }\n                // console.log('temp_form:', temp_form);\n                // console.log('this.editMethodForm:', this.editMethodForm);\n                const { data: data } = await this.$http.put('/augmentation_method/', qs.stringify(temp_form));\n                loading.close();\n                if (data.code !== 20000) {\n                    return this.$message.error('修改生成方法失败，请添加修改！' + '错误原因：' + data.msg);\n                }\n                this.$message.success('修改生成方法成功！');\n                this.editMethodDialogVisible = false;\n                this.augMethodsById(this.editMethodForm.augmentation_type);\n            });\n        },\n        editMethodDialogClosed() {\n            this.$refs.editMethodFormRef.resetFields();\n        },\n        async removeAugMethodById(id) {\n            const confirmResult = await this.$confirm('此操作将永久删除该生成方法, 是否继续?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).catch(err => err);\n            if (confirmResult !== 'confirm') {\n                return this.$message.info('已取消删除');\n            }\n            if (this.augMethodList.length == 1) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：生成类型至少需有一种生成方法');\n            }\n            const { data: data } = await this.$http.delete('/augmentation_method/' + '?id=' + id);\n            if (data.code !== 20000) {\n                return this.$message.error('删除生成方法失败！' + '错误原因：' + data.msg);\n            }\n            this.$message.success('删除生成方法成功！');\n            this.augMethodsById(this.augMethodList[0].augmentation_type_id);\n        },\n        MethodsDialogClosed() {\n            this.augMethodList = [];\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n</script>\n<style scoped>\n.search {\n    margin-bottom: 10px !important;\n}\n.right {\n    margin-right: 5px !important;\n}\n</style>\n"]}]}