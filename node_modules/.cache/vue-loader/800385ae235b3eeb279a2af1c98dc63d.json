{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskAdd.vue","mtime":1637414022000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport qs from 'qs';\nexport default {\n    name: 'baseform',\n    inject: ['reload'],\n    data() {\n        const generate_per_file_and_paramsRule = (rule, value, callback) => {\n            if (value < 1) {\n                callback(new Error('只能为大于等于1整数'));\n            } else {\n                callback();\n            }\n        };\n        const isNum = (rule, value, callback) => {\n            const age = /^[0-9]*$/;\n            if (!age.test(value)) {\n                callback(new Error('只能为非负数字'));\n            } else {\n                callback();\n            }\n        };\n        const isNotNag = (rule, value, callback) => {\n            if (value < 0) {\n                callback(new Error('只能为非负数'));\n            } else {\n                callback();\n            }\n        };\n        return {\n            mark_group: {\n                marks1_2: {\n                    1: '1',\n                    2: '2'\n                },\n                marks0001_2: {\n                    0.001: '0.001',\n                    2: '2'\n                },\n                marks0001_1: {\n                    0.001: '0.001',\n                    1: '1'\n                },\n                marks1_100: {\n                    1: '1',\n                    100: '100'\n                },\n                marks1_1000: {\n                    1: '1',\n                    1000: '1000'\n                },\n                marks1_15000: {\n                    1: '1',\n                    15000: '15000'\n                },\n                marks0_5: {\n                    0: '0',\n                    5: '5'\n                },\n                marks1_5: {\n                    1: '1',\n                    5: '5'\n                }\n            },\n            loading: false,\n            form: {\n                name: '',\n                augmentation_method: null,\n                epsilon: '',\n                domains: [\n                    {\n                        value: 0\n                    }\n                ],\n\n                ite_epsilon2: null,\n                ite_epsilon3: null,\n                ite_limit: null,\n                whether_to_rotate: false,\n                generate_per_file_and_params: null,\n                generate_per_file: null,\n                boundary_constraint: null,\n                strict_mode: false,\n\n                master: this.$store.state.userId,\n                urgency_level: 0,\n                file: {}\n            },\n            methods: [],\n            fileList: [],\n            typeList: [],\n            params_id: 0,\n            is_available_to_submit: true\n            // rules1: {\n            //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }]\n            //     // epsilon: [\n            //     //     { required: true, message: '不能为空', trigger: 'blur' },\n            //     //     { validator: epsilonRule, trigger: 'blur' }\n            //     // ],\n            //     // generate_per_file_and_params: [\n            //     //     { required: true, message: '请输入数字', trigger: 'blur' },\n            //     //     { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n            //     //     { validator: isNum, trigger: 'blur' }\n            //     // ],\n            //     // urgency_level: [\n            //     //     { required: true, message: '请输入数字', trigger: 'blur' },\n            //     //     { validator: isNotNag_int, trigger: 'blur' }\n            //     // ]\n            // },\n            // rules2: {\n            //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n            //     ite_epsilon2: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: isNotNag, trigger: 'blur' }\n            //     ],\n            //     ite_limit: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: isNum, trigger: 'blur' }\n            //     ],\n            //     generate_per_file: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n            //         { validator: isNum, trigger: 'blur' }\n            //     ]\n            // },\n            // rules3: {\n            //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n            //     ite_epsilon3: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: isNotNag, trigger: 'blur' }\n            //     ],\n            //     ite_limit: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: isNum, trigger: 'blur' }\n            //     ],\n            //     generate_per_file: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n            //         { validator: isNum, trigger: 'blur' }\n            //     ],\n            //     boundary_constraint: [\n            //         { required: true, message: '请输入数字', trigger: 'blur' },\n            //         { validator: isNotNag, trigger: 'blur' }\n            //     ]\n            // }\n        };\n    },\n    computed: {\n        rulesList: function() {\n            if (this.params_id === 1) {\n                return this.rules1;\n            } else if (this.params_id === 2) {\n                return this.rules2;\n            } else {\n                return this.rules3;\n            }\n        }\n    },\n    methods: {\n        clickfiletemp() {\n            document.getElementById('filetemp').click();\n        },\n        resetForm(formName) {\n            console.log('formName:', formName);\n\n            this.form.domains = [\n                {\n                    value: 0\n                }\n            ];\n        },\n        removeDomain(item) {\n            if (this.form.domains.length == 1) {\n                this.$message.error('扰动幅度不可为空!');\n            } else {\n                var item_index = this.form.domains.indexOf(item);\n                if (item_index !== -1) {\n                    this.form.domains.splice(item_index, 1);\n                }\n            }\n        },\n        addDomain() {\n            this.form.domains.push({\n                value: 0,\n                key: Date.now()\n            });\n        },\n        trim(str) {\n            return str.replace(/(^s*)|(s*$)/g, '');\n        },\n        onSubmit() {\n            this.loading = true;\n            (this.form.master = this.$store.state.userId),\n                this.$refs.formRef.validate(async valid => {\n                    if (valid) {\n                        if (this.form.augmentation_method === '') {\n                            this.loading = false;\n                            return this.$message.error('请选择生成方法!');\n                        }\n\n                        var adddata = new FormData();\n                        if (this.form.name) {\n                            adddata.append('name', this.form.name);\n                        }\n                        adddata.append('augmentation_method', this.form.augmentation_method);\n                        adddata.append('master', this.form.master);\n                        adddata.append('urgency_level', this.form.urgency_level + '');\n                        var temp_params = {};\n                        if (this.form.augmentation_method === 1) {\n                            var temp = [];\n                            for (var x in this.form.domains) {\n                                console.log('this.form.domains[x][\"value\"]:', this.form.domains[x]['value']);\n                                temp.push(this.form.domains[x]['value']);\n                            }\n                            temp_params.epsilon = '[' + temp.toString() + ']';\n                            // console.log(\"'[' + this.form.epsilon + ']':\", '[' + this.form.epsilon + ']');\n                            temp_params = {\n                                epsilon: temp_params.epsilon,\n                                whether_to_rotate: this.form.whether_to_rotate,\n                                generate_per_file_and_params: this.form.generate_per_file_and_params,\n                                strict_mode: this.form.strict_mode\n                            };\n                        } else if (this.form.augmentation_method === 2) {\n                            temp_params = {\n                                ite_epsilon: this.form.ite_epsilon2 + '',\n                                ite_limit: this.form.ite_limit + '',\n                                whether_to_rotate: this.form.whether_to_rotate,\n                                generate_per_file: this.form.generate_per_file + '',\n                                strict_mode: this.form.strict_mode\n                            };\n                        } else if (this.form.augmentation_method === 3) {\n                            temp_params = {\n                                ite_epsilon: this.form.ite_epsilon3 + '',\n                                ite_limit: this.form.ite_limit + '',\n                                whether_to_rotate: this.form.whether_to_rotate,\n                                generate_per_file: this.form.generate_per_file + '',\n                                boundary_constraint: this.form.boundary_constraint + '',\n                                strict_mode: this.form.strict_mode\n                            };\n                        }\n                        temp_params.whether_to_rotate = this.form.whether_to_rotate ? '1' : '0';\n                        temp_params.strict_mode = this.form.strict_mode ? '1' : '0';\n\n                        temp_params = JSON.stringify(temp_params);\n                        adddata.append('params', temp_params);\n                        this.form.file = document.getElementById('filetemp').files[0];\n\n                        if (this.form.file) {\n                            adddata.append('file', this.form.file);\n                        } else {\n                            this.loading = false;\n                            return this.$message.error('请上传文件！');\n                        }\n\n                        for (var [a, b] of adddata.entries()) {\n                            console.log(a, b);\n                        }\n                        const { data: data } = await this.$http({\n                            url: '/task/',\n                            data: adddata,\n                            method: 'post'\n                        });\n                        if (data.code !== 20000) {\n                            this.loading = false;\n                            return this.$message.error('添加生成任务失败！' + '错误原因：' + data.msg);\n                        }\n                        this.$message.success('提交成功！');\n                        this.reload();\n                    } else {\n                        this.loading = false;\n                    }\n                });\n        },\n        async methodChanged(method_id) {\n            this.params_id = method_id;\n            this.form.augmentation_method = this.params_id;\n\n            this.is_available_to_submit = false;\n        },\n        fileLoad() {\n            const selectedFile = this.$refs.lidar_t_file_ref.files[0];\n            // console.log('selectedFile:', selectedFile);\n            if (selectedFile == undefined) {\n                document.getElementById('inputFileAgent').value = '';\n            } else {\n                let fileName = selectedFile.name;\n                let pos = fileName.lastIndexOf('.');\n                let lastName = fileName.substring(pos, fileName.length);\n                console.log(lastName, lastName.toLowerCase());\n                console.log('lastName:', lastName);\n                if (pos != -1 && lastName.toLowerCase() !== '.zip') {\n                    this.$message.error({\n                        showClose: true,\n                        message: 'The type of uploaded file is limited to no suffix or \".zip\".',\n                        offset: 70\n                    });\n                    // this.$refs.lidar_t_file_ref.clearFiles;\n                    this.$refs.lidar_t_file_ref.value = ''; // 清空file文件\n                    return false;\n                }\n\n                this.form.file = selectedFile;\n                var str = document.getElementById('filetemp').value;\n                str = str.split('\\\\')[str.split('\\\\').length - 1];\n                document.getElementById('inputFileAgent').value = str;\n            }\n        },\n        clickLoad() {\n            this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n        },\n        async getTypeList() {\n            const { data: data } = await this.$http.get('/augmentation_type/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取任务列表失败！' + '错误原因：' + data.msg);\n            }\n\n            this.typeList = data.data;\n        }\n    },\n    async mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n\n        var id = 1;\n        const { data: data } = await this.$http.get('/augmentation_method/?augmentation_type=' + id);\n        if (data.code === 45000) {\n            return this.$message.error('该生成类型暂无方法！');\n        }\n        if (data.code !== 20000) {\n            return this.$message.error('查询生成方法失败！' + '错误原因：' + data.msg);\n        }\n        this.methods = data.data.filter(item => {\n            return item.augmentation_type_id === id;\n        });\n    },\n    created() {\n        this.getTypeList();\n    }\n};\n",null]}