{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Table.vue","mtime":1636387678000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nimport qs from 'qs';\nimport fileDownload from 'js-file-download';\nimport JSZip from 'jszip';\nimport { number } from 'echarts';\nexport default {\n    // props: ['taskList'],\n    props: {\n        taskList: {\n            type: Array,\n            require: true\n        },\n        is_root: {\n            type: String,\n            require: true\n        },\n        show_point_preview: {\n            type: Number,\n            require: false\n        },\n        show_image_preview: {\n            type: Number,\n            require: false\n        }\n    },\n    methods: {\n        //     async generate_change(type) {\n        //         if (type == '本用户') {\n        //             let search_params = '/task/augmentation_method/search/?augmentation_method=' + this.generate_func_self;\n        //             const { data: data } = await this.$http.get(search_params);\n        //             if (data.code !== 20000) {\n        //                 return this.$message.error('未搜索到该任务！');\n        //             }\n        //             this.taskList_Self = data.data.details;\n        //             this.totalPageNum = data.data.pages;\n        //         } else {\n        //             let search_params = '/task/augmentation_method/admin/search/?augmentation_method=' + this.generate_func_all;\n        //             const { data: data } = await this.$http.get(search_params);\n        //             if (data.code !== 20000) {\n        //                 return this.$message.error('未搜索到该任务！');\n        //             }\n        //             this.taskList_All = data.data.details;\n        //             this.totalPageNum = data.data.pages;\n        //         }\n        //     },\n        //     changeAxios_xz() {\n        //         for (var i in this.originalPointCloudData) {\n        //             [this.originalPointCloudData[i][0], this.originalPointCloudData[i][2]] = [\n        //                 this.originalPointCloudData[i][2],\n        //                 this.originalPointCloudData[i][0]\n        //             ];\n        //         }\n        //         for (var i in this.generatePointCloudData) {\n        //             [this.generatePointCloudData[i][0], this.generatePointCloudData[i][2]] = [\n        //                 this.generatePointCloudData[i][2],\n        //                 this.generatePointCloudData[i][0]\n        //             ];\n        //         }\n        //         this.get_preview();\n        //     },\n        //     changeAxios_yz() {\n        //         for (var i in this.originalPointCloudData) {\n        //             [this.originalPointCloudData[i][1], this.originalPointCloudData[i][2]] = [\n        //                 this.originalPointCloudData[i][2],\n        //                 this.originalPointCloudData[i][1]\n        //             ];\n        //         }\n        //         for (var i in this.generatePointCloudData) {\n        //             [this.generatePointCloudData[i][1], this.generatePointCloudData[i][2]] = [\n        //                 this.generatePointCloudData[i][2],\n        //                 this.generatePointCloudData[i][1]\n        //             ];\n        //         }\n        //         this.get_preview();\n        //     },\n        //     changeAxios_xy() {\n        //         for (var i in this.originalPointCloudData) {\n        //             [this.originalPointCloudData[i][0], this.originalPointCloudData[i][1]] = [\n        //                 this.originalPointCloudData[i][1],\n        //                 this.originalPointCloudData[i][0]\n        //             ];\n        //         }\n        //         for (var i in this.generatePointCloudData) {\n        //             [this.generatePointCloudData[i][0], this.generatePointCloudData[i][1]] = [\n        //                 this.generatePointCloudData[i][1],\n        //                 this.generatePointCloudData[i][0]\n        //             ];\n        //         }\n        //         this.get_preview();\n        //     },\n        //     async taskException() {\n        //         this.$confirm('是否确定将该任务标记成异常状态？')\n        //             .then(async _ => {\n        //                 var adddata = new FormData();\n        //                 adddata.append('task_id', this.methodDetail.id);\n        //                 const { data: data } = await this.$http({\n        //                     url: '/task/exception/',\n        //                     data: adddata,\n        //                     method: 'post'\n        //                 });\n        //                 if (data.code !== 20000) {\n        //                     return this.$message.error('添加生成任务失败！' + '错误原因：' + data.msg);\n        //                 }\n        //                 this.$message.success('标记成异常成功！');\n        //             })\n        //             .catch(_ => {});\n        //     },\n        async getTaskList_Self() {\n            this.$emit('getList', 0);\n        },\n        async getTaskList_All() {\n            this.$emit('getList', 1);\n        },\n\n        removeTaskById(task_id) {\n            console.log('task_id:', task_id);\n            this.$emit('delete', task_id);\n        },\n        showEditDialog(row) {\n            console.log('row:', row);\n            this.$emit('showEditDialog', row);\n        },\n        editDialogClosed() {\n            this.$emit('editDialogClosed');\n        },\n        originalfileDownload(task_id, flag) {\n            var data = {\n                task_id: task_id,\n                flag: flag\n            };\n            this.$emit('originalfileDownload', data);\n        },\n        generatefileDownload(task_id, flag) {\n            var data = {\n                task_id: task_id,\n                flag: flag\n            };\n            this.$emit('generatefileDownload', data);\n        },\n\n        point_cloud_preview(task_id) {\n            this.$emit('point_cloud_preview', task_id);\n        },\n        image_preview(task_id) {\n            this.$emit('image_preview', task_id);\n        },\n        isBlank_num(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = '-- --';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            return value;\n        },\n        isBlank_start(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = 'Wait to start';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n            return value;\n        },\n        isBlank_end(scope) {\n            let key = scope.column.property,\n                item = scope.row[key],\n                value = 'Processing';\n            if (item === 0 || item === false || item) {\n                value = item;\n            }\n            if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n            return value;\n        },\n        MethodDetail(id) {\n            this.$emit('MethodDetail', id);\n        },\n        methodDialogClose() {\n            this.$emit('methodDialogClose');\n        }\n    },\n    mounted() {\n        console.log('taskList:', this.taskList);\n    }\n};\n",null]}