{"remainingRequest":"E:\\LidarPlatformFrontend-main\\node_modules\\babel-loader\\lib\\index.js!E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\LidarPlatformFrontend-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-main\\src\\components\\page\\System_Setting.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\LidarPlatformFrontend-main\\src\\components\\page\\System_Setting.vue","mtime":1628741922000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/LidarPlatformFrontend-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      micro_service_List: [],\n      userRight: ''\n    };\n  },\n  created: function created() {\n    this.userRight = window.sessionStorage.getItem('user_group_name');\n  },\n  methods: {\n    resetService: function () {\n      var _resetService = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$confirm('!警告：该操作不可逆，是否重置所有微服务？').then( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_) {\n                    var _yield$_this$$http, data;\n\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return _this.$http({\n                              url: '/micro_service/',\n                              method: 'post'\n                            });\n\n                          case 2:\n                            _yield$_this$$http = _context.sent;\n                            data = _yield$_this$$http.data;\n\n                            if (!(data.code !== 20000)) {\n                              _context.next = 6;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", _this.$message.error('重置微服务失败！' + '错误原因：' + data.msg));\n\n                          case 6:\n                            _this.$message.success('重置微服务成功！');\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()).catch(function (_) {});\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function resetService() {\n        return _resetService.apply(this, arguments);\n      }\n\n      return resetService;\n    }(),\n    update: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _yield$this$$http$get, data, i, temp, info, j, temp_info;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.micro_service_List = [];\n                this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n                _context3.next = 4;\n                return this.$http.get('/micro_service/');\n\n              case 4:\n                _yield$this$$http$get = _context3.sent;\n                data = _yield$this$$http$get.data;\n\n                if (!(data.code !== 20000)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('获取微服务信息失败！' + '错误原因：' + data.msg));\n\n              case 8:\n                for (i in data.data) {\n                  temp = {}, info = [];\n                  temp['micro_service_name'] = i;\n\n                  for (j in data.data[i]) {\n                    temp_info = {};\n                    temp_info['IP_and_port'] = j;\n\n                    if (data.data[i][j]) {\n                      temp_info['state'] = '空闲';\n                    } else {\n                      temp_info['state'] = '忙碌';\n                    }\n\n                    info.push(temp_info);\n                  }\n\n                  temp['info'] = info;\n                  this.micro_service_List.push(temp);\n                }\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function update() {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this.update();\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }()\n};",{"version":3,"sources":["System_Setting.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,kBAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA;AAFA,KAAA;AAIA,GANA;AAOA,EAAA,OAPA,qBAOA;AACA,SAAA,SAAA,GAAA,MAAA,CAAA,cAAA,CAAA,OAAA,CAAA,iBAAA,CAAA;AACA,GATA;AAUA,EAAA,OAAA,EAAA;AACA,IAAA,YADA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA,qBAAA,QAAA,CAAA,uBAAA,EACA,IADA;AAAA,qFACA,iBAAA,CAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEA,KAAA,CAAA,KAAA,CAAA;AACA,8BAAA,GAAA,EAAA,iBADA;AAEA,8BAAA,MAAA,EAAA;AAFA,6BAAA,CAFA;;AAAA;AAAA;AAEA,4BAAA,IAFA,sBAEA,IAFA;;AAAA,kCAMA,IAAA,CAAA,IAAA,KAAA,KANA;AAAA;AAAA;AAAA;;AAAA,6DASA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,aAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CATA;;AAAA;AAWA,4BAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA;;AAAA;AAAA;AAAA;AAAA,qBAcA,KAdA,CAcA,UAAA,CAAA,EAAA,CAEA,CAhBA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAoBA,IAAA,MApBA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAqBA,qBAAA,kBAAA,GAAA,EAAA;AACA,qBAAA,MAAA,CAAA,MAAA,CAAA,WAAA,EAAA,cAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AAtBA;AAAA,uBAuBA,KAAA,KAAA,CAAA,GAAA,CAAA,iBAAA,CAvBA;;AAAA;AAAA;AAuBA,gBAAA,IAvBA,yBAuBA,IAvBA;;AAAA,sBAyBA,IAAA,CAAA,IAAA,KAAA,KAzBA;AAAA;AAAA;AAAA;;AAAA,kDA4BA,KAAA,QAAA,CAAA,KAAA,CAAA,eAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CA5BA;;AAAA;AA8BA,qBAAA,CAAA,IAAA,IAAA,CAAA,IAAA,EAAA;AACA,kBAAA,IADA,GACA,EADA,EAEA,IAFA,GAEA,EAFA;AAGA,kBAAA,IAAA,CAAA,oBAAA,CAAA,GAAA,CAAA;;AACA,uBAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA;AACA,oBAAA,SADA,GACA,EADA;AAEA,oBAAA,SAAA,CAAA,aAAA,CAAA,GAAA,CAAA;;AACA,wBAAA,IAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA;AACA,sBAAA,SAAA,CAAA,OAAA,CAAA,GAAA,IAAA;AACA,qBAFA,MAEA;AACA,sBAAA,SAAA,CAAA,OAAA,CAAA,GAAA,IAAA;AACA;;AACA,oBAAA,IAAA,CAAA,IAAA,CAAA,SAAA;AACA;;AACA,kBAAA,IAAA,CAAA,MAAA,CAAA,GAAA,IAAA;AACA,uBAAA,kBAAA,CAAA,IAAA,CAAA,IAAA;AACA;;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GAVA;AA4DA,EAAA,OA5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DA,mBAAA,MAAA;;AA7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAA","sourcesContent":["<template>\n    <div>\n        <div class=\"crumbs\">\n            <el-breadcrumb separator=\"/\">\n                <el-breadcrumb-item> <i class=\"el-icon-s-tools\"></i> 管理系统 </el-breadcrumb-item>\n                <el-breadcrumb-item>系统设置</el-breadcrumb-item>\n            </el-breadcrumb>\n        </div>\n        <el-card>\n            <el-button v-if=\"this.userRight === '超级管理员'\" @click=\"resetService\" type=\"danger\" style=\"margin-bottom: 10px\"\n                >重置所有微服务</el-button\n            >\n            <el-button type=\"primary\" @click=\"update\" style=\"margin-bottom: 10px\">刷新</el-button>\n            <el-table :data=\"micro_service_List\" style=\"width: 99%\" stripe>\n                <el-table-column type=\"index\"></el-table-column>\n                <el-table-column type=\"expand\" style=\"background: rgba(150, 154, 184, 0.05)\">\n                    <template slot-scope=\"scope\">\n                        <el-table :data=\"scope.row.info\" style=\"width: 360px\">\n                            <el-table-column prop=\"IP_and_port\" label=\"IP与端口\" width=\"180\"></el-table-column>\n                            <el-table-column prop=\"state\" label=\"状态\" width=\"180\"> </el-table-column>\n                        </el-table>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"micro_service_name\" label=\"微服务名称\" align=\"left\"> </el-table-column>\n            </el-table>\n        </el-card>\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            micro_service_List: [],\n            userRight: ''\n        };\n    },\n    created() {\n        this.userRight = window.sessionStorage.getItem('user_group_name');\n    },\n    methods: {\n        async resetService() {\n            this.$confirm('!警告：该操作不可逆，是否重置所有微服务？')\n                .then(async (_) => {\n                    \n                    const { data: data } = await this.$http({\n                        url: '/micro_service/',\n                        method: 'post'\n                    });\n                    if (data.code !== 20000) {\n                        \n                        \n                        return this.$message.error('重置微服务失败！' + '错误原因：' + data.msg);\n                    }\n                    this.$message.success('重置微服务成功！');\n                })\n                .catch((_) => {\n                    \n                });\n        },\n        async update() {\n            this.micro_service_List = [];\n            this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n            const { data: data } = await this.$http.get('/micro_service/');\n            \n            if (data.code !== 20000) {\n                \n                \n                return this.$message.error('获取微服务信息失败！' + '错误原因：' + data.msg);\n            }\n            for (var i in data.data) {\n                var temp = {},\n                    info = [];\n                temp['micro_service_name'] = i;\n                for (var j in data.data[i]) {\n                    let temp_info = {};\n                    temp_info['IP_and_port'] = j;\n                    if (data.data[i][j]) {\n                        temp_info['state'] = '空闲';\n                    } else {\n                        temp_info['state'] = '忙碌';\n                    }\n                    info.push(temp_info);\n                }\n                temp['info'] = info;\n                this.micro_service_List.push(temp);\n            }\n            \n        }\n    },\n    async mounted() {\n        this.update();\n    }\n};\n</script>\n<style scoped></style>\n"],"sourceRoot":"src/components/page"}]}