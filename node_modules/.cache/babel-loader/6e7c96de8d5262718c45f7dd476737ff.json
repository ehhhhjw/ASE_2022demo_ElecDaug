{"remainingRequest":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskAdd.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_AugTaskAdd.vue","mtime":1637414022000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _slicedToArray from \"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport qs from 'qs';\nexport default {\n  name: 'baseform',\n  inject: ['reload'],\n  data: function data() {\n    var generate_per_file_and_paramsRule = function generate_per_file_and_paramsRule(rule, value, callback) {\n      if (value < 1) {\n        callback(new Error('只能为大于等于1整数'));\n      } else {\n        callback();\n      }\n    };\n\n    var isNum = function isNum(rule, value, callback) {\n      var age = /^[0-9]*$/;\n\n      if (!age.test(value)) {\n        callback(new Error('只能为非负数字'));\n      } else {\n        callback();\n      }\n    };\n\n    var isNotNag = function isNotNag(rule, value, callback) {\n      if (value < 0) {\n        callback(new Error('只能为非负数'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      mark_group: {\n        marks1_2: {\n          1: '1',\n          2: '2'\n        },\n        marks0001_2: {\n          0.001: '0.001',\n          2: '2'\n        },\n        marks0001_1: {\n          0.001: '0.001',\n          1: '1'\n        },\n        marks1_100: {\n          1: '1',\n          100: '100'\n        },\n        marks1_1000: {\n          1: '1',\n          1000: '1000'\n        },\n        marks1_15000: {\n          1: '1',\n          15000: '15000'\n        },\n        marks0_5: {\n          0: '0',\n          5: '5'\n        },\n        marks1_5: {\n          1: '1',\n          5: '5'\n        }\n      },\n      loading: false,\n      form: {\n        name: '',\n        augmentation_method: null,\n        epsilon: '',\n        domains: [{\n          value: 0\n        }],\n        ite_epsilon2: null,\n        ite_epsilon3: null,\n        ite_limit: null,\n        whether_to_rotate: false,\n        generate_per_file_and_params: null,\n        generate_per_file: null,\n        boundary_constraint: null,\n        strict_mode: false,\n        master: this.$store.state.userId,\n        urgency_level: 0,\n        file: {}\n      },\n      methods: [],\n      fileList: [],\n      typeList: [],\n      params_id: 0,\n      is_available_to_submit: true // rules1: {\n      //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }]\n      //     // epsilon: [\n      //     //     { required: true, message: '不能为空', trigger: 'blur' },\n      //     //     { validator: epsilonRule, trigger: 'blur' }\n      //     // ],\n      //     // generate_per_file_and_params: [\n      //     //     { required: true, message: '请输入数字', trigger: 'blur' },\n      //     //     { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n      //     //     { validator: isNum, trigger: 'blur' }\n      //     // ],\n      //     // urgency_level: [\n      //     //     { required: true, message: '请输入数字', trigger: 'blur' },\n      //     //     { validator: isNotNag_int, trigger: 'blur' }\n      //     // ]\n      // },\n      // rules2: {\n      //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n      //     ite_epsilon2: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: isNotNag, trigger: 'blur' }\n      //     ],\n      //     ite_limit: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: isNum, trigger: 'blur' }\n      //     ],\n      //     generate_per_file: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n      //         { validator: isNum, trigger: 'blur' }\n      //     ]\n      // },\n      // rules3: {\n      //     augmentation_method: [{ required: true, message: '不能为空', trigger: 'change' }],\n      //     ite_epsilon3: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: isNotNag, trigger: 'blur' }\n      //     ],\n      //     ite_limit: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: isNum, trigger: 'blur' }\n      //     ],\n      //     generate_per_file: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: generate_per_file_and_paramsRule, trigger: 'blur' },\n      //         { validator: isNum, trigger: 'blur' }\n      //     ],\n      //     boundary_constraint: [\n      //         { required: true, message: '请输入数字', trigger: 'blur' },\n      //         { validator: isNotNag, trigger: 'blur' }\n      //     ]\n      // }\n\n    };\n  },\n  computed: {\n    rulesList: function rulesList() {\n      if (this.params_id === 1) {\n        return this.rules1;\n      } else if (this.params_id === 2) {\n        return this.rules2;\n      } else {\n        return this.rules3;\n      }\n    }\n  },\n  methods: {\n    clickfiletemp: function clickfiletemp() {\n      document.getElementById('filetemp').click();\n    },\n    resetForm: function resetForm(formName) {\n      console.log('formName:', formName);\n      this.form.domains = [{\n        value: 0\n      }];\n    },\n    removeDomain: function removeDomain(item) {\n      if (this.form.domains.length == 1) {\n        this.$message.error('扰动幅度不可为空!');\n      } else {\n        var item_index = this.form.domains.indexOf(item);\n\n        if (item_index !== -1) {\n          this.form.domains.splice(item_index, 1);\n        }\n      }\n    },\n    addDomain: function addDomain() {\n      this.form.domains.push({\n        value: 0,\n        key: Date.now()\n      });\n    },\n    trim: function trim(str) {\n      return str.replace(/(^s*)|(s*$)/g, '');\n    },\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      this.loading = true;\n      this.form.master = this.$store.state.userId, this.$refs.formRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var adddata, temp_params, temp, x, _iterator, _step, _step$value, a, b, _yield$_this$$http, data;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!valid) {\n                    _context.next = 35;\n                    break;\n                  }\n\n                  if (!(_this.form.augmentation_method === '')) {\n                    _context.next = 4;\n                    break;\n                  }\n\n                  _this.loading = false;\n                  return _context.abrupt(\"return\", _this.$message.error('请选择生成方法!'));\n\n                case 4:\n                  adddata = new FormData();\n\n                  if (_this.form.name) {\n                    adddata.append('name', _this.form.name);\n                  }\n\n                  adddata.append('augmentation_method', _this.form.augmentation_method);\n                  adddata.append('master', _this.form.master);\n                  adddata.append('urgency_level', _this.form.urgency_level + '');\n                  temp_params = {};\n\n                  if (_this.form.augmentation_method === 1) {\n                    temp = [];\n\n                    for (x in _this.form.domains) {\n                      console.log('this.form.domains[x][\"value\"]:', _this.form.domains[x]['value']);\n                      temp.push(_this.form.domains[x]['value']);\n                    }\n\n                    temp_params.epsilon = '[' + temp.toString() + ']'; // console.log(\"'[' + this.form.epsilon + ']':\", '[' + this.form.epsilon + ']');\n\n                    temp_params = {\n                      epsilon: temp_params.epsilon,\n                      whether_to_rotate: _this.form.whether_to_rotate,\n                      generate_per_file_and_params: _this.form.generate_per_file_and_params,\n                      strict_mode: _this.form.strict_mode\n                    };\n                  } else if (_this.form.augmentation_method === 2) {\n                    temp_params = {\n                      ite_epsilon: _this.form.ite_epsilon2 + '',\n                      ite_limit: _this.form.ite_limit + '',\n                      whether_to_rotate: _this.form.whether_to_rotate,\n                      generate_per_file: _this.form.generate_per_file + '',\n                      strict_mode: _this.form.strict_mode\n                    };\n                  } else if (_this.form.augmentation_method === 3) {\n                    temp_params = {\n                      ite_epsilon: _this.form.ite_epsilon3 + '',\n                      ite_limit: _this.form.ite_limit + '',\n                      whether_to_rotate: _this.form.whether_to_rotate,\n                      generate_per_file: _this.form.generate_per_file + '',\n                      boundary_constraint: _this.form.boundary_constraint + '',\n                      strict_mode: _this.form.strict_mode\n                    };\n                  }\n\n                  temp_params.whether_to_rotate = _this.form.whether_to_rotate ? '1' : '0';\n                  temp_params.strict_mode = _this.form.strict_mode ? '1' : '0';\n                  temp_params = JSON.stringify(temp_params);\n                  adddata.append('params', temp_params);\n                  _this.form.file = document.getElementById('filetemp').files[0];\n\n                  if (!_this.form.file) {\n                    _context.next = 20;\n                    break;\n                  }\n\n                  adddata.append('file', _this.form.file);\n                  _context.next = 22;\n                  break;\n\n                case 20:\n                  _this.loading = false;\n                  return _context.abrupt(\"return\", _this.$message.error('请上传文件！'));\n\n                case 22:\n                  _iterator = _createForOfIteratorHelper(adddata.entries());\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      _step$value = _slicedToArray(_step.value, 2), a = _step$value[0], b = _step$value[1];\n                      console.log(a, b);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  _context.next = 26;\n                  return _this.$http({\n                    url: '/task/',\n                    data: adddata,\n                    method: 'post'\n                  });\n\n                case 26:\n                  _yield$_this$$http = _context.sent;\n                  data = _yield$_this$$http.data;\n\n                  if (!(data.code !== 20000)) {\n                    _context.next = 31;\n                    break;\n                  }\n\n                  _this.loading = false;\n                  return _context.abrupt(\"return\", _this.$message.error('添加生成任务失败！' + '错误原因：' + data.msg));\n\n                case 31:\n                  _this.$message.success('提交成功！');\n\n                  _this.reload();\n\n                  _context.next = 36;\n                  break;\n\n                case 35:\n                  _this.loading = false;\n\n                case 36:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    methodChanged: function () {\n      var _methodChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(method_id) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.params_id = method_id;\n                this.form.augmentation_method = this.params_id;\n                this.is_available_to_submit = false;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function methodChanged(_x2) {\n        return _methodChanged.apply(this, arguments);\n      }\n\n      return methodChanged;\n    }(),\n    fileLoad: function fileLoad() {\n      var selectedFile = this.$refs.lidar_t_file_ref.files[0]; // console.log('selectedFile:', selectedFile);\n\n      if (selectedFile == undefined) {\n        document.getElementById('inputFileAgent').value = '';\n      } else {\n        var fileName = selectedFile.name;\n        var pos = fileName.lastIndexOf('.');\n        var lastName = fileName.substring(pos, fileName.length);\n        console.log(lastName, lastName.toLowerCase());\n        console.log('lastName:', lastName);\n\n        if (pos != -1 && lastName.toLowerCase() !== '.zip') {\n          this.$message.error({\n            showClose: true,\n            message: 'The type of uploaded file is limited to no suffix or \".zip\".',\n            offset: 70\n          }); // this.$refs.lidar_t_file_ref.clearFiles;\n\n          this.$refs.lidar_t_file_ref.value = ''; // 清空file文件\n\n          return false;\n        }\n\n        this.form.file = selectedFile;\n        var str = document.getElementById('filetemp').value;\n        str = str.split('\\\\')[str.split('\\\\').length - 1];\n        document.getElementById('inputFileAgent').value = str;\n      }\n    },\n    clickLoad: function clickLoad() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    getTypeList: function () {\n      var _getTypeList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _yield$this$$http$get, data;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.$http.get('/augmentation_type/');\n\n              case 2:\n                _yield$this$$http$get = _context3.sent;\n                data = _yield$this$$http$get.data;\n\n                if (!(data.code !== 20000)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('获取任务列表失败！' + '错误原因：' + data.msg));\n\n              case 6:\n                this.typeList = data.data;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getTypeList() {\n        return _getTypeList.apply(this, arguments);\n      }\n\n      return getTypeList;\n    }()\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var id, _yield$this$$http$get2, data;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n              id = 1;\n              _context4.next = 4;\n              return this.$http.get('/augmentation_method/?augmentation_type=' + id);\n\n            case 4:\n              _yield$this$$http$get2 = _context4.sent;\n              data = _yield$this$$http$get2.data;\n\n              if (!(data.code === 45000)) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", this.$message.error('该生成类型暂无方法！'));\n\n            case 8:\n              if (!(data.code !== 20000)) {\n                _context4.next = 10;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", this.$message.error('查询生成方法失败！' + '错误原因：' + data.msg));\n\n            case 10:\n              this.methods = data.data.filter(function (item) {\n                return item.augmentation_type_id === id;\n              });\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  created: function created() {\n    this.getTypeList();\n  }\n};",null]}