{"remainingRequest":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/src/components/page/Table.vue","mtime":1636387678000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hejiawei/Desktop/LidarPlatformFrontend-hjw 2/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nimport qs from 'qs';\nimport fileDownload from 'js-file-download';\nimport JSZip from 'jszip';\nimport { number } from 'echarts';\nexport default {\n  // props: ['taskList'],\n  props: {\n    taskList: {\n      type: Array,\n      require: true\n    },\n    is_root: {\n      type: String,\n      require: true\n    },\n    show_point_preview: {\n      type: Number,\n      require: false\n    },\n    show_image_preview: {\n      type: Number,\n      require: false\n    }\n  },\n  methods: {\n    //     async generate_change(type) {\n    //         if (type == '本用户') {\n    //             let search_params = '/task/augmentation_method/search/?augmentation_method=' + this.generate_func_self;\n    //             const { data: data } = await this.$http.get(search_params);\n    //             if (data.code !== 20000) {\n    //                 return this.$message.error('未搜索到该任务！');\n    //             }\n    //             this.taskList_Self = data.data.details;\n    //             this.totalPageNum = data.data.pages;\n    //         } else {\n    //             let search_params = '/task/augmentation_method/admin/search/?augmentation_method=' + this.generate_func_all;\n    //             const { data: data } = await this.$http.get(search_params);\n    //             if (data.code !== 20000) {\n    //                 return this.$message.error('未搜索到该任务！');\n    //             }\n    //             this.taskList_All = data.data.details;\n    //             this.totalPageNum = data.data.pages;\n    //         }\n    //     },\n    //     changeAxios_xz() {\n    //         for (var i in this.originalPointCloudData) {\n    //             [this.originalPointCloudData[i][0], this.originalPointCloudData[i][2]] = [\n    //                 this.originalPointCloudData[i][2],\n    //                 this.originalPointCloudData[i][0]\n    //             ];\n    //         }\n    //         for (var i in this.generatePointCloudData) {\n    //             [this.generatePointCloudData[i][0], this.generatePointCloudData[i][2]] = [\n    //                 this.generatePointCloudData[i][2],\n    //                 this.generatePointCloudData[i][0]\n    //             ];\n    //         }\n    //         this.get_preview();\n    //     },\n    //     changeAxios_yz() {\n    //         for (var i in this.originalPointCloudData) {\n    //             [this.originalPointCloudData[i][1], this.originalPointCloudData[i][2]] = [\n    //                 this.originalPointCloudData[i][2],\n    //                 this.originalPointCloudData[i][1]\n    //             ];\n    //         }\n    //         for (var i in this.generatePointCloudData) {\n    //             [this.generatePointCloudData[i][1], this.generatePointCloudData[i][2]] = [\n    //                 this.generatePointCloudData[i][2],\n    //                 this.generatePointCloudData[i][1]\n    //             ];\n    //         }\n    //         this.get_preview();\n    //     },\n    //     changeAxios_xy() {\n    //         for (var i in this.originalPointCloudData) {\n    //             [this.originalPointCloudData[i][0], this.originalPointCloudData[i][1]] = [\n    //                 this.originalPointCloudData[i][1],\n    //                 this.originalPointCloudData[i][0]\n    //             ];\n    //         }\n    //         for (var i in this.generatePointCloudData) {\n    //             [this.generatePointCloudData[i][0], this.generatePointCloudData[i][1]] = [\n    //                 this.generatePointCloudData[i][1],\n    //                 this.generatePointCloudData[i][0]\n    //             ];\n    //         }\n    //         this.get_preview();\n    //     },\n    //     async taskException() {\n    //         this.$confirm('是否确定将该任务标记成异常状态？')\n    //             .then(async _ => {\n    //                 var adddata = new FormData();\n    //                 adddata.append('task_id', this.methodDetail.id);\n    //                 const { data: data } = await this.$http({\n    //                     url: '/task/exception/',\n    //                     data: adddata,\n    //                     method: 'post'\n    //                 });\n    //                 if (data.code !== 20000) {\n    //                     return this.$message.error('添加生成任务失败！' + '错误原因：' + data.msg);\n    //                 }\n    //                 this.$message.success('标记成异常成功！');\n    //             })\n    //             .catch(_ => {});\n    //     },\n    getTaskList_Self: function () {\n      var _getTaskList_Self = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$emit('getList', 0);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTaskList_Self() {\n        return _getTaskList_Self.apply(this, arguments);\n      }\n\n      return getTaskList_Self;\n    }(),\n    getTaskList_All: function () {\n      var _getTaskList_All = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.$emit('getList', 1);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTaskList_All() {\n        return _getTaskList_All.apply(this, arguments);\n      }\n\n      return getTaskList_All;\n    }(),\n    removeTaskById: function removeTaskById(task_id) {\n      console.log('task_id:', task_id);\n      this.$emit('delete', task_id);\n    },\n    showEditDialog: function showEditDialog(row) {\n      console.log('row:', row);\n      this.$emit('showEditDialog', row);\n    },\n    editDialogClosed: function editDialogClosed() {\n      this.$emit('editDialogClosed');\n    },\n    originalfileDownload: function originalfileDownload(task_id, flag) {\n      var data = {\n        task_id: task_id,\n        flag: flag\n      };\n      this.$emit('originalfileDownload', data);\n    },\n    generatefileDownload: function generatefileDownload(task_id, flag) {\n      var data = {\n        task_id: task_id,\n        flag: flag\n      };\n      this.$emit('generatefileDownload', data);\n    },\n    point_cloud_preview: function point_cloud_preview(task_id) {\n      this.$emit('point_cloud_preview', task_id);\n    },\n    image_preview: function image_preview(task_id) {\n      this.$emit('image_preview', task_id);\n    },\n    isBlank_num: function isBlank_num(scope) {\n      var key = scope.column.property,\n          item = scope.row[key],\n          value = '-- --';\n\n      if (item === 0 || item === false || item) {\n        value = item;\n      }\n\n      return value;\n    },\n    isBlank_start: function isBlank_start(scope) {\n      var key = scope.column.property,\n          item = scope.row[key],\n          value = 'Wait to start';\n\n      if (item === 0 || item === false || item) {\n        value = item;\n      }\n\n      if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n      return value;\n    },\n    isBlank_end: function isBlank_end(scope) {\n      var key = scope.column.property,\n          item = scope.row[key],\n          value = 'Processing';\n\n      if (item === 0 || item === false || item) {\n        value = item;\n      }\n\n      if (typeof value == 'string') value = value.split('+')[0].split('.')[0];\n      return value;\n    },\n    MethodDetail: function MethodDetail(id) {\n      this.$emit('MethodDetail', id);\n    },\n    methodDialogClose: function methodDialogClose() {\n      this.$emit('methodDialogClose');\n    }\n  },\n  mounted: function mounted() {\n    console.log('taskList:', this.taskList);\n  }\n};",null]}