{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_Input_Data.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_A_Input_Data.vue","mtime":1636388054000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n  data: function data() {\n    return {\n      fileList: [],\n      pointCloudData: [],\n      pointCloudData_new: [],\n      option: [],\n      option1: [],\n      originalPointCloudData: [],\n      generatePointCloudData: [],\n      maxAxisValue: -10000,\n      minAxisValue: 10000,\n      maxLightValue: -10000,\n      minLightValue: 10000,\n      original_buttom: false,\n      generate_buttom: false,\n      original_loading: false,\n      generate_loading: false\n    };\n  },\n  methods: {\n    make_format_data: function make_format_data(points_name, pointscloud, flag) {\n      var _this = this;\n\n      var is_3d_data = 0;\n      var format_data = null;\n      var dot = points_name.lastIndexOf('.');\n\n      if (dot === -1) {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '100';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n        return is_3d_data;\n      }\n\n      var data_type = points_name.substr(dot);\n\n      if (data_type === '.ply') {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        var end_header_index = -1;\n\n        for (var i in format_data) {\n          if (format_data[i] === 'end_header') {\n            end_header_index = i;\n          }\n        }\n\n        format_data = format_data.splice(parseInt(end_header_index) + 1, format_data.length - parseInt(end_header_index) - 1);\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '100';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n      } else if (data_type === '.txt') {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '10';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n      } else if (data_type === '.bin') {}\n\n      return is_3d_data;\n    },\n    changeAxios_yz: function changeAxios_yz() {\n      for (var i in this.originalPointCloudData) {\n        var _ref = [this.originalPointCloudData[i][2], this.originalPointCloudData[i][1]];\n        this.originalPointCloudData[i][1] = _ref[0];\n        this.originalPointCloudData[i][2] = _ref[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: 'Lidar 3D point cloud (original data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_xz: function changeAxios_xz() {\n      for (var i in this.originalPointCloudData) {\n        var _ref2 = [this.originalPointCloudData[i][2], this.originalPointCloudData[i][0]];\n        this.originalPointCloudData[i][0] = _ref2[0];\n        this.originalPointCloudData[i][2] = _ref2[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: 'Lidar 3D point cloud (original data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_xy: function changeAxios_xy() {\n      for (var i in this.originalPointCloudData) {\n        var _ref3 = [this.originalPointCloudData[i][1], this.originalPointCloudData[i][0]];\n        this.originalPointCloudData[i][0] = _ref3[0];\n        this.originalPointCloudData[i][1] = _ref3[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: 'Lidar 3D point cloud (original data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_yz_new: function changeAxios_yz_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref4 = [this.generatePointCloudData[i][2], this.generatePointCloudData[i][1]];\n        this.generatePointCloudData[i][1] = _ref4[0];\n        this.generatePointCloudData[i][2] = _ref4[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: 'Lidar 3D point cloud (augmented data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    changeAxios_xy_new: function changeAxios_xy_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref5 = [this.generatePointCloudData[i][1], this.generatePointCloudData[i][0]];\n        this.generatePointCloudData[i][0] = _ref5[0];\n        this.generatePointCloudData[i][1] = _ref5[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: 'Lidar 3D point cloud (augmented data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    changeAxios_xz_new: function changeAxios_xz_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref6 = [this.generatePointCloudData[i][2], this.generatePointCloudData[i][0]];\n        this.generatePointCloudData[i][0] = _ref6[0];\n        this.generatePointCloudData[i][2] = _ref6[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: 'Lidar 3D point cloud (augmented data)'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    fileLoad: function fileLoad() {\n      var _this2 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.originalPointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      var selectedFile = this.$refs.refFile.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n\n      reader.onload = function (e) {\n        var is_3d_data = _this2.make_format_data(name, e.target.result, 0);\n\n        if (is_3d_data) {\n          _this2.maxLightValue = 100;\n        }\n\n        console.log('this.originalPointCloudData.length:', _this2.originalPointCloudData.length);\n\n        if (_this2.originalPointCloudData.length !== 0) {\n          _this2.original_buttom = true;\n        }\n\n        _this2.option = {\n          title: {\n            text: 'Lidar 3D point cloud (original data)'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          visualMap: {\n            show: false,\n            calculable: true,\n            max: _this2.maxLightValue,\n            min: _this2.minLightValue,\n            inRange: {\n              symbolSize: 2,\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n            }\n          },\n          series: [{\n            type: 'scatter3D',\n            data: _this2.originalPointCloudData\n          }]\n        };\n        myChart.setOption(_this2.option);\n      };\n\n      loading.close();\n    },\n    fileLoad_new: function fileLoad_new() {\n      var _this3 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.generatePointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData_new.length) {\n        this.pointCloudData_new = [];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      var selectedFile = this.$refs.refFile_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n\n      reader.onload = function (e) {\n        _this3.make_format_data(name, e.target.result, 1);\n\n        var is_3d_data = _this3.make_format_data(name, e.target.result, 0);\n\n        if (_this3.maxLightValue === 0 && _this3.minLightValue === 0) {\n          _this3.maxLightValue = 100;\n        }\n\n        if (_this3.generatePointCloudData.length !== 0) {\n          _this3.generate_buttom = true;\n        }\n\n        _this3.option1 = {\n          title: {\n            text: 'Lidar 3D point cloud (augmented data)'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          visualMap: {\n            show: false,\n            calculable: true,\n            max: _this3.maxLightValue,\n            min: _this3.minLightValue,\n            inRange: {\n              symbolSize: 2,\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#fdae61', '#f46d43', '#d73027', '#a50026']\n            }\n          },\n          series: [{\n            type: 'scatter3D',\n            data: _this3.generatePointCloudData\n          }]\n        };\n        myChart1.setOption(_this3.option1);\n      };\n\n      loading.close();\n    },\n    clickLoad: function clickLoad() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_new: function clickLoad_new() {\n      this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n    }\n  },\n  mounted: function mounted() {\n    this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n  }\n};",null]}