{"remainingRequest":"E:\\LidarPlatformFrontend-hjw\\node_modules\\babel-loader\\lib\\index.js!E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\Dashboard.vue","mtime":1636383956011},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"E:/LidarPlatformFrontend-hjw/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/LidarPlatformFrontend-hjw/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Schart from 'vue-schart';\nimport bus from \"../common/bus\";\nimport * as echarts from 'echarts';\nimport echartCarousel from \"./echarts_carousel.vue\";\nimport cardShortcut from \"./card_shortcut.vue\";\nimport cardMethods from \"./card_methods.vue\";\nimport cardPlatInfo from \"./card_plat_info.vue\";\nimport cardSystemReport from \"./card_system_report.vue\";\nexport default {\n  name: 'dashboard',\n  data: function data() {\n    return {\n      activeName: 'first',\n      selfstyle: {\n        'margin-left': '0px !important',\n        fontSize: '35px',\n        width: '100%',\n        height: '100px'\n      },\n      tableButtonData: [{\n        action: '获取设置'\n      }],\n      tableData: [],\n      name: sessionStorage.getItem('ms_username'),\n      data: [],\n      systemStatusData: {\n        CPUStatus: -1,\n        GPUStatus: -1,\n        memoryStatus: -1\n      },\n      StructuredDataNum: 1,\n      TextDataNum: 36,\n      EmergencyDataNum: 0,\n      OnlineUsersNum: 0,\n      ConversionRate: 0,\n      PassRate: 0,\n      RunningTask: {},\n      RunningTask_name: [],\n      RunningTask_num: [],\n      RunningTask_final: [],\n      i: 0,\n      logShow_new_two: [],\n      dates: [],\n      methods: [],\n      datas_ran: [],\n      datas_finish: [],\n      datas_generate: [],\n      temp_series_ran: [],\n      temp_series_finish: [],\n      temp_series_generate: [],\n      myChart: null,\n      myChart2: null,\n      myChart3: null\n    };\n  },\n  components: {\n    Schart: Schart,\n    echartCarousel: echartCarousel,\n    cardShortcut: cardShortcut,\n    cardMethods: cardMethods,\n    cardPlatInfo: cardPlatInfo,\n    cardSystemReport: cardSystemReport\n  },\n  computed: {\n    role: function role() {\n      return this.name === 'admin' ? '超级管理员' : '普通用户';\n    }\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.timer);\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var _yield$this$$http$get, data;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.$http.get('/user/');\n\n            case 2:\n              _yield$this$$http$get = _context.sent;\n              data = _yield$this$$http$get.data;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  mounted: function mounted() {\n    var _this = this;\n\n    var week = ['日', '一', '二', '三', '四', '五', '六'];\n    setInterval(function () {\n      var date_time = _this.tableData = [{\n        key: '平台名',\n        value: '智能系统软件测试数据生成平台'\n      }, {\n        key: '版本号',\n        value: 'Ver 1.0'\n      }, {\n        key: '时间',\n        value: new Date().toLocaleDateString() + '  ' + new Date().toLocaleTimeString('it-IT') + '  星期' + week[new Date().getDay()]\n      }];\n    }, 1000);\n    this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    this.getPerformance(); // this.getOnlineUser();\n\n    this.getRunningTask();\n    this.getECharts();\n    this.timer = setInterval(function () {\n      _this.getPerformance(); // this.getOnlineUser();\n\n\n      _this.getRunningTask();\n\n      _this.getECharts();\n    }, 1000 * 60);\n  },\n  methods: {\n    handleClick: function handleClick() {\n      this.getTwo();\n    },\n    changeDate: function changeDate() {\n      var now = new Date().getTime();\n      this.data.forEach(function (item, index) {\n        var date = new Date(now - (6 - index) * 86400000);\n        item.name = \"\".concat(date.getFullYear(), \"/\").concat(date.getMonth() + 1, \"/\").concat(date.getDate());\n      });\n    },\n    getPerformance: function () {\n      var _getPerformance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _yield$this$$http$get2, data;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.$http.get('/system_status/performance/');\n\n              case 2:\n                _yield$this$$http$get2 = _context2.sent;\n                data = _yield$this$$http$get2.data;\n\n                if (!(data.code !== 20000)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取当前系统性能失败！' + '错误原因：' + data.msg));\n\n              case 6:\n                this.systemStatusData.CPUStatus = parseInt(data.data.cpu);\n                this.systemStatusData.memoryStatus = parseInt(data.data.memory);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPerformance() {\n        return _getPerformance.apply(this, arguments);\n      }\n\n      return getPerformance;\n    }(),\n    getOnlineUser: function () {\n      var _getOnlineUser = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _yield$this$$http$get3, data;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.$http.get('/system_status/online_user/');\n\n              case 2:\n                _yield$this$$http$get3 = _context3.sent;\n                data = _yield$this$$http$get3.data;\n\n                if (!(data.code !== 20000)) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.$message.error('获取在线人数失败！'));\n\n              case 6:\n                this.OnlineUsersNum = data.data.online_user;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getOnlineUser() {\n        return _getOnlineUser.apply(this, arguments);\n      }\n\n      return getOnlineUser;\n    }(),\n    getRunningTask: function () {\n      var _getRunningTask = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var _yield$this$$http$get4, data, rf, i, x;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$http.get('/system_status/running_task/');\n\n              case 2:\n                _yield$this$$http$get4 = _context4.sent;\n                data = _yield$this$$http$get4.data;\n\n                if (!(data.code !== 20000)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.$message.error('获取正在运行各生成任务失败！' + '错误原因：' + data.msg));\n\n              case 6:\n                this.RunningTask = data.data;\n                this.RunningTask_name = Object.keys(this.RunningTask);\n                this.RunningTask_num = Object.values(this.RunningTask);\n                rf = [];\n\n                for (i = 0; i < this.RunningTask_name.length; i++) {\n                  x = {};\n                  x.name = this.RunningTask_name[i];\n                  x.num = this.RunningTask_num[i];\n                  rf.push(x);\n                }\n\n                this.RunningTask_final = rf;\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRunningTask() {\n        return _getRunningTask.apply(this, arguments);\n      }\n\n      return getRunningTask;\n    }(),\n    getECharts: function getECharts() {\n      this.getTwo();\n    },\n    getTwo: function () {\n      var _getTwo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var _yield$this$$http$get5, data;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.$http.get('log/recent_fifteen_days/');\n\n              case 2:\n                _yield$this$$http$get5 = _context5.sent;\n                data = _yield$this$$http$get5.data;\n\n                if (!(data.code !== 20000)) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg));\n\n              case 6:\n                this.logData = data.data;\n                this.showData();\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getTwo() {\n        return _getTwo.apply(this, arguments);\n      }\n\n      return getTwo;\n    }(),\n    showData: function showData() {\n      console.log('showData1');\n      this.dates = [];\n      this.methods = [];\n      this.datas_ran = [];\n      this.datas_finish = [];\n      this.datas_generate = [];\n      this.temp_series_ran = [];\n      this.temp_series_finish = [];\n      this.temp_series_generate = [];\n      var flag = true;\n\n      for (var date in this.logData) {\n        this.dates.push(date);\n\n        for (var method in this.logData[date]) {\n          if (flag) {\n            this.methods.push(method);\n          }\n        }\n\n        flag = false;\n      }\n\n      console.log('showData2');\n\n      for (var method in this.methods) {\n        var temp_ran = [];\n        var temp_finish = [];\n        var temp_generate = [];\n\n        for (var date in this.dates) {\n          temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n          temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n          temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n        }\n\n        this.datas_ran.push(temp_ran);\n        this.datas_finish.push(temp_finish);\n        this.datas_generate.push(temp_generate);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_ran[i].reverse();\n        this.temp_series_ran.push(getone);\n      } // console.log('this.temp_series_ran:', this.temp_series_ran);\n      // this.temp_series_ran.reverse();\n      // console.log('this.temp_series_ran:', this.temp_series_ran);\n\n\n      console.log('showData3');\n\n      if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n        this.myChart.dispose();\n      }\n\n      var temp_data_ran = [];\n      temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n      console.log('temp_data_ran:', temp_data_ran);\n      this.myChart = echarts.init(document.getElementById('main1'));\n      console.log('showData4');\n      var option = {\n        title: {\n          text: 'Running Tasks',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n          top: '10%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates.reverse()\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: temp_data_ran\n      };\n      console.log('showData5');\n      console.log('option:', option);\n      console.log('typeof option:', _typeof(option));\n\n      if (option && _typeof(option) === 'object') {\n        console.log('update main1');\n        this.myChart.setOption(option, true);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_finish[i].reverse();\n        this.temp_series_finish.push(getone);\n      }\n\n      var temp_data_finish = [];\n      temp_data_finish.push(this.temp_series_finish[0], this.temp_series_finish[1], this.temp_series_finish[2]);\n\n      if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n        this.myChart2.dispose();\n      }\n\n      this.myChart2 = echarts.init(document.getElementById('main2'));\n      var option2 = {\n        title: {\n          text: 'Completed Tasks',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n          top: '8%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: temp_data_finish\n      };\n      console.log('option2:', option2);\n      console.log('typeof option2:', _typeof(option2));\n\n      if (option2 && _typeof(option2) === 'object') {\n        console.log('update main2');\n        this.myChart2.setOption(option2, true);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_generate[i].reverse();\n        this.temp_series_generate.push(getone);\n      }\n\n      var temp_data_generate = [];\n      temp_data_generate.push(this.temp_series_generate[0], this.temp_series_generate[1], this.temp_series_generate[2]);\n\n      if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n        this.myChart3.dispose();\n      }\n\n      this.myChart3 = echarts.init(document.getElementById('main3'));\n      var option3 = {\n        title: {\n          text: 'Generated Data',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n          top: '8%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: temp_data_generate\n      };\n      console.log('option3:', option3);\n      console.log('typeof option3:', _typeof(option3));\n\n      if (option3 && _typeof(option3) === 'object') {\n        console.log('update main3');\n        this.myChart3.setOption(option3, true);\n      }\n    } // showData() {\n    //     this.dates = [];\n    //     this.methods = [];\n    //     this.datas_ran = [];\n    //     this.datas_finish = [];\n    //     this.datas_generate = [];\n    //     this.temp_series_ran = [];\n    //     this.temp_series_finish = [];\n    //     this.temp_series_generate = [];\n    //     var flag = true;\n    //     for (var date in this.logData) {\n    //         this.dates.push(date);\n    //         for (var method in this.logData[date]) {\n    //             if (flag) {\n    //                 this.methods.push(method);\n    //             }\n    //         }\n    //         flag = false;\n    //     }\n    //     for (var method in this.methods) {\n    //         var temp_ran = [];\n    //         var temp_finish = [];\n    //         var temp_generate = [];\n    //         for (var date in this.dates) {\n    //             temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n    //             temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n    //             temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n    //         }\n    //         this.datas_ran.push(temp_ran);\n    //         this.datas_finish.push(temp_finish);\n    //         this.datas_generate.push(temp_generate);\n    //     }\n    //     for (var i = 0; i < this.methods.length; i++) {\n    //         var getone = {};\n    //         getone.type = 'line';\n    //         getone.areaStyle = {};\n    //         getone.name = this.methods[i];\n    //         getone.data = this.datas_ran[i].reverse();\n    //         this.temp_series_ran.push(getone);\n    //     }\n    //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n    //     // this.temp_series_ran.reverse();\n    //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n    //     if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n    //         this.myChart.dispose();\n    //     }\n    //     this.myChart = echarts.init(document.getElementById('main1'));\n    //     var option = {\n    //         title: {\n    //             text: '运行任务数监控',\n    //             left: 'center'\n    //         },\n    //         tooltip: {\n    //             trigger: 'axis',\n    //             axisPointer: {\n    //                 type: 'cross',\n    //                 label: {\n    //                     backgroundColor: '#6a7985'\n    //                 }\n    //             }\n    //         },\n    //         legend: {\n    //             data: this.methods,\n    //             top: '10%'\n    //         },\n    //         toolbox: {\n    //             feature: {\n    //                 saveAsImage: {}\n    //             }\n    //         },\n    //         grid: {\n    //             left: '3%',\n    //             right: '4%',\n    //             bottom: '3%',\n    //             containLabel: true\n    //         },\n    //         xAxis: [\n    //             {\n    //                 type: 'category',\n    //                 boundaryGap: true,\n    //                 data: this.dates.reverse()\n    //             }\n    //         ],\n    //         yAxis: [\n    //             {\n    //                 type: 'value'\n    //             }\n    //         ],\n    //         series: this.temp_series_ran\n    //     };\n    //     if (option && typeof option === 'object') {\n    //         this.myChart.setOption(option, true);\n    //     }\n    //     for (var i = 0; i < this.methods.length; i++) {\n    //         var getone = {};\n    //         getone.type = 'line';\n    //         getone.areaStyle = {};\n    //         getone.name = this.methods[i];\n    //         getone.data = this.datas_finish[i].reverse();\n    //         this.temp_series_finish.push(getone);\n    //     }\n    //     if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n    //         this.myChart2.dispose();\n    //     }\n    //     this.myChart2 = echarts.init(document.getElementById('main2'));\n    //     var option2 = {\n    //         title: {\n    //             text: '完成任务数监控',\n    //             left: 'center'\n    //         },\n    //         tooltip: {\n    //             trigger: 'axis',\n    //             axisPointer: {\n    //                 type: 'cross',\n    //                 label: {\n    //                     backgroundColor: '#6a7985'\n    //                 }\n    //             }\n    //         },\n    //         legend: {\n    //             data: this.methods,\n    //             top: '8%'\n    //         },\n    //         toolbox: {\n    //             feature: {\n    //                 saveAsImage: {}\n    //             }\n    //         },\n    //         grid: {\n    //             left: '3%',\n    //             right: '4%',\n    //             bottom: '3%',\n    //             containLabel: true\n    //         },\n    //         xAxis: [\n    //             {\n    //                 type: 'category',\n    //                 boundaryGap: true,\n    //                 data: this.dates\n    //             }\n    //         ],\n    //         yAxis: [\n    //             {\n    //                 type: 'value'\n    //             }\n    //         ],\n    //         series: this.temp_series_finish\n    //     };\n    //     if (option2 && typeof option2 === 'object') {\n    //         this.myChart2.setOption(option2, true);\n    //     }\n    //     for (var i = 0; i < this.methods.length; i++) {\n    //         var getone = {};\n    //         getone.type = 'line';\n    //         getone.areaStyle = {};\n    //         getone.name = this.methods[i];\n    //         getone.data = this.datas_generate[i].reverse();\n    //         this.temp_series_generate.push(getone);\n    //     }\n    //     if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n    //         this.myChart3.dispose();\n    //     }\n    //     this.myChart3 = echarts.init(document.getElementById('main3'));\n    //     var option3 = {\n    //         title: {\n    //             text: '生成数据量监控',\n    //             left: 'center'\n    //         },\n    //         tooltip: {\n    //             trigger: 'axis',\n    //             axisPointer: {\n    //                 type: 'cross',\n    //                 label: {\n    //                     backgroundColor: '#6a7985'\n    //                 }\n    //             }\n    //         },\n    //         legend: {\n    //             data: this.methods,\n    //             top: '8%'\n    //         },\n    //         toolbox: {\n    //             feature: {\n    //                 saveAsImage: {}\n    //             }\n    //         },\n    //         grid: {\n    //             left: '3%',\n    //             right: '4%',\n    //             bottom: '3%',\n    //             containLabel: true\n    //         },\n    //         xAxis: [\n    //             {\n    //                 type: 'category',\n    //                 boundaryGap: true,\n    //                 data: this.dates\n    //             }\n    //         ],\n    //         yAxis: [\n    //             {\n    //                 type: 'value'\n    //             }\n    //         ],\n    //         series: this.temp_series_generate\n    //     };\n    //     if (option3 && typeof option3 === 'object') {\n    //         this.myChart3.setOption(option3, true);\n    //     }\n    // }\n\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArfA;AAzGA,CAAA","sourcesContent":["<template>\n    <div>\n        <el-row :gutter=\"20\" style=\"margin-bottom: 0px\">\n            <el-col :span=\"18\">\n                <el-row :gutter=\"20\">\n                    <el-col :span=\"16\">\n                        <!-- 快捷方式 -->\n                        <!-- <cardShortcut></cardShortcut> -->\n                        <cardSystemReport></cardSystemReport>\n                    </el-col>\n                    <el-col :span=\"8\">\n                        <cardMethods></cardMethods>\n                    </el-col>\n                </el-row>\n            </el-col>\n            <el-col :span=\"6\">\n                <!-- 平台信息 -->\n                <cardPlatInfo></cardPlatInfo>\n                <!-- 系统报告 -->\n            </el-col>\n        </el-row>\n        <el-row>\n            <el-col :span=\"24\">\n                <el-card shadow=\"hover\">\n                    <div class=\"block\">\n                        <el-carousel trigger=\"click\" height=\"400px\">\n                            <el-carousel-item v-for=\"item in 3\" :key=\"item\">\n                                <div v-if=\"item == 1\" id=\"main1\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                                <div v-if=\"item == 2\" id=\"main2\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                                <div v-if=\"item == 3\" id=\"main3\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                            </el-carousel-item>\n                        </el-carousel>\n                    </div>\n                </el-card>\n                <!-- <el-card shadow=\"hover\">\n                    <div class=\"block\">\n                        <echart-carousel></echart-carousel>\n                    </div>\n                </el-card> -->\n            </el-col>\n        </el-row>\n    </div>\n</template>\n<script>\nimport Schart from 'vue-schart';\nimport bus from '../common/bus';\nimport * as echarts from 'echarts';\nimport echartCarousel from './echarts_carousel.vue';\nimport cardShortcut from './card_shortcut.vue';\nimport cardMethods from './card_methods.vue';\nimport cardPlatInfo from './card_plat_info.vue';\nimport cardSystemReport from './card_system_report.vue';\nexport default {\n    name: 'dashboard',\n\n    data() {\n        return {\n            activeName: 'first',\n            selfstyle: {\n                'margin-left': '0px !important',\n                fontSize: '35px',\n                width: '100%',\n                height: '100px'\n            },\n            tableButtonData: [\n                {\n                    action: '获取设置'\n                }\n            ],\n            tableData: [],\n            name: sessionStorage.getItem('ms_username'),\n            data: [],\n            systemStatusData: {\n                CPUStatus: -1,\n                GPUStatus: -1,\n                memoryStatus: -1\n            },\n            StructuredDataNum: 1,\n            TextDataNum: 36,\n            EmergencyDataNum: 0,\n            OnlineUsersNum: 0,\n            ConversionRate: 0,\n            PassRate: 0,\n            RunningTask: {},\n            RunningTask_name: [],\n            RunningTask_num: [],\n            RunningTask_final: [],\n            i: 0,\n            logShow_new_two: [],\n            dates: [],\n            methods: [],\n            datas_ran: [],\n            datas_finish: [],\n            datas_generate: [],\n            temp_series_ran: [],\n            temp_series_finish: [],\n            temp_series_generate: [],\n            myChart: null,\n            myChart2: null,\n            myChart3: null\n        };\n    },\n    components: {\n        Schart,\n        echartCarousel,\n        cardShortcut,\n        cardMethods,\n        cardPlatInfo,\n        cardSystemReport\n    },\n    computed: {\n        role() {\n            return this.name === 'admin' ? '超级管理员' : '普通用户';\n        }\n    },\n    destroyed() {\n        clearInterval(this.timer);\n    },\n    async created() {\n        const { data: data } = await this.$http.get('/user/');\n    },\n    mounted() {\n        let week = ['日', '一', '二', '三', '四', '五', '六'];\n        setInterval(() => {\n            var date_time = (this.tableData = [\n                {\n                    key: '平台名',\n                    value: '智能系统软件测试数据生成平台'\n                },\n                {\n                    key: '版本号',\n                    value: 'Ver 1.0'\n                },\n                {\n                    key: '时间',\n                    value:\n                        new Date().toLocaleDateString() +\n                        '  ' +\n                        new Date().toLocaleTimeString('it-IT') +\n                        '  星期' +\n                        week[new Date().getDay()]\n                }\n            ]);\n        }, 1000);\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n\n        this.getPerformance();\n        // this.getOnlineUser();\n        this.getRunningTask();\n        this.getECharts();\n        this.timer = setInterval(() => {\n            this.getPerformance();\n            // this.getOnlineUser();\n            this.getRunningTask();\n            this.getECharts();\n        }, 1000 * 60);\n    },\n    methods: {\n        handleClick() {\n            this.getTwo();\n        },\n        changeDate() {\n            const now = new Date().getTime();\n            this.data.forEach((item, index) => {\n                const date = new Date(now - (6 - index) * 86400000);\n                item.name = `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n            });\n        },\n        async getPerformance() {\n            const { data: data } = await this.$http.get('/system_status/performance/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取当前系统性能失败！' + '错误原因：' + data.msg);\n            }\n            this.systemStatusData.CPUStatus = parseInt(data.data.cpu);\n            this.systemStatusData.memoryStatus = parseInt(data.data.memory);\n        },\n        async getOnlineUser() {\n            const { data: data } = await this.$http.get('/system_status/online_user/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取在线人数失败！');\n            }\n            this.OnlineUsersNum = data.data.online_user;\n        },\n        async getRunningTask() {\n            const { data: data } = await this.$http.get('/system_status/running_task/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取正在运行各生成任务失败！' + '错误原因：' + data.msg);\n            }\n            this.RunningTask = data.data;\n            this.RunningTask_name = Object.keys(this.RunningTask);\n            this.RunningTask_num = Object.values(this.RunningTask);\n            let rf = [];\n            for (var i = 0; i < this.RunningTask_name.length; i++) {\n                var x = {};\n                x.name = this.RunningTask_name[i];\n                x.num = this.RunningTask_num[i];\n                rf.push(x);\n            }\n            this.RunningTask_final = rf;\n        },\n        getECharts() {\n            this.getTwo();\n        },\n        async getTwo() {\n            const { data: data } = await this.$http.get('log/recent_fifteen_days/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg);\n            }\n            this.logData = data.data;\n\n            this.showData();\n        },\n        showData() {\n            console.log('showData1');\n            this.dates = [];\n            this.methods = [];\n            this.datas_ran = [];\n            this.datas_finish = [];\n            this.datas_generate = [];\n            this.temp_series_ran = [];\n            this.temp_series_finish = [];\n            this.temp_series_generate = [];\n            var flag = true;\n            for (var date in this.logData) {\n                this.dates.push(date);\n                for (var method in this.logData[date]) {\n                    if (flag) {\n                        this.methods.push(method);\n                    }\n                }\n                flag = false;\n            }\n            console.log('showData2');\n            for (var method in this.methods) {\n                var temp_ran = [];\n                var temp_finish = [];\n                var temp_generate = [];\n                for (var date in this.dates) {\n                    temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n                    temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n                    temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n                }\n                this.datas_ran.push(temp_ran);\n                this.datas_finish.push(temp_finish);\n                this.datas_generate.push(temp_generate);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_ran[i].reverse();\n                this.temp_series_ran.push(getone);\n            }\n            // console.log('this.temp_series_ran:', this.temp_series_ran);\n            // this.temp_series_ran.reverse();\n            // console.log('this.temp_series_ran:', this.temp_series_ran);\n            console.log('showData3');\n            if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n                this.myChart.dispose();\n            }\n            var temp_data_ran = [];\n            temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n            console.log('temp_data_ran:', temp_data_ran);\n            this.myChart = echarts.init(document.getElementById('main1'));\n            console.log('showData4');\n            var option = {\n                title: {\n                    text: 'Running Tasks',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates.reverse()\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_ran\n            };\n            console.log('showData5');\n            console.log('option:', option);\n            console.log('typeof option:', typeof option);\n            if (option && typeof option === 'object') {\n                console.log('update main1');\n                this.myChart.setOption(option, true);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_finish[i].reverse();\n                this.temp_series_finish.push(getone);\n            }\n            var temp_data_finish = [];\n            temp_data_finish.push(this.temp_series_finish[0], this.temp_series_finish[1], this.temp_series_finish[2]);\n            if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n                this.myChart2.dispose();\n            }\n            this.myChart2 = echarts.init(document.getElementById('main2'));\n            var option2 = {\n                title: {\n                    text: 'Completed Tasks',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_finish\n            };\n            console.log('option2:', option2);\n            console.log('typeof option2:', typeof option2);\n            if (option2 && typeof option2 === 'object') {\n                console.log('update main2');\n                this.myChart2.setOption(option2, true);\n            }\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_generate[i].reverse();\n                this.temp_series_generate.push(getone);\n            }\n            var temp_data_generate = [];\n            temp_data_generate.push(this.temp_series_generate[0], this.temp_series_generate[1], this.temp_series_generate[2]);\n\n            if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n                this.myChart3.dispose();\n            }\n            this.myChart3 = echarts.init(document.getElementById('main3'));\n            var option3 = {\n                title: {\n                    text: 'Generated Data',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_generate\n            };\n            console.log('option3:', option3);\n            console.log('typeof option3:', typeof option3);\n            if (option3 && typeof option3 === 'object') {\n                console.log('update main3');\n                this.myChart3.setOption(option3, true);\n            }\n        }\n        // showData() {\n        //     this.dates = [];\n        //     this.methods = [];\n        //     this.datas_ran = [];\n        //     this.datas_finish = [];\n        //     this.datas_generate = [];\n        //     this.temp_series_ran = [];\n        //     this.temp_series_finish = [];\n        //     this.temp_series_generate = [];\n        //     var flag = true;\n        //     for (var date in this.logData) {\n        //         this.dates.push(date);\n        //         for (var method in this.logData[date]) {\n        //             if (flag) {\n        //                 this.methods.push(method);\n        //             }\n        //         }\n        //         flag = false;\n        //     }\n\n        //     for (var method in this.methods) {\n        //         var temp_ran = [];\n        //         var temp_finish = [];\n        //         var temp_generate = [];\n        //         for (var date in this.dates) {\n        //             temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n        //             temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n        //             temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n        //         }\n        //         this.datas_ran.push(temp_ran);\n        //         this.datas_finish.push(temp_finish);\n        //         this.datas_generate.push(temp_generate);\n        //     }\n\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_ran[i].reverse();\n        //         this.temp_series_ran.push(getone);\n        //     }\n        //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n        //     // this.temp_series_ran.reverse();\n        //     // console.log('this.temp_series_ran:', this.temp_series_ran);\n\n        //     if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n        //         this.myChart.dispose();\n        //     }\n        //     this.myChart = echarts.init(document.getElementById('main1'));\n        //     var option = {\n        //         title: {\n        //             text: '运行任务数监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '10%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates.reverse()\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_ran\n        //     };\n        //     if (option && typeof option === 'object') {\n        //         this.myChart.setOption(option, true);\n        //     }\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_finish[i].reverse();\n        //         this.temp_series_finish.push(getone);\n        //     }\n        //     if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n        //         this.myChart2.dispose();\n        //     }\n        //     this.myChart2 = echarts.init(document.getElementById('main2'));\n        //     var option2 = {\n        //         title: {\n        //             text: '完成任务数监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '8%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_finish\n        //     };\n        //     if (option2 && typeof option2 === 'object') {\n        //         this.myChart2.setOption(option2, true);\n        //     }\n        //     for (var i = 0; i < this.methods.length; i++) {\n        //         var getone = {};\n        //         getone.type = 'line';\n        //         getone.areaStyle = {};\n        //         getone.name = this.methods[i];\n        //         getone.data = this.datas_generate[i].reverse();\n        //         this.temp_series_generate.push(getone);\n        //     }\n        //     if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n        //         this.myChart3.dispose();\n        //     }\n        //     this.myChart3 = echarts.init(document.getElementById('main3'));\n        //     var option3 = {\n        //         title: {\n        //             text: '生成数据量监控',\n        //             left: 'center'\n        //         },\n        //         tooltip: {\n        //             trigger: 'axis',\n        //             axisPointer: {\n        //                 type: 'cross',\n        //                 label: {\n        //                     backgroundColor: '#6a7985'\n        //                 }\n        //             }\n        //         },\n        //         legend: {\n        //             data: this.methods,\n        //             top: '8%'\n        //         },\n        //         toolbox: {\n        //             feature: {\n        //                 saveAsImage: {}\n        //             }\n        //         },\n        //         grid: {\n        //             left: '3%',\n        //             right: '4%',\n        //             bottom: '3%',\n        //             containLabel: true\n        //         },\n        //         xAxis: [\n        //             {\n        //                 type: 'category',\n        //                 boundaryGap: true,\n        //                 data: this.dates\n        //             }\n        //         ],\n        //         yAxis: [\n        //             {\n        //                 type: 'value'\n        //             }\n        //         ],\n        //         series: this.temp_series_generate\n        //     };\n        //     if (option3 && typeof option3 === 'object') {\n        //         this.myChart3.setOption(option3, true);\n        //     }\n        // }\n    }\n};\n</script>\n\n<style scoped>\n.el-card {\n    border-radius: 3%;\n}\n.el-row {\n    margin-bottom: 20px;\n}\n.grid-content {\n    display: flex;\n    align-items: center;\n    height: 70px;\n}\n.grid-cont-right {\n    flex: 1;\n    text-align: center;\n    font-size: 14px;\n    color: #999;\n}\n.grid-num {\n    font-size: 30px;\n    font-weight: bold;\n}\n.grid-con-icon {\n    font-size: 50px;\n    width: 70px;\n    height: 100px;\n    text-align: center;\n    line-height: 100px;\n    color: #fff;\n}\n.grid-con-1 .grid-con-icon {\n    background: rgb(45, 140, 240);\n}\n.grid-con-1 .grid-num {\n    color: rgb(45, 140, 240);\n}\n.grid-con-2 .grid-con-icon {\n    background: rgb(100, 213, 114);\n}\n.grid-con-2 .grid-num {\n    color: rgb(100, 213, 114);\n}\n.grid-con-3 .grid-con-icon {\n    background: #e6a23c;\n}\n.grid-con-3 .grid-num {\n    color: #e6a23c;\n}\n.grid-con-4 .grid-con-icon {\n    background: #f56c6c;\n}\n.grid-con-4 .grid-num {\n    color: #f56c6c;\n}\n.user-info {\n    display: flex;\n    align-items: center;\n    padding-bottom: 10px;\n    border-bottom: 2px solid #ccc;\n    margin-bottom: 10px;\n}\n.user-avator {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n}\n.user-info-cont {\n    padding-left: 50px;\n    flex: 1;\n    font-size: 14px;\n    color: #999;\n}\n.user-info-cont div:first-child {\n    font-size: 30px;\n    color: #222;\n}\n.user-info-list {\n    font-size: 14px;\n    color: #999;\n    line-height: 25px;\n}\n.user-info-list span {\n    margin-left: 25px;\n}\n.mgb20 {\n    margin-bottom: 20px;\n}\n.todo-item {\n    font-size: 14px;\n}\n.todo-item-del {\n    text-decoration: line-through;\n    color: #999;\n}\n.schart {\n    width: 100%;\n    height: 300px;\n}\n.el-card__header1 {\n    padding: 0px 10px 10px 10px !important;\n    border-bottom: 1px solid #ebeef5;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n.el-card__body1 {\n    padding: 10px !important;\n}\n.el-card__body2 {\n    padding-top: 10px;\n}\n.body3 {\n    padding-top: 0 !important;\n}\n.el-button--info.is-plain {\n    border-color: #f4f4f5 !important;\n}\n.el-button [class*='el-icon-'] + span {\n    margin-left: 0 !important;\n}\n.el-carousel__item h3 {\n    color: #475669;\n    font-size: 14px;\n    opacity: 0.75;\n    line-height: 150px;\n    margin: 0;\n}\n/* .el-carousel__item:nth-child(2n) {\n    background-color: #99a9bf;\n}\n.el-carousel__item:nth-child(2n + 1) {\n    background-color: #d3dce6;\n} */\n.lidarPic {\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    margin-left: 8px;\n}\n.table-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: 35px;\n    background: #f4f4f5;\n    width: 100%;\n    height: 100px;\n    border-radius: 4px;\n}\n.table-icon:hover {\n    background: lightgrey;\n}\na {\n    color: rgb(83, 83, 83);\n    text-decoration: none;\n}\n</style>\n"],"sourceRoot":"src/components/page"}]}