{"remainingRequest":"E:\\LidarPlatformFrontend-hjw\\node_modules\\babel-loader\\lib\\index.js!E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\echarts_carousel.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\LidarPlatformFrontend-hjw\\src\\components\\page\\echarts_carousel.vue","mtime":1636382470019},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-hjw\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"E:/LidarPlatformFrontend-hjw/node_modules/@babel/runtime/helpers/esm/typeof\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/LidarPlatformFrontend-hjw/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Schart from 'vue-schart';\nimport bus from \"../common/bus\";\nimport * as echarts from 'echarts';\nexport default {\n  name: 'dashboard',\n  data: function data() {\n    return {\n      activeName: 'first',\n      selfstyle: {\n        'margin-left': '0px !important',\n        fontSize: '35px',\n        width: '100%',\n        height: '100px'\n      },\n      tableButtonData: [{\n        action: '获取设置'\n      }],\n      tableData: [],\n      name: sessionStorage.getItem('ms_username'),\n      data: [],\n      systemStatusData: {\n        CPUStatus: -1,\n        GPUStatus: -1,\n        memoryStatus: -1\n      },\n      StructuredDataNum: 1,\n      TextDataNum: 36,\n      EmergencyDataNum: 0,\n      OnlineUsersNum: 0,\n      ConversionRate: 0,\n      PassRate: 0,\n      RunningTask: {},\n      RunningTask_name: [],\n      RunningTask_num: [],\n      RunningTask_final: [],\n      i: 0,\n      logShow_new_two: [],\n      dates: [],\n      methods: [],\n      datas_ran: [],\n      datas_finish: [],\n      datas_generate: [],\n      tmep_series_ran: [],\n      tmep_series_finish: [],\n      tmep_series_generate: [],\n      myChart: null,\n      myChart2: null,\n      myChart3: null\n    };\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.timer);\n  },\n  created: function created() {\n    this.getECharts();\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.getECharts();\n    this.timer = setInterval(function () {\n      _this.getECharts();\n    }, 1000 * 60);\n  },\n  methods: {\n    handleClick: function handleClick() {\n      this.getTwo();\n    },\n    getECharts: function getECharts() {\n      console.log('getECharts');\n      this.getTwo();\n    },\n    getTwo: function () {\n      var _getTwo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _yield$this$$http$get, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('getTwo');\n                _context.next = 3;\n                return this.$http.get('log/recent_fifteen_days/');\n\n              case 3:\n                _yield$this$$http$get = _context.sent;\n                data = _yield$this$$http$get.data;\n\n                if (!(data.code !== 20000)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg));\n\n              case 7:\n                this.logData = data.data;\n                this.showData();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTwo() {\n        return _getTwo.apply(this, arguments);\n      }\n\n      return getTwo;\n    }(),\n    showData: function showData() {\n      console.log('showData');\n      this.dates = [];\n      this.methods = [];\n      this.datas_ran = [];\n      this.datas_finish = [];\n      this.datas_generate = [];\n      this.tmep_series_ran = [];\n      this.tmep_series_finish = [];\n      this.tmep_series_generate = [];\n      var flag = true;\n\n      for (var date in this.logData) {\n        this.dates.push(date);\n\n        for (var method in this.logData[date]) {\n          if (flag) {\n            this.methods.push(method);\n          }\n        }\n\n        flag = false;\n      }\n\n      for (var method in this.methods) {\n        var temp_ran = [];\n        var temp_finish = [];\n        var temp_generate = [];\n\n        for (var date in this.dates) {\n          temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n          temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n          temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n        }\n\n        this.datas_ran.push(temp_ran);\n        this.datas_finish.push(temp_finish);\n        this.datas_generate.push(temp_generate);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_ran[i].reverse();\n        this.tmep_series_ran.push(getone);\n      } // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n      // this.tmep_series_ran.reverse();\n      // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n\n\n      if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n        this.myChart.dispose();\n      }\n\n      var temp_data_ran = [];\n      temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n      console.log('temp_data_ran:', temp_data_ran);\n      this.myChart = echarts.init(document.getElementById('main1'));\n      var option = {\n        title: {\n          text: '运行任务数监控',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n          top: '10%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates.reverse()\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: temp_data_ran\n      };\n      console.log('option:', option);\n      console.log('typeof option:', _typeof(option));\n\n      if (option && _typeof(option) === 'object') {\n        console.log('update main1');\n        this.myChart.setOption(option, true);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_finish[i].reverse();\n        this.tmep_series_finish.push(getone);\n      }\n\n      if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n        this.myChart2.dispose();\n      }\n\n      this.myChart2 = echarts.init(document.getElementById('main2'));\n      var option2 = {\n        title: {\n          text: '完成任务数监控',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: this.methods,\n          top: '8%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: this.tmep_series_finish\n      };\n      console.log('option2:', option2);\n      console.log('typeof option2:', _typeof(option2));\n\n      if (option2 && _typeof(option2) === 'object') {\n        console.log('update main2');\n        this.myChart2.setOption(option2, true);\n      }\n\n      for (var i = 0; i < this.methods.length; i++) {\n        var getone = {};\n        getone.type = 'line';\n        getone.areaStyle = {};\n        getone.name = this.methods[i];\n        getone.data = this.datas_generate[i].reverse();\n        this.tmep_series_generate.push(getone);\n      }\n\n      if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n        this.myChart3.dispose();\n      }\n\n      this.myChart3 = echarts.init(document.getElementById('main3'));\n      var option3 = {\n        title: {\n          text: '生成数据量监控',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          data: this.methods,\n          top: '8%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: true,\n          data: this.dates\n        }],\n        yAxis: [{\n          type: 'value'\n        }],\n        series: this.tmep_series_generate\n      };\n      console.log('option3:', option3);\n      console.log('typeof option3:', _typeof(option3));\n\n      if (option3 && _typeof(option3) === 'object') {\n        console.log('update main3');\n        this.myChart3.setOption(option3, true);\n      }\n    }\n  }\n};",{"version":3,"sources":["echarts_carousel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"block\">\n        <!-- <span class=\"demonstration\">Click 指示器触发</span> -->\n        <el-carousel trigger=\"click\" height=\"400px\">\n            <el-carousel-item v-for=\"item in 3\" :key=\"item\">\n                <div v-if=\"item == 1\" id=\"main1\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                <div v-if=\"item == 2\" id=\"main2\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n                <div v-if=\"item == 3\" id=\"main3\" style=\"width: 95%; height: 400px; margin: 0 auto\"></div>\n            </el-carousel-item>\n        </el-carousel>\n    </div>\n</template>\n\n<script>\nimport Schart from 'vue-schart';\nimport bus from '../common/bus';\nimport * as echarts from 'echarts';\nexport default {\n    name: 'dashboard',\n    data() {\n        return {\n            activeName: 'first',\n            selfstyle: {\n                'margin-left': '0px !important',\n                fontSize: '35px',\n                width: '100%',\n                height: '100px'\n            },\n            tableButtonData: [\n                {\n                    action: '获取设置'\n                }\n            ],\n            tableData: [],\n            name: sessionStorage.getItem('ms_username'),\n            data: [],\n            systemStatusData: {\n                CPUStatus: -1,\n                GPUStatus: -1,\n                memoryStatus: -1\n            },\n            StructuredDataNum: 1,\n            TextDataNum: 36,\n            EmergencyDataNum: 0,\n            OnlineUsersNum: 0,\n            ConversionRate: 0,\n            PassRate: 0,\n            RunningTask: {},\n            RunningTask_name: [],\n            RunningTask_num: [],\n            RunningTask_final: [],\n            i: 0,\n            logShow_new_two: [],\n            dates: [],\n            methods: [],\n            datas_ran: [],\n            datas_finish: [],\n            datas_generate: [],\n            tmep_series_ran: [],\n            tmep_series_finish: [],\n            tmep_series_generate: [],\n            myChart: null,\n            myChart2: null,\n            myChart3: null\n        };\n    },\n    destroyed() {\n        clearInterval(this.timer);\n    },\n    created() {\n        this.getECharts();\n    },\n    mounted() {\n        this.getECharts();\n        this.timer = setInterval(() => {\n            this.getECharts();\n        }, 1000 * 60);\n    },\n    methods: {\n        handleClick() {\n            this.getTwo();\n        },\n        getECharts() {\n            console.log('getECharts');\n            this.getTwo();\n        },\n        async getTwo() {\n            console.log('getTwo');\n            const { data: data } = await this.$http.get('log/recent_fifteen_days/');\n            if (data.code !== 20000) {\n                return this.$message.error('获取近15日系统日志数据失败！' + '错误原因：' + data.msg);\n            }\n            this.logData = data.data;\n\n            this.showData();\n        },\n        showData() {\n            console.log('showData');\n            this.dates = [];\n            this.methods = [];\n            this.datas_ran = [];\n            this.datas_finish = [];\n            this.datas_generate = [];\n            this.tmep_series_ran = [];\n            this.tmep_series_finish = [];\n            this.tmep_series_generate = [];\n            var flag = true;\n            for (var date in this.logData) {\n                this.dates.push(date);\n                for (var method in this.logData[date]) {\n                    if (flag) {\n                        this.methods.push(method);\n                    }\n                }\n                flag = false;\n            }\n\n            for (var method in this.methods) {\n                var temp_ran = [];\n                var temp_finish = [];\n                var temp_generate = [];\n                for (var date in this.dates) {\n                    temp_ran.push(this.logData[this.dates[date]][this.methods[method]]['ran_task_number']);\n                    temp_finish.push(this.logData[this.dates[date]][this.methods[method]]['finish_task_number']);\n                    temp_generate.push(this.logData[this.dates[date]][this.methods[method]]['generate_data_number']);\n                }\n                this.datas_ran.push(temp_ran);\n                this.datas_finish.push(temp_finish);\n                this.datas_generate.push(temp_generate);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_ran[i].reverse();\n                this.tmep_series_ran.push(getone);\n            }\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n            // this.tmep_series_ran.reverse();\n            // console.log('this.tmep_series_ran:', this.tmep_series_ran);\n\n            if (this.myChart != null && this.myChart != '' && this.myChart != undefined) {\n                this.myChart.dispose();\n            }\n            var temp_data_ran = [];\n            temp_data_ran.push(this.temp_series_ran[0], this.temp_series_ran[1], this.temp_series_ran[2]);\n            console.log('temp_data_ran:', temp_data_ran);\n            this.myChart = echarts.init(document.getElementById('main1'));\n            var option = {\n                title: {\n                    text: '运行任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: ['FGSM-激光雷达', 'I-FGSM(BIM)-激光雷达', 'JSMA-激光雷达'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates.reverse()\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: temp_data_ran\n            };\n            console.log('option:', option);\n            console.log('typeof option:', typeof option);\n            if (option && typeof option === 'object') {\n                console.log('update main1');\n                this.myChart.setOption(option, true);\n            }\n\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_finish[i].reverse();\n                this.tmep_series_finish.push(getone);\n            }\n            if (this.myChart2 != null && this.myChart2 != '' && this.myChart2 != undefined) {\n                this.myChart2.dispose();\n            }\n            this.myChart2 = echarts.init(document.getElementById('main2'));\n            var option2 = {\n                title: {\n                    text: '完成任务数监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_finish\n            };\n            console.log('option2:', option2);\n            console.log('typeof option2:', typeof option2);\n            if (option2 && typeof option2 === 'object') {\n                console.log('update main2');\n                this.myChart2.setOption(option2, true);\n            }\n            for (var i = 0; i < this.methods.length; i++) {\n                var getone = {};\n                getone.type = 'line';\n                getone.areaStyle = {};\n                getone.name = this.methods[i];\n                getone.data = this.datas_generate[i].reverse();\n                this.tmep_series_generate.push(getone);\n            }\n            if (this.myChart3 != null && this.myChart3 != '' && this.myChart3 != undefined) {\n                this.myChart3.dispose();\n            }\n            this.myChart3 = echarts.init(document.getElementById('main3'));\n            var option3 = {\n                title: {\n                    text: '生成数据量监控',\n                    left: 'center'\n                },\n                tooltip: {\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    data: this.methods,\n                    top: '8%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                xAxis: [\n                    {\n                        type: 'category',\n                        boundaryGap: true,\n                        data: this.dates\n                    }\n                ],\n                yAxis: [\n                    {\n                        type: 'value'\n                    }\n                ],\n                series: this.tmep_series_generate\n            };\n            console.log('option3:', option3);\n            console.log('typeof option3:', typeof option3);\n            if (option3 && typeof option3 === 'object') {\n                console.log('update main3');\n                this.myChart3.setOption(option3, true);\n            }\n        }\n    }\n};\n</script>\n\n<style></style>\n"],"sourceRoot":"src/components/page"}]}