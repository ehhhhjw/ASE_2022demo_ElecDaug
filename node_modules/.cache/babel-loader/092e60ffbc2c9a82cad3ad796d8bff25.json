{"remainingRequest":"E:\\LidarPlatformFrontend-main\\node_modules\\babel-loader\\lib\\index.js!E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\LidarPlatformFrontend-main\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\LidarPlatformFrontend-main\\src\\components\\page\\Lidar_A_Input_Data.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\LidarPlatformFrontend-main\\src\\components\\page\\Lidar_A_Input_Data.vue","mtime":1628741922000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\LidarPlatformFrontend-main\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n  data: function data() {\n    return {\n      fileList: [],\n      pointCloudData: [],\n      pointCloudData_new: [],\n      option: [],\n      option1: [],\n      originalPointCloudData: [],\n      generatePointCloudData: [],\n      maxAxisValue: -10000,\n      minAxisValue: 10000,\n      maxLightValue: -10000,\n      minLightValue: 10000,\n      original_buttom: false,\n      generate_buttom: false,\n      original_loading: false,\n      generate_loading: false\n    };\n  },\n  methods: {\n    make_format_data: function make_format_data(points_name, pointscloud, flag) {\n      var _this = this;\n\n      var is_3d_data = 0;\n      var format_data = null;\n      var dot = points_name.lastIndexOf('.');\n\n      if (dot === -1) {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '100';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n        return is_3d_data;\n      }\n\n      var data_type = points_name.substr(dot);\n\n      if (data_type === '.ply') {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        var end_header_index = -1;\n\n        for (var i in format_data) {\n          if (format_data[i] === 'end_header') {\n            end_header_index = i;\n          }\n        }\n\n        format_data = format_data.splice(parseInt(end_header_index) + 1, format_data.length - parseInt(end_header_index) - 1);\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '100';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n      } else if (data_type === '.txt') {\n        format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n        format_data.forEach(function (item) {\n          var arr = item.split(' ');\n\n          for (var k in arr) {\n            if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n              _this.maxAxisValue = parseFloat(arr[k]);\n            }\n\n            if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n              _this.minAxisValue = parseFloat(arr[k]);\n            }\n          }\n\n          if ((arr.length === 3 || arr[3] === '') && !flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('0');\n            } else if (arr[3] === '') {\n              arr[3] = '0';\n            }\n          } else if ((arr.length === 3 || arr[3] === '') && flag) {\n            is_3d_data = 1;\n\n            if (arr.length === 3) {\n              arr.push('100');\n            } else if (arr[3] === '') {\n              arr[3] = '10';\n            }\n          }\n\n          if (!flag) {\n            _this.originalPointCloudData.push(arr);\n          } else {\n            _this.generatePointCloudData.push(arr);\n          }\n\n          if (parseFloat(arr[3]) > _this.maxLightValue) {\n            _this.maxLightValue = parseFloat(arr[3]);\n          }\n\n          if (parseFloat(arr[3]) < _this.minLightValue) {\n            _this.minLightValue = parseFloat(arr[3]);\n          }\n        });\n      } else if (data_type === '.bin') {}\n\n      return is_3d_data;\n    },\n    changeAxios_yz: function changeAxios_yz() {\n      for (var i in this.originalPointCloudData) {\n        var _ref = [this.originalPointCloudData[i][2], this.originalPointCloudData[i][1]];\n        this.originalPointCloudData[i][1] = _ref[0];\n        this.originalPointCloudData[i][2] = _ref[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_xz: function changeAxios_xz() {\n      for (var i in this.originalPointCloudData) {\n        var _ref2 = [this.originalPointCloudData[i][2], this.originalPointCloudData[i][0]];\n        this.originalPointCloudData[i][0] = _ref2[0];\n        this.originalPointCloudData[i][2] = _ref2[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_xy: function changeAxios_xy() {\n      for (var i in this.originalPointCloudData) {\n        var _ref3 = [this.originalPointCloudData[i][1], this.originalPointCloudData[i][0]];\n        this.originalPointCloudData[i][0] = _ref3[0];\n        this.originalPointCloudData[i][1] = _ref3[1];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      this.option = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.originalPointCloudData\n        }]\n      };\n      myChart.setOption(this.option);\n    },\n    changeAxios_yz_new: function changeAxios_yz_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref4 = [this.generatePointCloudData[i][2], this.generatePointCloudData[i][1]];\n        this.generatePointCloudData[i][1] = _ref4[0];\n        this.generatePointCloudData[i][2] = _ref4[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    changeAxios_xy_new: function changeAxios_xy_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref5 = [this.generatePointCloudData[i][1], this.generatePointCloudData[i][0]];\n        this.generatePointCloudData[i][0] = _ref5[0];\n        this.generatePointCloudData[i][1] = _ref5[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    changeAxios_xz_new: function changeAxios_xz_new() {\n      for (var i in this.generatePointCloudData) {\n        var _ref6 = [this.generatePointCloudData[i][2], this.generatePointCloudData[i][0]];\n        this.generatePointCloudData[i][0] = _ref6[0];\n        this.generatePointCloudData[i][2] = _ref6[1];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      this.option1 = {\n        title: {\n          text: '激光雷达三维点云（原始图）'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        grid3D: {},\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        visualMap: {\n          show: false,\n          calculable: true,\n          max: this.maxLightValue,\n          min: this.minLightValue,\n          inRange: {\n            symbolSize: 2,\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'scatter3D',\n          data: this.generatePointCloudData\n        }]\n      };\n      myChart1.setOption(this.option1);\n    },\n    fileLoad: function fileLoad() {\n      var _this2 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.originalPointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      var selectedFile = this.$refs.refFile.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n\n      reader.onload = function (e) {\n        var is_3d_data = _this2.make_format_data(name, e.target.result, 0);\n\n        if (is_3d_data) {\n          _this2.maxLightValue = 100;\n        }\n\n        console.log('this.originalPointCloudData.length:', _this2.originalPointCloudData.length);\n\n        if (_this2.originalPointCloudData.length !== 0) {\n          _this2.original_buttom = true;\n        }\n\n        _this2.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue,\n            min: _this2.minAxisValue\n          },\n          visualMap: {\n            show: false,\n            calculable: true,\n            max: _this2.maxLightValue,\n            min: _this2.minLightValue,\n            inRange: {\n              symbolSize: 2,\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n            }\n          },\n          series: [{\n            type: 'scatter3D',\n            data: _this2.originalPointCloudData\n          }]\n        };\n        myChart.setOption(_this2.option);\n      };\n\n      loading.close();\n    },\n    fileLoad_new: function fileLoad_new() {\n      var _this3 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.generatePointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData_new.length) {\n        this.pointCloudData_new = [];\n      }\n\n      var myChart1 = echarts.init(document.getElementById('main_g'));\n      var selectedFile = this.$refs.refFile_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n\n      reader.onload = function (e) {\n        _this3.make_format_data(name, e.target.result, 1);\n\n        var is_3d_data = _this3.make_format_data(name, e.target.result, 0);\n\n        if (_this3.maxLightValue === 0 && _this3.minLightValue === 0) {\n          _this3.maxLightValue = 100;\n        }\n\n        if (_this3.generatePointCloudData.length !== 0) {\n          _this3.generate_buttom = true;\n        }\n\n        _this3.option1 = {\n          title: {\n            text: '激光雷达三维点云（生成图）'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue,\n            min: _this3.minAxisValue\n          },\n          visualMap: {\n            show: false,\n            calculable: true,\n            max: _this3.maxLightValue,\n            min: _this3.minLightValue,\n            inRange: {\n              symbolSize: 2,\n              color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#fdae61', '#f46d43', '#d73027', '#a50026']\n            }\n          },\n          series: [{\n            type: 'scatter3D',\n            data: _this3.generatePointCloudData\n          }]\n        };\n        myChart1.setOption(_this3.option1);\n      };\n\n      loading.close();\n    },\n    clickLoad: function clickLoad() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_new: function clickLoad_new() {\n      this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n    }\n  },\n  mounted: function mounted() {\n    this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n  }\n};",{"version":3,"sources":["Lidar_A_Input_Data.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"crumbs\">\n            <el-breadcrumb separator=\"/\">\n                <el-breadcrumb-item> <i class=\"el-icon-help\"></i> 激光雷达对抗 </el-breadcrumb-item>\n                <el-breadcrumb-item>数据可视化</el-breadcrumb-item>\n            </el-breadcrumb>\n        </div>\n        <hr />\n        <el-card>\n            <div class=\"view\">\n                <el-row>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport\" v-on:click=\"clickLoad\" style=\"float:left\">\n                                导入原雷达数据\n                            </el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_xz\">交换xz坐标</el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_xy\">交换xy坐标</el-button>\n                            <el-button v-if=\"original_buttom\" type=\"primary\" @click=\"changeAxios_yz\">交换yz坐标</el-button>\n                            <input type=\"file\" id=\"files\" ref=\"refFile\" style=\"display:none\" v-on:change=\"fileLoad\" />\n                        </div>\n                        <div id=\"main_o\" class=\"view1\"></div>\n                    </el-col>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport_new\" v-on:click=\"clickLoad_new\" style=\"float:left\">\n                                导入生成雷达数据\n                            </el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_xz_new\">交换xz坐标</el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_xy_new\">交换xy坐标</el-button>\n                            <el-button v-if=\"generate_buttom\" type=\"primary\" @click=\"changeAxios_yz_new\">交换yz坐标</el-button>\n                            <input type=\"file\" id=\"files_new\" ref=\"refFile_new\" style=\"display:none\" v-on:change=\"fileLoad_new\" />\n                        </div>\n                        <div v-loading=\"original_loading\" id=\"main_g\" class=\"view1\"></div>\n                    </el-col>\n                </el-row>\n            </div>\n        </el-card>\n    </div>\n</template>\n<script>\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n    data() {\n        return {\n            fileList: [],\n            pointCloudData: [],\n            pointCloudData_new: [],\n            option: [],\n            option1: [],\n            originalPointCloudData: [],\n            generatePointCloudData: [],\n            maxAxisValue: -10000,\n            minAxisValue: 10000,\n            maxLightValue: -10000,\n            minLightValue: 10000,\n            original_buttom: false,\n            generate_buttom: false,\n            original_loading: false,\n            generate_loading: false\n        };\n    },\n    methods: {\n        make_format_data(points_name, pointscloud, flag) {\n            var is_3d_data = 0;\n            var format_data = null;\n            var dot = points_name.lastIndexOf('.');\n            if (dot === -1) {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '100';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n\n                return is_3d_data;\n            }\n            var data_type = points_name.substr(dot);\n            if (data_type === '.ply') {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                var end_header_index = -1;\n                for (var i in format_data) {\n                    if (format_data[i] === 'end_header') {\n                        end_header_index = i;\n                    }\n                }\n\n                format_data = format_data.splice(parseInt(end_header_index) + 1, format_data.length - parseInt(end_header_index) - 1);\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '100';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n            } else if (data_type === '.txt') {\n                format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n                format_data.forEach(item => {\n                    let arr = item.split(' ');\n                    for (var k in arr) {\n                        if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                            this.maxAxisValue = parseFloat(arr[k]);\n                        }\n                        if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                            this.minAxisValue = parseFloat(arr[k]);\n                        }\n                    }\n                    if ((arr.length === 3 || arr[3] === '') && !flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('0');\n                        } else if (arr[3] === '') {\n                            arr[3] = '0';\n                        }\n                    } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                        is_3d_data = 1;\n                        if (arr.length === 3) {\n                            arr.push('100');\n                        } else if (arr[3] === '') {\n                            arr[3] = '10';\n                        }\n                    }\n                    if (!flag) {\n                        this.originalPointCloudData.push(arr);\n                    } else {\n                        this.generatePointCloudData.push(arr);\n                    }\n                    if (parseFloat(arr[3]) > this.maxLightValue) {\n                        this.maxLightValue = parseFloat(arr[3]);\n                    }\n                    if (parseFloat(arr[3]) < this.minLightValue) {\n                        this.minLightValue = parseFloat(arr[3]);\n                    }\n                });\n            } else if (data_type === '.bin') {\n            }\n\n            return is_3d_data;\n        },\n        changeAxios_yz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][1], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][1]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_xz() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][2]] = [\n                    this.originalPointCloudData[i][2],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_xy() {\n            for (var i in this.originalPointCloudData) {\n                [this.originalPointCloudData[i][0], this.originalPointCloudData[i][1]] = [\n                    this.originalPointCloudData[i][1],\n                    this.originalPointCloudData[i][0]\n                ];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            this.option = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData\n                    }\n                ]\n            };\n\n            myChart.setOption(this.option);\n        },\n        changeAxios_yz_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][1], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][1]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        changeAxios_xy_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][1]] = [\n                    this.generatePointCloudData[i][1],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        changeAxios_xz_new() {\n            for (var i in this.generatePointCloudData) {\n                [this.generatePointCloudData[i][0], this.generatePointCloudData[i][2]] = [\n                    this.generatePointCloudData[i][2],\n                    this.generatePointCloudData[i][0]\n                ];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            this.option1 = {\n                title: {\n                    text: '激光雷达三维点云（原始图）'\n                },\n                tooltip: {\n                    trigger: 'axis'\n                },\n                grid3D: {},\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                visualMap: {\n                    show: false,\n                    calculable: true,\n                    max: this.maxLightValue,\n                    min: this.minLightValue,\n                    inRange: {\n                        symbolSize: 2,\n                        color: [\n                            '#313695',\n                            '#4575b4',\n                            '#74add1',\n                            '#abd9e9',\n                            '#e0f3f8',\n                            '#ffffbf',\n                            '#fee090',\n                            '#fdae61',\n                            '#f46d43',\n                            '#d73027',\n                            '#a50026'\n                        ]\n                    }\n                },\n                series: [\n                    {\n                        type: 'scatter3D',\n                        data: this.generatePointCloudData\n                    }\n                ]\n            };\n\n            myChart1.setOption(this.option1);\n        },\n        fileLoad() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.originalPointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            const selectedFile = this.$refs.refFile.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            reader.onload = e => {\n                var is_3d_data = this.make_format_data(name, e.target.result, 0);\n\n                if (is_3d_data) {\n                    this.maxLightValue = 100;\n                }\n\n                console.log('this.originalPointCloudData.length:', this.originalPointCloudData.length);\n                if (this.originalPointCloudData.length !== 0) {\n                    this.original_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    visualMap: {\n                        show: false,\n                        calculable: true,\n                        max: this.maxLightValue,\n                        min: this.minLightValue,\n                        inRange: {\n                            symbolSize: 2,\n                            color: [\n                                '#313695',\n                                '#4575b4',\n                                '#74add1',\n                                '#abd9e9',\n                                '#e0f3f8',\n                                '#ffffbf',\n                                '#fee090',\n                                '#fdae61',\n                                '#f46d43',\n                                '#d73027',\n                                '#a50026'\n                            ]\n                        }\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: this.originalPointCloudData\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        fileLoad_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.generatePointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData_new.length) {\n                this.pointCloudData_new = [];\n            }\n            var myChart1 = echarts.init(document.getElementById('main_g'));\n            const selectedFile = this.$refs.refFile_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            reader.onload = e => {\n                this.make_format_data(name, e.target.result, 1);\n                var is_3d_data = this.make_format_data(name, e.target.result, 0);\n\n                if (this.maxLightValue === 0 && this.minLightValue === 0) {\n                    this.maxLightValue = 100;\n                }\n\n                if (this.generatePointCloudData.length !== 0) {\n                    this.generate_buttom = true;\n                }\n                this.option1 = {\n                    title: {\n                        text: '激光雷达三维点云（生成图）'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue,\n                        min: this.minAxisValue\n                    },\n                    visualMap: {\n                        show: false,\n                        calculable: true,\n                        max: this.maxLightValue,\n                        min: this.minLightValue,\n                        inRange: {\n                            symbolSize: 2,\n                            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#fdae61', '#f46d43', '#d73027', '#a50026']\n                        }\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: this.generatePointCloudData\n                        }\n                    ]\n                };\n                myChart1.setOption(this.option1);\n            };\n            loading.close();\n        },\n        clickLoad() {\n            this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_new() {\n            this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n</script>\n<style scoped>\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n</style>\n"],"sourceRoot":"src/components/page"}]}