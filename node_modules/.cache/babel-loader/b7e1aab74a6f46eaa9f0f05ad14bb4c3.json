{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/common/Header.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/common/Header.vue","mtime":1651459626242},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hejiawei/Desktop/\\u4E94\\u6708/LidarPlatformFrontend-hjw 2/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/hejiawei/Desktop/\\u4E94\\u6708/LidarPlatformFrontend-hjw 2/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 引入EventBus机制（总线），功能类似于Vuex\nimport bus from \"../common/bus\";\nimport { mapState, mapMutations } from 'vuex';\nexport default {\n  data: function data() {\n    return {\n      // 折叠导航栏\n      collapse: false,\n      // 是否全屏\n      fullscreen: false,\n      // 默认用户名\n      // nickname: '',\n      // 未读消息数量\n      message: 2\n    };\n  },\n  // 计算属性\n  computed: _objectSpread({}, mapState(['nickname'])),\n  methods: {\n    // 用户名下拉菜单选择事件[含登出]\n    handleCommand: function () {\n      var _handleCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(command) {\n        var _yield$this$$http$del, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(command == 'logout')) {\n                  _context.next = 24;\n                  break;\n                }\n\n                console.log('this.$store.state.username' + this.$store.state.username); // console.log('this.$store.state.nickname:', this.$store.state.nickname);\n\n                console.log('this.$store.state.token登出:', this.$store.state.token);\n                _context.next = 5;\n                return this.$http.delete('/user/logout/?username=' + this.$store.state.username);\n\n              case 5:\n                _yield$this$$http$del = _context.sent;\n                data = _yield$this$$http$del.data;\n\n                if (!(data.code !== 20000)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                console.log(data.code);\n                console.log(data.msg);\n                return _context.abrupt(\"return\", this.$message.error('用户登出失败！' + '错误原因：' + data.msg));\n\n              case 11:\n                this.$message.success('用户登出成功！'); // 在本地数据仓库中删除当前用户\n                // sessionStorage.clear();\n\n                console.log('sessionStorage已清除'); // sessionStorage.removeItem('token');\n\n                sessionStorage.clear();\n                console.log(sessionStorage.getItem('token')); // this.isRouterAlive = false;\n                // this.$nextTick(function() {\n                //     this.isRouterAlive = true;\n                // });\n\n                this.$store.commit('setToken', null);\n                this.$store.commit('setNickName', null);\n                this.$store.commit('setUserId', null);\n                console.log('$store.token已清除'); // 确认清除\n\n                console.log(this.$store.state.token);\n                console.log(this.$store.state.nickname);\n                console.log(this.$store.state.username);\n                console.log(this.$store.state.userId); // 路由跳转\n\n                this.$router.push('/login');\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleCommand(_x) {\n        return _handleCommand.apply(this, arguments);\n      }\n\n      return handleCommand;\n    }(),\n    // 侧边栏折叠\n    collapseChage: function collapseChage() {\n      // 侧边栏状态取反即可\n      this.collapse = !this.collapse; // 向组件传值，更新侧边栏状态\n\n      bus.$emit('collapse', this.collapse);\n    },\n    // 全屏事件\n    handleFullScreen: function handleFullScreen() {\n      var element = document.documentElement;\n\n      if (this.fullscreen) {\n        if (document.exitFullscreen) {\n          // exitFullscreen() 退出全屏模式。\n          document.exitFullscreen();\n        } else if (document.webkitCancelFullScreen) {\n          document.webkitCancelFullScreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        }\n      } else {\n        if (element.requestFullscreen) {\n          // requestFullscreen() 请求进入全屏模式\n          element.requestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n          element.webkitRequestFullScreen();\n        } else if (element.mozRequestFullScreen) {\n          element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n          // IE11\n          element.msRequestFullscreen();\n        }\n      } // 全屏状态取反\n\n\n      this.fullscreen = !this.fullscreen;\n    }\n  },\n  mounted: function mounted() {\n    // document.body.clientWidth表示HTML文档所在窗口的当前宽度。\n    if (document.body.clientWidth < 1500) {\n      this.collapseChage();\n    }\n  },\n  created: function created() {// this.nickname = this.$store.state.nickname;\n    // this.nickname = sessionStorage.getItem('nickname');\n    // console.log('this.nickname:');\n    // console.log(this.nickname);\n  }\n};",null]}