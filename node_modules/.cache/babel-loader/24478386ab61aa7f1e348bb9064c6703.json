{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue","mtime":1628741922000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n  data: function data() {\n    return {\n      fileList: [],\n      pointCloudData: [],\n      pointCloudData_new: [],\n      option: [],\n      option1: [],\n      originalPointCloudData: [],\n      generatePointCloudData: [],\n      originalLabelData: [],\n      generateLabelData: [],\n      maxAxisValue: -10000,\n      minAxisValue: 10000,\n      maxLightValue: -10000,\n      minLightValue: 10000,\n      original_buttom: false,\n      generate_buttom: false,\n      original_loading: false,\n      generate_loading: false\n    };\n  },\n  methods: {\n    make_format_data: function make_format_data(points_name, pointscloud, flag) {\n      var _this = this;\n\n      var is_3d_data = 0;\n      var format_data = null;\n      var PointCloudData = [];\n      format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n      format_data.forEach(function (item) {\n        var arr = item.split(' ');\n\n        for (var k in arr) {\n          if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n            _this.maxAxisValue = parseFloat(arr[k]);\n          }\n\n          if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n            _this.minAxisValue = parseFloat(arr[k]);\n          }\n        }\n\n        if ((arr.length === 3 || arr[3] === '') && !flag) {\n          is_3d_data = 1;\n\n          if (arr.length === 3) {\n            arr.push('0');\n          } else if (arr[3] === '') {\n            arr[3] = '0';\n          }\n        } else if ((arr.length === 3 || arr[3] === '') && flag) {\n          is_3d_data = 1;\n\n          if (arr.length === 3) {\n            arr.push('100');\n          } else if (arr[3] === '') {\n            arr[3] = '10';\n          }\n        }\n\n        PointCloudData.push(arr);\n      });\n      return [PointCloudData, this.maxAxisValue, this.minAxisValue];\n    },\n    make_format_data_label: function make_format_data_label(points_name, labels, flag) {\n      // var is_3d_data = 0;\n      console.log('labels:', labels);\n      var format_data = null;\n      var originalPointCloudData = [];\n      var generatePointCloudData = [];\n      var label_temp = [];\n      format_data = labels.replaceAll('\\r\\n', '\\n').split('\\n');\n      format_data.forEach(function (item) {\n        var arr = item.split(' ');\n        var label_temp_item = [];\n\n        if (arr[0] != 'DontCare' && arr[0] != '') {\n          label_temp_item.push(parseFloat(arr[13]));\n          label_temp_item.push(-1 * parseFloat(arr[11]));\n          label_temp_item.push(-1 * parseFloat(arr[12]));\n          label_temp.push(label_temp_item);\n        } // console.log('label_temp:', label_temp);\n\n\n        if (!flag) {\n          originalPointCloudData.push(arr);\n        } else {\n          generatePointCloudData.push(arr);\n        }\n      });\n      return label_temp;\n    },\n    get_preview: function get_preview() {\n      var myChart_original = echarts.init(document.getElementById('preview_original'));\n      this.option_original = {\n        title: {\n          text: '原始图'\n        },\n        tooltip: {\n          show: false,\n          showCcontant: true,\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          // 就是显示哪些东西\n          type: 'plain',\n          data: ['original_data', 'original_label'],\n          top: '10%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid3D: {\n          containLabel: true,\n          viewControl: {\n            projection: 'orthographic'\n          }\n        },\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        series: [{\n          name: 'original_data',\n          type: 'scatter3D',\n          data: this.originalPointCloudData,\n          symbolSize: 2,\n          encode: {\n            // 维度的名字默认就是表头的属性名\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }, {\n          name: 'original_label',\n          type: 'scatter3D',\n          data: this.originalLabelData,\n          symbolSize: 10,\n          encode: {\n            // 维度的名字默认就是表头的属性名\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }]\n      };\n      myChart_original.setOption(this.option_original);\n    },\n    fileLoad: function fileLoad() {\n      var _this2 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.originalPointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      var selectedFile = this.$refs.refFile.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n\n      if (size == 0 || size == '0') {\n        loading.close();\n        return;\n      }\n\n      var originalPointCloudData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.originalPointCloudData:', me.originalPointCloudData);\n\n        var res = _this2.make_format_data(name, e.target.result, 0);\n\n        originalPointCloudData_temp = res[0];\n        me.maxAxisValue = res[1];\n        me.minAxisValue = res[2];\n        console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n        me.originalPointCloudData = originalPointCloudData_temp;\n        console.log('me.originalPointCloudData:', me.originalPointCloudData);\n\n        if (_this2.originalPointCloudData.length !== 0) {\n          _this2.original_buttom = true;\n        }\n\n        _this2.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          series: [{\n            type: 'scatter3D',\n            data: originalPointCloudData_temp,\n            symbolSize: 2\n          }]\n        };\n        myChart.setOption(_this2.option);\n      }; // while (originalPointCloudData_temp.length == 0) {\n      //     setTimeout(function() {\n      //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      //     }, 100);\n      // }\n\n\n      console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      loading.close();\n    },\n    fileLoad_new: function fileLoad_new() {\n      var _this3 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.generatePointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_g'));\n      var selectedFile = this.$refs.refFile_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n\n      if (size == 0 || size == '0') {\n        loading.close();\n        return;\n      }\n\n      var generatePointCloudData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.generatePointCloudData:', me.generatePointCloudData);\n\n        var res = _this3.make_format_data(name, e.target.result, 0);\n\n        generatePointCloudData_temp = res[0];\n        me.maxAxisValue = res[1];\n        me.minAxisValue = res[2];\n        console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n        me.generatePointCloudData = generatePointCloudData_temp;\n        console.log('me.generatePointCloudData:', me.generatePointCloudData);\n\n        if (_this3.generatePointCloudData.length !== 0) {\n          _this3.generate_buttom = true;\n        }\n\n        _this3.option = {\n          title: {\n            text: '激光雷达三维点云（生成图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          series: [{\n            type: 'scatter3D',\n            data: generatePointCloudData_temp,\n            symbolSize: 2\n          }]\n        };\n        myChart.setOption(_this3.option);\n      }; // while (originalPointCloudData_temp.length == 0) {\n      //     setTimeout(function() {\n      //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      //     }, 100);\n      // }\n\n\n      loading.close();\n    },\n    fileLoad_label: function fileLoad_label() {\n      var _this4 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      if (this.originalLabelData.length) {\n        this.originalLabelData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label.files);\n      var selectedFile = this.$refs.refFile_label.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var originalLabelData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.originalLabelData:', me.originalLabelData);\n        console.log('e.target.result:', e.target.result);\n        originalLabelData_temp = _this4.make_format_data_label(name, e.target.result, 0);\n        me.originalLabelData = originalLabelData_temp;\n        console.log('me.originalLabelData:', me.originalLabelData);\n        _this4.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          legend: {\n            // 就是显示哪些东西\n            type: 'plain',\n            data: ['original_data', 'original_label'],\n            top: '10%'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          series: [{\n            name: 'original_data',\n            type: 'scatter3D',\n            data: me.originalPointCloudData,\n            symbolSize: 2,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }, {\n            name: 'original_label',\n            type: 'scatter3D',\n            data: me.originalLabelData,\n            symbolSize: 10,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }]\n        };\n        myChart.setOption(_this4.option);\n      };\n\n      loading.close();\n    },\n    fileLoad_label_new: function fileLoad_label_new() {\n      var _this5 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      if (this.generateLabelData.length) {\n        this.generateLabelData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_g'));\n      console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label_new.files);\n      var selectedFile = this.$refs.refFile_label_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var generateLabelData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.generateLabelData:', me.generateLabelData);\n        console.log('e.target.result:', e.target.result);\n        generateLabelData_temp = _this5.make_format_data_label(name, e.target.result, 0);\n        me.generateLabelData = generateLabelData_temp;\n        console.log('me.generateLabelData:', me.generateLabelData);\n        _this5.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          legend: {\n            // 就是显示哪些东西\n            type: 'plain',\n            data: ['generate_data', 'generate_label'],\n            top: '10%'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          series: [{\n            name: 'generate_data',\n            type: 'scatter3D',\n            data: me.generatePointCloudData,\n            symbolSize: 2,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }, {\n            name: 'generate_label',\n            type: 'scatter3D',\n            data: me.generateLabelData,\n            symbolSize: 10,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }]\n        };\n        myChart.setOption(_this5.option);\n      };\n\n      loading.close();\n    },\n    clickLoad: function clickLoad() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_new: function clickLoad_new() {\n      this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_label: function clickLoad_label() {\n      this.$refs.refFile_label.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_label_new: function clickLoad_label_new() {\n      this.$refs.refFile_label_new.dispatchEvent(new MouseEvent('click'));\n    }\n  },\n  mounted: function mounted() {\n    this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n  }\n};",null]}