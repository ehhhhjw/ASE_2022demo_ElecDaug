{"remainingRequest":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/src/components/page/Lidar_T_Input_Data.vue","mtime":1628741922000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hejiawei/Desktop/五月/LidarPlatformFrontend-hjw 2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n  data: function data() {\n    return {\n      fileList: [],\n      pointCloudData: [],\n      pointCloudData_new: [],\n      option: [],\n      option1: [],\n      originalPointCloudData: [],\n      generatePointCloudData: [],\n      originalLabelData: [],\n      generateLabelData: [],\n      maxAxisValue: -10000,\n      minAxisValue: 10000,\n      maxLightValue: -10000,\n      minLightValue: 10000,\n      original_buttom: false,\n      generate_buttom: false,\n      original_loading: false,\n      generate_loading: false\n    };\n  },\n  methods: {\n    make_format_data: function make_format_data(points_name, pointscloud, flag) {\n      var _this = this;\n\n      var is_3d_data = 0;\n      var format_data = null;\n      var PointCloudData = [];\n      format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n      format_data.forEach(function (item) {\n        var arr = item.split(' ');\n\n        for (var k in arr) {\n          if (k < 3 && parseFloat(arr[k]) > _this.maxAxisValue) {\n            _this.maxAxisValue = parseFloat(arr[k]);\n          }\n\n          if (k < 3 && parseFloat(arr[k]) < _this.minAxisValue) {\n            _this.minAxisValue = parseFloat(arr[k]);\n          }\n        }\n\n        if ((arr.length === 3 || arr[3] === '') && !flag) {\n          is_3d_data = 1;\n\n          if (arr.length === 3) {\n            arr.push('0');\n          } else if (arr[3] === '') {\n            arr[3] = '0';\n          }\n        } else if ((arr.length === 3 || arr[3] === '') && flag) {\n          is_3d_data = 1;\n\n          if (arr.length === 3) {\n            arr.push('100');\n          } else if (arr[3] === '') {\n            arr[3] = '10';\n          }\n        }\n\n        PointCloudData.push(arr);\n      });\n      return [PointCloudData, this.maxAxisValue, this.minAxisValue];\n    },\n    make_format_data_label: function make_format_data_label(points_name, labels, flag) {\n      // var is_3d_data = 0;\n      console.log('labels:', labels);\n      var format_data = null;\n      var originalPointCloudData = [];\n      var generatePointCloudData = [];\n      var label_temp = [];\n      format_data = labels.replaceAll('\\r\\n', '\\n').split('\\n');\n      format_data.forEach(function (item) {\n        var arr = item.split(' ');\n        var label_temp_item = [];\n\n        if (arr[0] != 'DontCare' && arr[0] != '') {\n          label_temp_item.push(parseFloat(arr[13]));\n          label_temp_item.push(-1 * parseFloat(arr[11]));\n          label_temp_item.push(-1 * parseFloat(arr[12]));\n          label_temp.push(label_temp_item);\n        } // console.log('label_temp:', label_temp);\n\n\n        if (!flag) {\n          originalPointCloudData.push(arr);\n        } else {\n          generatePointCloudData.push(arr);\n        }\n      });\n      return label_temp;\n    },\n    get_preview: function get_preview() {\n      var myChart_original = echarts.init(document.getElementById('preview_original'));\n      this.option_original = {\n        title: {\n          text: '原始图'\n        },\n        tooltip: {\n          show: false,\n          showCcontant: true,\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          // 就是显示哪些东西\n          type: 'plain',\n          data: ['original_data', 'original_label'],\n          top: '10%'\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        grid3D: {\n          containLabel: true,\n          viewControl: {\n            projection: 'orthographic'\n          }\n        },\n        xAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        yAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        zAxis3D: {\n          type: 'value',\n          max: this.maxAxisValue.toFixed(3),\n          min: this.minAxisValue.toFixed(3)\n        },\n        series: [{\n          name: 'original_data',\n          type: 'scatter3D',\n          data: this.originalPointCloudData,\n          symbolSize: 2,\n          encode: {\n            // 维度的名字默认就是表头的属性名\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }, {\n          name: 'original_label',\n          type: 'scatter3D',\n          data: this.originalLabelData,\n          symbolSize: 10,\n          encode: {\n            // 维度的名字默认就是表头的属性名\n            tooltip: [0, 1, 2, 3, 4]\n          }\n        }]\n      };\n      myChart_original.setOption(this.option_original);\n    },\n    fileLoad: function fileLoad() {\n      var _this2 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.originalPointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      var selectedFile = this.$refs.refFile.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n\n      if (size == 0 || size == '0') {\n        loading.close();\n        return;\n      }\n\n      var originalPointCloudData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.originalPointCloudData:', me.originalPointCloudData);\n\n        var res = _this2.make_format_data(name, e.target.result, 0);\n\n        originalPointCloudData_temp = res[0];\n        me.maxAxisValue = res[1];\n        me.minAxisValue = res[2];\n        console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n        me.originalPointCloudData = originalPointCloudData_temp;\n        console.log('me.originalPointCloudData:', me.originalPointCloudData);\n\n        if (_this2.originalPointCloudData.length !== 0) {\n          _this2.original_buttom = true;\n        }\n\n        _this2.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this2.maxAxisValue.toFixed(3),\n            min: _this2.minAxisValue.toFixed(3)\n          },\n          series: [{\n            type: 'scatter3D',\n            data: originalPointCloudData_temp,\n            symbolSize: 2\n          }]\n        };\n        myChart.setOption(_this2.option);\n      }; // while (originalPointCloudData_temp.length == 0) {\n      //     setTimeout(function() {\n      //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      //     }, 100);\n      // }\n\n\n      console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      loading.close();\n    },\n    fileLoad_new: function fileLoad_new() {\n      var _this3 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.generatePointCloudData = [];\n      this.maxAxisValue = -10000;\n      this.minAxisValue = 10000;\n      this.maxLightValue = -10000;\n      this.minLightValue = 10000;\n\n      if (this.pointCloudData.length) {\n        this.pointCloudData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_g'));\n      var selectedFile = this.$refs.refFile_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n\n      if (size == 0 || size == '0') {\n        loading.close();\n        return;\n      }\n\n      var generatePointCloudData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.generatePointCloudData:', me.generatePointCloudData);\n\n        var res = _this3.make_format_data(name, e.target.result, 0);\n\n        generatePointCloudData_temp = res[0];\n        me.maxAxisValue = res[1];\n        me.minAxisValue = res[2];\n        console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n        me.generatePointCloudData = generatePointCloudData_temp;\n        console.log('me.generatePointCloudData:', me.generatePointCloudData);\n\n        if (_this3.generatePointCloudData.length !== 0) {\n          _this3.generate_buttom = true;\n        }\n\n        _this3.option = {\n          title: {\n            text: '激光雷达三维点云（生成图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: _this3.maxAxisValue.toFixed(3),\n            min: _this3.minAxisValue.toFixed(3)\n          },\n          series: [{\n            type: 'scatter3D',\n            data: generatePointCloudData_temp,\n            symbolSize: 2\n          }]\n        };\n        myChart.setOption(_this3.option);\n      }; // while (originalPointCloudData_temp.length == 0) {\n      //     setTimeout(function() {\n      //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n      //     }, 100);\n      // }\n\n\n      loading.close();\n    },\n    fileLoad_label: function fileLoad_label() {\n      var _this4 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      if (this.originalLabelData.length) {\n        this.originalLabelData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_o'));\n      console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label.files);\n      var selectedFile = this.$refs.refFile_label.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var originalLabelData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.originalLabelData:', me.originalLabelData);\n        console.log('e.target.result:', e.target.result);\n        originalLabelData_temp = _this4.make_format_data_label(name, e.target.result, 0);\n        me.originalLabelData = originalLabelData_temp;\n        console.log('me.originalLabelData:', me.originalLabelData);\n        _this4.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          legend: {\n            // 就是显示哪些东西\n            type: 'plain',\n            data: ['original_data', 'original_label'],\n            top: '10%'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          series: [{\n            name: 'original_data',\n            type: 'scatter3D',\n            data: me.originalPointCloudData,\n            symbolSize: 2,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }, {\n            name: 'original_label',\n            type: 'scatter3D',\n            data: me.originalLabelData,\n            symbolSize: 10,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }]\n        };\n        myChart.setOption(_this4.option);\n      };\n\n      loading.close();\n    },\n    fileLoad_label_new: function fileLoad_label_new() {\n      var _this5 = this;\n\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n\n      if (this.generateLabelData.length) {\n        this.generateLabelData = [];\n      }\n\n      var myChart = echarts.init(document.getElementById('main_g'));\n      console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label_new.files);\n      var selectedFile = this.$refs.refFile_label_new.files[0];\n      var name = selectedFile.name;\n      var size = selectedFile.size;\n      var generateLabelData_temp = [];\n      var reader = new FileReader();\n      reader.readAsText(selectedFile);\n      var me = this;\n\n      reader.onload = function (e) {\n        console.log('me.generateLabelData:', me.generateLabelData);\n        console.log('e.target.result:', e.target.result);\n        generateLabelData_temp = _this5.make_format_data_label(name, e.target.result, 0);\n        me.generateLabelData = generateLabelData_temp;\n        console.log('me.generateLabelData:', me.generateLabelData);\n        _this5.option = {\n          title: {\n            text: '激光雷达三维点云（原始图）'\n          },\n          tooltip: {\n            trigger: 'axis'\n          },\n          legend: {\n            // 就是显示哪些东西\n            type: 'plain',\n            data: ['generate_data', 'generate_label'],\n            top: '10%'\n          },\n          grid3D: {},\n          xAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          yAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          zAxis3D: {\n            type: 'value',\n            max: me.maxAxisValue.toFixed(3),\n            min: me.minAxisValue.toFixed(3)\n          },\n          series: [{\n            name: 'generate_data',\n            type: 'scatter3D',\n            data: me.generatePointCloudData,\n            symbolSize: 2,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }, {\n            name: 'generate_label',\n            type: 'scatter3D',\n            data: me.generateLabelData,\n            symbolSize: 10,\n            encode: {\n              // 维度的名字默认就是表头的属性名\n              tooltip: [0, 1, 2, 3, 4]\n            }\n          }]\n        };\n        myChart.setOption(_this5.option);\n      };\n\n      loading.close();\n    },\n    clickLoad: function clickLoad() {\n      this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_new: function clickLoad_new() {\n      this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_label: function clickLoad_label() {\n      this.$refs.refFile_label.dispatchEvent(new MouseEvent('click'));\n    },\n    clickLoad_label_new: function clickLoad_label_new() {\n      this.$refs.refFile_label_new.dispatchEvent(new MouseEvent('click'));\n    }\n  },\n  mounted: function mounted() {\n    this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n  }\n};",{"version":3,"sources":["Lidar_T_Input_Data.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"crumbs\">\n            <el-breadcrumb separator=\"/\">\n                <el-breadcrumb-item> <i class=\"el-icon-s-help\"></i> 激光雷达蜕变 </el-breadcrumb-item>\n                <el-breadcrumb-item>数据可视化</el-breadcrumb-item>\n            </el-breadcrumb>\n        </div>\n        <hr />\n        <el-card>\n            <div class=\"view\">\n                <el-row>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport\" v-on:click=\"clickLoad\" style=\"float:left\">\n                                导入原雷达数据\n                            </el-button>\n                            <input type=\"file\" id=\"files\" ref=\"refFile\" style=\"display:none\" v-on:change=\"fileLoad\" />\n                        </div>\n                        <div>\n                            <el-button\n                                v-if=\"this.originalPointCloudData.length != 0\"\n                                type=\"warning\"\n                                id=\"fileImport\"\n                                v-on:click=\"clickLoad_label\"\n                                style=\"float:left\"\n                            >\n                                导入原雷达标签\n                            </el-button>\n                            <input type=\"file\" id=\"files_label\" ref=\"refFile_label\" style=\"display:none\" v-on:change=\"fileLoad_label\" />\n                        </div>\n                        <div id=\"main_o\" class=\"view1\"></div>\n                    </el-col>\n                    <el-col :span=\"12\">\n                        <div>\n                            <el-button type=\"success\" id=\"fileImport_new\" v-on:click=\"clickLoad_new\" style=\"float:left\">\n                                导入生成雷达数据\n                            </el-button>\n                            <input type=\"file\" id=\"files_new\" ref=\"refFile_new\" style=\"display:none\" v-on:change=\"fileLoad_new\" />\n                        </div>\n                        <div>\n                            <el-button\n                                v-if=\"this.generatePointCloudData.length != 0\"\n                                type=\"warning\"\n                                id=\"fileImport\"\n                                v-on:click=\"clickLoad_label_new\"\n                                style=\"float:left\"\n                            >\n                                导入生成雷达标签\n                            </el-button>\n                            <input\n                                type=\"file\"\n                                id=\"files_label_new\"\n                                ref=\"refFile_label_new\"\n                                style=\"display:none\"\n                                v-on:change=\"fileLoad_label_new\"\n                            />\n                        </div>\n                        <div v-loading=\"original_loading\" id=\"main_g\" class=\"view1\"></div>\n                    </el-col>\n                </el-row>\n            </div>\n        </el-card>\n    </div>\n</template>\n<script>\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nexport default {\n    data() {\n        return {\n            fileList: [],\n            pointCloudData: [],\n            pointCloudData_new: [],\n            option: [],\n            option1: [],\n            originalPointCloudData: [],\n            generatePointCloudData: [],\n            originalLabelData: [],\n            generateLabelData: [],\n            maxAxisValue: -10000,\n            minAxisValue: 10000,\n            maxLightValue: -10000,\n            minLightValue: 10000,\n            original_buttom: false,\n            generate_buttom: false,\n            original_loading: false,\n            generate_loading: false\n        };\n    },\n    methods: {\n        make_format_data(points_name, pointscloud, flag) {\n            var is_3d_data = 0;\n            var format_data = null;\n            var PointCloudData = [];\n\n            format_data = pointscloud.replaceAll('\\r\\n', '\\n').split('\\n');\n            format_data.forEach(item => {\n                let arr = item.split(' ');\n                for (var k in arr) {\n                    if (k < 3 && parseFloat(arr[k]) > this.maxAxisValue) {\n                        this.maxAxisValue = parseFloat(arr[k]);\n                    }\n                    if (k < 3 && parseFloat(arr[k]) < this.minAxisValue) {\n                        this.minAxisValue = parseFloat(arr[k]);\n                    }\n                }\n                if ((arr.length === 3 || arr[3] === '') && !flag) {\n                    is_3d_data = 1;\n                    if (arr.length === 3) {\n                        arr.push('0');\n                    } else if (arr[3] === '') {\n                        arr[3] = '0';\n                    }\n                } else if ((arr.length === 3 || arr[3] === '') && flag) {\n                    is_3d_data = 1;\n                    if (arr.length === 3) {\n                        arr.push('100');\n                    } else if (arr[3] === '') {\n                        arr[3] = '10';\n                    }\n                }\n                PointCloudData.push(arr);\n            });\n            return [PointCloudData, this.maxAxisValue, this.minAxisValue];\n        },\n        make_format_data_label(points_name, labels, flag) {\n            // var is_3d_data = 0;\n            console.log('labels:', labels);\n            var format_data = null;\n            var originalPointCloudData = [];\n            var generatePointCloudData = [];\n            var label_temp = [];\n\n            format_data = labels.replaceAll('\\r\\n', '\\n').split('\\n');\n            format_data.forEach(item => {\n                let arr = item.split(' ');\n\n                var label_temp_item = [];\n                if (arr[0] != 'DontCare' && arr[0] != '') {\n                    label_temp_item.push(parseFloat(arr[13]));\n                    label_temp_item.push(-1 * parseFloat(arr[11]));\n                    label_temp_item.push(-1 * parseFloat(arr[12]));\n                    label_temp.push(label_temp_item);\n                }\n\n                // console.log('label_temp:', label_temp);\n\n                if (!flag) {\n                    originalPointCloudData.push(arr);\n                } else {\n                    generatePointCloudData.push(arr);\n                }\n            });\n            return label_temp;\n        },\n        get_preview() {\n            var myChart_original = echarts.init(document.getElementById('preview_original'));\n            this.option_original = {\n                title: {\n                    text: '原始图'\n                },\n                tooltip: {\n                    show: false,\n                    showCcontant: true,\n                    trigger: 'axis',\n                    axisPointer: {\n                        type: 'cross',\n                        label: {\n                            backgroundColor: '#6a7985'\n                        }\n                    }\n                },\n                legend: {\n                    // 就是显示哪些东西\n                    type: 'plain',\n                    data: ['original_data', 'original_label'],\n                    top: '10%'\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                grid3D: {\n                    containLabel: true,\n                    viewControl: {\n                        projection: 'orthographic'\n                    }\n                },\n                xAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                yAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                zAxis3D: {\n                    type: 'value',\n                    max: this.maxAxisValue.toFixed(3),\n                    min: this.minAxisValue.toFixed(3)\n                },\n                series: [\n                    {\n                        name: 'original_data',\n                        type: 'scatter3D',\n                        data: this.originalPointCloudData,\n                        symbolSize: 2,\n                        encode: {\n                            // 维度的名字默认就是表头的属性名\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    },\n                    {\n                        name: 'original_label',\n                        type: 'scatter3D',\n                        data: this.originalLabelData,\n                        symbolSize: 10,\n                        encode: {\n                            // 维度的名字默认就是表头的属性名\n                            tooltip: [0, 1, 2, 3, 4]\n                        }\n                    }\n                ]\n            };\n            myChart_original.setOption(this.option_original);\n        },\n        fileLoad() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.originalPointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_o'));\n            const selectedFile = this.$refs.refFile.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            if (size == 0 || size == '0') {\n                loading.close();\n                return;\n            }\n            var originalPointCloudData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.originalPointCloudData:', me.originalPointCloudData);\n                var res = this.make_format_data(name, e.target.result, 0);\n                originalPointCloudData_temp = res[0];\n                me.maxAxisValue = res[1];\n                me.minAxisValue = res[2];\n                console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n                me.originalPointCloudData = originalPointCloudData_temp;\n                console.log('me.originalPointCloudData:', me.originalPointCloudData);\n                if (this.originalPointCloudData.length !== 0) {\n                    this.original_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: originalPointCloudData_temp,\n                            symbolSize: 2\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            // while (originalPointCloudData_temp.length == 0) {\n            //     setTimeout(function() {\n            //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n            //     }, 100);\n            // }\n            console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n\n            loading.close();\n        },\n        fileLoad_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n            this.generatePointCloudData = [];\n            this.maxAxisValue = -10000;\n            this.minAxisValue = 10000;\n            this.maxLightValue = -10000;\n            this.minLightValue = 10000;\n\n            if (this.pointCloudData.length) {\n                this.pointCloudData = [];\n            }\n            var myChart = echarts.init(document.getElementById('main_g'));\n            const selectedFile = this.$refs.refFile_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            if (size == 0 || size == '0') {\n                loading.close();\n                return;\n            }\n            var generatePointCloudData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.generatePointCloudData:', me.generatePointCloudData);\n                var res = this.make_format_data(name, e.target.result, 0);\n                generatePointCloudData_temp = res[0];\n                me.maxAxisValue = res[1];\n                me.minAxisValue = res[2];\n                console.log('me.maxAxisValue, me.minAxisValue:', me.maxAxisValue, me.minAxisValue);\n                me.generatePointCloudData = generatePointCloudData_temp;\n                console.log('me.generatePointCloudData:', me.generatePointCloudData);\n                if (this.generatePointCloudData.length !== 0) {\n                    this.generate_buttom = true;\n                }\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（生成图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: this.maxAxisValue.toFixed(3),\n                        min: this.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            type: 'scatter3D',\n                            data: generatePointCloudData_temp,\n                            symbolSize: 2\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            // while (originalPointCloudData_temp.length == 0) {\n            //     setTimeout(function() {\n            //         console.log('originalPointCloudData_temp:', originalPointCloudData_temp);\n            //     }, 100);\n            // }\n\n            loading.close();\n        },\n        fileLoad_label() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            if (this.originalLabelData.length) {\n                this.originalLabelData = [];\n            }\n\n            var myChart = echarts.init(document.getElementById('main_o'));\n            console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label.files);\n            const selectedFile = this.$refs.refFile_label.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            var originalLabelData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.originalLabelData:', me.originalLabelData);\n                console.log('e.target.result:', e.target.result);\n                originalLabelData_temp = this.make_format_data_label(name, e.target.result, 0);\n                me.originalLabelData = originalLabelData_temp;\n                console.log('me.originalLabelData:', me.originalLabelData);\n\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        // 就是显示哪些东西\n                        type: 'plain',\n                        data: ['original_data', 'original_label'],\n                        top: '10%'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            name: 'original_data',\n                            type: 'scatter3D',\n                            data: me.originalPointCloudData,\n                            symbolSize: 2,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        },\n                        {\n                            name: 'original_label',\n                            type: 'scatter3D',\n                            data: me.originalLabelData,\n                            symbolSize: 10,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        fileLoad_label_new() {\n            const loading = this.$loading({\n                lock: true,\n                text: 'Loading',\n                spinner: 'el-icon-loading',\n                background: 'rgba(0, 0, 0, 0.7)'\n            });\n\n            if (this.generateLabelData.length) {\n                this.generateLabelData = [];\n            }\n\n            var myChart = echarts.init(document.getElementById('main_g'));\n            console.log('this.$refs.refFile_label.files:', this.$refs.refFile_label_new.files);\n            const selectedFile = this.$refs.refFile_label_new.files[0];\n\n            var name = selectedFile.name;\n            var size = selectedFile.size;\n            var generateLabelData_temp = [];\n\n            var reader = new FileReader();\n            reader.readAsText(selectedFile);\n            var me = this;\n\n            reader.onload = e => {\n                console.log('me.generateLabelData:', me.generateLabelData);\n                console.log('e.target.result:', e.target.result);\n                generateLabelData_temp = this.make_format_data_label(name, e.target.result, 0);\n                me.generateLabelData = generateLabelData_temp;\n                console.log('me.generateLabelData:', me.generateLabelData);\n\n                this.option = {\n                    title: {\n                        text: '激光雷达三维点云（原始图）'\n                    },\n                    tooltip: {\n                        trigger: 'axis'\n                    },\n                    legend: {\n                        // 就是显示哪些东西\n                        type: 'plain',\n                        data: ['generate_data', 'generate_label'],\n                        top: '10%'\n                    },\n                    grid3D: {},\n                    xAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    yAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    zAxis3D: {\n                        type: 'value',\n                        max: me.maxAxisValue.toFixed(3),\n                        min: me.minAxisValue.toFixed(3)\n                    },\n                    series: [\n                        {\n                            name: 'generate_data',\n                            type: 'scatter3D',\n                            data: me.generatePointCloudData,\n                            symbolSize: 2,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        },\n                        {\n                            name: 'generate_label',\n                            type: 'scatter3D',\n                            data: me.generateLabelData,\n                            symbolSize: 10,\n                            encode: {\n                                // 维度的名字默认就是表头的属性名\n                                tooltip: [0, 1, 2, 3, 4]\n                            }\n                        }\n                    ]\n                };\n\n                myChart.setOption(this.option);\n            };\n            loading.close();\n        },\n        clickLoad() {\n            this.$refs.refFile.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_new() {\n            this.$refs.refFile_new.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_label() {\n            this.$refs.refFile_label.dispatchEvent(new MouseEvent('click'));\n        },\n        clickLoad_label_new() {\n            this.$refs.refFile_label_new.dispatchEvent(new MouseEvent('click'));\n        }\n    },\n    mounted() {\n        this.$store.commit('setUserId', sessionStorage.getItem('userId'));\n    }\n};\n</script>\n<style scoped>\n.view {\n    width: 1300px;\n    height: 580px;\n    margin: auto;\n    float: left;\n    background-color: #fff;\n}\n.view1 {\n    width: 600px;\n    height: 530px;\n    margin: 0 10px 0 0;\n    background-color: #fff;\n    float: left;\n}\n</style>\n"],"sourceRoot":"src/components/page"}]}